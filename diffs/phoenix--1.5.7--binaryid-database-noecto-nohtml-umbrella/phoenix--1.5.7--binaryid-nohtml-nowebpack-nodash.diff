diff --git .formatter.exs .formatter.exs
index 6915976..8a6391c 100644
--- .formatter.exs
+++ .formatter.exs
@@ -1,4 +1,5 @@
 [
-  inputs: ["mix.exs", "config/*.exs"],
-  subdirectories: ["apps/*"]
+  import_deps: [:ecto, :phoenix],
+  inputs: ["*.{ex,exs}", "priv/*/seeds.exs", "{config,lib,test}/**/*.{ex,exs}"],
+  subdirectories: ["priv/*/migrations"]
 ]
diff --git .gitignore .gitignore
index 12179ea..be002d1 100644
--- .gitignore
+++ .gitignore
@@ -18,3 +18,11 @@ erl_crash.dump
 
 # Also ignore archive artifacts (built via "mix archive.build").
 *.ez
+
+# Ignore package tarball (built via "mix hex.build").
+my_app-*.tar
+
+# Since we are building assets from assets/,
+# we ignore priv/static. You may want to comment
+# this depending on your deployment strategy.
+/priv/static/
diff --git README.md README.md
index 729adca..f59887f 100644
--- README.md
+++ README.md
@@ -1 +1,19 @@
-# MyApp.Umbrella
+# MyApp
+
+To start your Phoenix server:
+
+  * Install dependencies with `mix deps.get`
+  * Create and migrate your database with `mix ecto.setup`
+  * Start Phoenix endpoint with `mix phx.server`
+
+Now you can visit [`localhost:4000`](http://localhost:4000) from your browser.
+
+Ready to run in production? Please [check our deployment guides](https://hexdocs.pm/phoenix/deployment.html).
+
+## Learn more
+
+  * Official website: https://www.phoenixframework.org/
+  * Guides: https://hexdocs.pm/phoenix/overview.html
+  * Docs: https://hexdocs.pm/phoenix
+  * Forum: https://elixirforum.com/c/phoenix-forum
+  * Source: https://github.com/phoenixframework/phoenix
diff --git apps/my_app/.formatter.exs b/projects/phoenix/1.5.7/binaryid-database-noecto-nohtml-umbrella/apps/my_app/.formatter.exs
deleted file mode 100644
index 3d8ce11..0000000
--- apps/my_app/.formatter.exs
+++ /dev/null
@@ -1,3 +0,0 @@
-[
-  inputs: ["*.{ex,exs}", "{config,lib,test}/**/*.{ex,exs}"]
-]
diff --git apps/my_app/.gitignore b/projects/phoenix/1.5.7/binaryid-database-noecto-nohtml-umbrella/apps/my_app/.gitignore
deleted file mode 100644
index 992da6d..0000000
--- apps/my_app/.gitignore
+++ /dev/null
@@ -1,23 +0,0 @@
-# The directory Mix will write compiled artifacts to.
-/_build/
-
-# If you run "mix test --cover", coverage assets end up here.
-/cover/
-
-# The directory Mix downloads your dependencies sources to.
-/deps/
-
-# Where 3rd-party dependencies like ExDoc output generated docs.
-/doc/
-
-# Ignore .fetch files in case you like to edit your project deps locally.
-/.fetch
-
-# If the VM crashes, it generates a dump, let's ignore it too.
-erl_crash.dump
-
-# Also ignore archive artifacts (built via "mix archive.build").
-*.ez
-
-# Ignore package tarball (built via "mix hex.build").
-my_app-*.tar
diff --git apps/my_app/README.md b/projects/phoenix/1.5.7/binaryid-database-noecto-nohtml-umbrella/apps/my_app/README.md
deleted file mode 100644
index 4a0521a..0000000
--- apps/my_app/README.md
+++ /dev/null
@@ -1,3 +0,0 @@
-# MyApp
-
-**TODO: Add description**
diff --git apps/my_app/lib/my_app/application.ex b/projects/phoenix/1.5.7/binaryid-database-noecto-nohtml-umbrella/apps/my_app/lib/my_app/application.ex
deleted file mode 100644
index d968a2f..0000000
--- apps/my_app/lib/my_app/application.ex
+++ /dev/null
@@ -1,18 +0,0 @@
-defmodule MyApp.Application do
-  # See https://hexdocs.pm/elixir/Application.html
-  # for more information on OTP Applications
-  @moduledoc false
-
-  use Application
-
-  def start(_type, _args) do
-    children = [
-      # Start the PubSub system
-      {Phoenix.PubSub, name: MyApp.PubSub}
-      # Start a worker by calling: MyApp.Worker.start_link(arg)
-      # {MyApp.Worker, arg}
-    ]
-
-    Supervisor.start_link(children, strategy: :one_for_one, name: MyApp.Supervisor)
-  end
-end
diff --git apps/my_app/mix.exs b/projects/phoenix/1.5.7/binaryid-database-noecto-nohtml-umbrella/apps/my_app/mix.exs
deleted file mode 100644
index 07cf694..0000000
--- apps/my_app/mix.exs
+++ /dev/null
@@ -1,51 +0,0 @@
-defmodule MyApp.MixProject do
-  use Mix.Project
-
-  def project do
-    [
-      app: :my_app,
-      version: "0.1.0",
-      build_path: "../../_build",
-      config_path: "../../config/config.exs",
-      deps_path: "../../deps",
-      lockfile: "../../mix.lock",
-      elixir: "~> 1.7",
-      elixirc_paths: elixirc_paths(Mix.env()),
-      start_permanent: Mix.env() == :prod,
-      aliases: aliases(),
-      deps: deps()
-    ]
-  end
-
-  # Configuration for the OTP application.
-  #
-  # Type `mix help compile.app` for more information.
-  def application do
-    [
-      mod: {MyApp.Application, []},
-      extra_applications: [:logger, :runtime_tools]
-    ]
-  end
-
-  # Specifies which paths to compile per environment.
-  defp elixirc_paths(:test), do: ["lib", "test/support"]
-  defp elixirc_paths(_), do: ["lib"]
-
-  # Specifies your project dependencies.
-  #
-  # Type `mix help deps` for examples and options.
-  defp deps do
-    [
-      {:phoenix_pubsub, "~> 2.0"}
-    ]
-  end
-
-  # Aliases are shortcuts or tasks specific to the current project.
-  #
-  # See the documentation for `Mix` for more info on aliases.
-  defp aliases do
-    [
-      setup: ["deps.get"]
-    ]
-  end
-end
diff --git apps/my_app/test/test_helper.exs b/projects/phoenix/1.5.7/binaryid-database-noecto-nohtml-umbrella/apps/my_app/test/test_helper.exs
deleted file mode 100644
index 869559e..0000000
--- apps/my_app/test/test_helper.exs
+++ /dev/null
@@ -1 +0,0 @@
-ExUnit.start()
diff --git apps/my_app_web/.formatter.exs b/projects/phoenix/1.5.7/binaryid-database-noecto-nohtml-umbrella/apps/my_app_web/.formatter.exs
deleted file mode 100644
index 4761678..0000000
--- apps/my_app_web/.formatter.exs
+++ /dev/null
@@ -1,4 +0,0 @@
-[
-  import_deps: [:phoenix],
-  inputs: ["*.{ex,exs}", "{config,lib,test}/**/*.{ex,exs}"]
-]
diff --git apps/my_app_web/.gitignore b/projects/phoenix/1.5.7/binaryid-database-noecto-nohtml-umbrella/apps/my_app_web/.gitignore
deleted file mode 100644
index 5f1d967..0000000
--- apps/my_app_web/.gitignore
+++ /dev/null
@@ -1,34 +0,0 @@
-# The directory Mix will write compiled artifacts to.
-/_build/
-
-# If you run "mix test --cover", coverage assets end up here.
-/cover/
-
-# The directory Mix downloads your dependencies sources to.
-/deps/
-
-# Where 3rd-party dependencies like ExDoc output generated docs.
-/doc/
-
-# Ignore .fetch files in case you like to edit your project deps locally.
-/.fetch
-
-# If the VM crashes, it generates a dump, let's ignore it too.
-erl_crash.dump
-
-# Also ignore archive artifacts (built via "mix archive.build").
-*.ez
-
-# Ignore package tarball (built via "mix hex.build").
-my_app_web-*.tar
-
-# If NPM crashes, it generates a log, let's ignore it too.
-npm-debug.log
-
-# The directory NPM downloads your dependencies sources to.
-/assets/node_modules/
-
-# Since we are building assets from assets/,
-# we ignore priv/static. You may want to comment
-# this depending on your deployment strategy.
-/priv/static/
diff --git apps/my_app_web/README.md b/projects/phoenix/1.5.7/binaryid-database-noecto-nohtml-umbrella/apps/my_app_web/README.md
deleted file mode 100644
index 6d4b014..0000000
--- apps/my_app_web/README.md
+++ /dev/null
@@ -1,19 +0,0 @@
-# MyAppWeb
-
-To start your Phoenix server:
-
-  * Install dependencies with `mix deps.get`
-  * Install Node.js dependencies with `npm install` inside the `assets` directory
-  * Start Phoenix endpoint with `mix phx.server`
-
-Now you can visit [`localhost:4000`](http://localhost:4000) from your browser.
-
-Ready to run in production? Please [check our deployment guides](https://hexdocs.pm/phoenix/deployment.html).
-
-## Learn more
-
-  * Official website: https://www.phoenixframework.org/
-  * Guides: https://hexdocs.pm/phoenix/overview.html
-  * Docs: https://hexdocs.pm/phoenix
-  * Forum: https://elixirforum.com/c/phoenix-forum
-  * Source: https://github.com/phoenixframework/phoenix
diff --git apps/my_app_web/assets/.babelrc b/projects/phoenix/1.5.7/binaryid-database-noecto-nohtml-umbrella/apps/my_app_web/assets/.babelrc
deleted file mode 100644
index ce33b24..0000000
--- apps/my_app_web/assets/.babelrc
+++ /dev/null
@@ -1,5 +0,0 @@
-{
-    "presets": [
-        "@babel/preset-env"
-    ]
-}
diff --git apps/my_app_web/assets/css/app.scss b/projects/phoenix/1.5.7/binaryid-database-noecto-nohtml-umbrella/apps/my_app_web/assets/css/app.scss
deleted file mode 100644
index 5c2c9b5..0000000
--- apps/my_app_web/assets/css/app.scss
+++ /dev/null
@@ -1,36 +0,0 @@
-/* This file is for your main application css. */
-@import "./phoenix.css";
-
-/* Alerts and form errors */
-.alert {
-  padding: 15px;
-  margin-bottom: 20px;
-  border: 1px solid transparent;
-  border-radius: 4px;
-}
-.alert-info {
-  color: #31708f;
-  background-color: #d9edf7;
-  border-color: #bce8f1;
-}
-.alert-warning {
-  color: #8a6d3b;
-  background-color: #fcf8e3;
-  border-color: #faebcc;
-}
-.alert-danger {
-  color: #a94442;
-  background-color: #f2dede;
-  border-color: #ebccd1;
-}
-.alert p {
-  margin-bottom: 0;
-}
-.alert:empty {
-  display: none;
-}
-.invalid-feedback {
-  color: #a94442;
-  display: block;
-  margin: -1rem 0 2rem;
-}
diff --git apps/my_app_web/assets/css/phoenix.css b/projects/phoenix/1.5.7/binaryid-database-noecto-nohtml-umbrella/apps/my_app_web/assets/css/phoenix.css
deleted file mode 100644
index 3767b31..0000000
--- apps/my_app_web/assets/css/phoenix.css
+++ /dev/null
@@ -1,101 +0,0 @@
-/* Includes some default style for the starter application.
- * This can be safely deleted to start fresh.
- */
-
-/* Milligram v1.3.0 https://milligram.github.io
- * Copyright (c) 2017 CJ Patoilo Licensed under the MIT license
- */
-
-*,*:after,*:before{box-sizing:inherit}html{box-sizing:border-box;font-size:62.5%}body{color:#000000;font-family:'Helvetica', 'Arial', sans-serif;font-size:1.6em;font-weight:300;line-height:1.6}blockquote{border-left:0.3rem solid #d1d1d1;margin-left:0;margin-right:0;padding:1rem 1.5rem}blockquote *:last-child{margin-bottom:0}.button,button,input[type='button'],input[type='reset'],input[type='submit']{background-color:#0069d9;border:0.1rem solid #0069d9;border-radius:.4rem;color:#fff;cursor:pointer;display:inline-block;font-size:1.1rem;font-weight:700;height:3.8rem;letter-spacing:.1rem;line-height:3.8rem;padding:0 3.0rem;text-align:center;text-decoration:none;text-transform:uppercase;white-space:nowrap}.button:focus,.button:hover,button:focus,button:hover,input[type='button']:focus,input[type='button']:hover,input[type='reset']:focus,input[type='reset']:hover,input[type='submit']:focus,input[type='submit']:hover{background-color:#606c76;border-color:#606c76;color:#fff;outline:0}.button[disabled],button[disabled],input[type='button'][disabled],input[type='reset'][disabled],input[type='submit'][disabled]{cursor:default;opacity:.5}.button[disabled]:focus,.button[disabled]:hover,button[disabled]:focus,button[disabled]:hover,input[type='button'][disabled]:focus,input[type='button'][disabled]:hover,input[type='reset'][disabled]:focus,input[type='reset'][disabled]:hover,input[type='submit'][disabled]:focus,input[type='submit'][disabled]:hover{background-color:#0069d9;border-color:#0069d9}.button.button-outline,button.button-outline,input[type='button'].button-outline,input[type='reset'].button-outline,input[type='submit'].button-outline{background-color:transparent;color:#0069d9}.button.button-outline:focus,.button.button-outline:hover,button.button-outline:focus,button.button-outline:hover,input[type='button'].button-outline:focus,input[type='button'].button-outline:hover,input[type='reset'].button-outline:focus,input[type='reset'].button-outline:hover,input[type='submit'].button-outline:focus,input[type='submit'].button-outline:hover{background-color:transparent;border-color:#606c76;color:#606c76}.button.button-outline[disabled]:focus,.button.button-outline[disabled]:hover,button.button-outline[disabled]:focus,button.button-outline[disabled]:hover,input[type='button'].button-outline[disabled]:focus,input[type='button'].button-outline[disabled]:hover,input[type='reset'].button-outline[disabled]:focus,input[type='reset'].button-outline[disabled]:hover,input[type='submit'].button-outline[disabled]:focus,input[type='submit'].button-outline[disabled]:hover{border-color:inherit;color:#0069d9}.button.button-clear,button.button-clear,input[type='button'].button-clear,input[type='reset'].button-clear,input[type='submit'].button-clear{background-color:transparent;border-color:transparent;color:#0069d9}.button.button-clear:focus,.button.button-clear:hover,button.button-clear:focus,button.button-clear:hover,input[type='button'].button-clear:focus,input[type='button'].button-clear:hover,input[type='reset'].button-clear:focus,input[type='reset'].button-clear:hover,input[type='submit'].button-clear:focus,input[type='submit'].button-clear:hover{background-color:transparent;border-color:transparent;color:#606c76}.button.button-clear[disabled]:focus,.button.button-clear[disabled]:hover,button.button-clear[disabled]:focus,button.button-clear[disabled]:hover,input[type='button'].button-clear[disabled]:focus,input[type='button'].button-clear[disabled]:hover,input[type='reset'].button-clear[disabled]:focus,input[type='reset'].button-clear[disabled]:hover,input[type='submit'].button-clear[disabled]:focus,input[type='submit'].button-clear[disabled]:hover{color:#0069d9}code{background:#f4f5f6;border-radius:.4rem;font-size:86%;margin:0 .2rem;padding:.2rem .5rem;white-space:nowrap}pre{background:#f4f5f6;border-left:0.3rem solid #0069d9;overflow-y:hidden}pre>code{border-radius:0;display:block;padding:1rem 1.5rem;white-space:pre}hr{border:0;border-top:0.1rem solid #f4f5f6;margin:3.0rem 0}input[type='email'],input[type='number'],input[type='password'],input[type='search'],input[type='tel'],input[type='text'],input[type='url'],textarea,select{-webkit-appearance:none;-moz-appearance:none;appearance:none;background-color:transparent;border:0.1rem solid #d1d1d1;border-radius:.4rem;box-shadow:none;box-sizing:inherit;height:3.8rem;padding:.6rem 1.0rem;width:100%}input[type='email']:focus,input[type='number']:focus,input[type='password']:focus,input[type='search']:focus,input[type='tel']:focus,input[type='text']:focus,input[type='url']:focus,textarea:focus,select:focus{border-color:#0069d9;outline:0}select{background:url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" height="14" viewBox="0 0 29 14" width="29"><path fill="%23d1d1d1" d="M9.37727 3.625l5.08154 6.93523L19.54036 3.625"/></svg>') center right no-repeat;padding-right:3.0rem}select:focus{background-image:url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" height="14" viewBox="0 0 29 14" width="29"><path fill="%230069d9" d="M9.37727 3.625l5.08154 6.93523L19.54036 3.625"/></svg>')}textarea{min-height:6.5rem}label,legend{display:block;font-size:1.6rem;font-weight:700;margin-bottom:.5rem}fieldset{border-width:0;padding:0}input[type='checkbox'],input[type='radio']{display:inline}.label-inline{display:inline-block;font-weight:normal;margin-left:.5rem}.row{display:flex;flex-direction:column;padding:0;width:100%}.row.row-no-padding{padding:0}.row.row-no-padding>.column{padding:0}.row.row-wrap{flex-wrap:wrap}.row.row-top{align-items:flex-start}.row.row-bottom{align-items:flex-end}.row.row-center{align-items:center}.row.row-stretch{align-items:stretch}.row.row-baseline{align-items:baseline}.row .column{display:block;flex:1 1 auto;margin-left:0;max-width:100%;width:100%}.row .column.column-offset-10{margin-left:10%}.row .column.column-offset-20{margin-left:20%}.row .column.column-offset-25{margin-left:25%}.row .column.column-offset-33,.row .column.column-offset-34{margin-left:33.3333%}.row .column.column-offset-50{margin-left:50%}.row .column.column-offset-66,.row .column.column-offset-67{margin-left:66.6666%}.row .column.column-offset-75{margin-left:75%}.row .column.column-offset-80{margin-left:80%}.row .column.column-offset-90{margin-left:90%}.row .column.column-10{flex:0 0 10%;max-width:10%}.row .column.column-20{flex:0 0 20%;max-width:20%}.row .column.column-25{flex:0 0 25%;max-width:25%}.row .column.column-33,.row .column.column-34{flex:0 0 33.3333%;max-width:33.3333%}.row .column.column-40{flex:0 0 40%;max-width:40%}.row .column.column-50{flex:0 0 50%;max-width:50%}.row .column.column-60{flex:0 0 60%;max-width:60%}.row .column.column-66,.row .column.column-67{flex:0 0 66.6666%;max-width:66.6666%}.row .column.column-75{flex:0 0 75%;max-width:75%}.row .column.column-80{flex:0 0 80%;max-width:80%}.row .column.column-90{flex:0 0 90%;max-width:90%}.row .column .column-top{align-self:flex-start}.row .column .column-bottom{align-self:flex-end}.row .column .column-center{-ms-grid-row-align:center;align-self:center}@media (min-width: 40rem){.row{flex-direction:row;margin-left:-1.0rem;width:calc(100% + 2.0rem)}.row .column{margin-bottom:inherit;padding:0 1.0rem}}a{color:#0069d9;text-decoration:none}a:focus,a:hover{color:#606c76}dl,ol,ul{list-style:none;margin-top:0;padding-left:0}dl dl,dl ol,dl ul,ol dl,ol ol,ol ul,ul dl,ul ol,ul ul{font-size:90%;margin:1.5rem 0 1.5rem 3.0rem}ol{list-style:decimal inside}ul{list-style:circle inside}.button,button,dd,dt,li{margin-bottom:1.0rem}fieldset,input,select,textarea{margin-bottom:1.5rem}blockquote,dl,figure,form,ol,p,pre,table,ul{margin-bottom:2.5rem}table{border-spacing:0;width:100%}td,th{border-bottom:0.1rem solid #e1e1e1;padding:1.2rem 1.5rem;text-align:left}td:first-child,th:first-child{padding-left:0}td:last-child,th:last-child{padding-right:0}b,strong{font-weight:bold}p{margin-top:0}h1,h2,h3,h4,h5,h6{font-weight:300;letter-spacing:-.1rem;margin-bottom:2.0rem;margin-top:0}h1{font-size:4.6rem;line-height:1.2}h2{font-size:3.6rem;line-height:1.25}h3{font-size:2.8rem;line-height:1.3}h4{font-size:2.2rem;letter-spacing:-.08rem;line-height:1.35}h5{font-size:1.8rem;letter-spacing:-.05rem;line-height:1.5}h6{font-size:1.6rem;letter-spacing:0;line-height:1.4}img{max-width:100%}.clearfix:after{clear:both;content:' ';display:table}.float-left{float:left}.float-right{float:right}
-
-/* General style */
-h1{font-size: 3.6rem; line-height: 1.25}
-h2{font-size: 2.8rem; line-height: 1.3}
-h3{font-size: 2.2rem; letter-spacing: -.08rem; line-height: 1.35}
-h4{font-size: 1.8rem; letter-spacing: -.05rem; line-height: 1.5}
-h5{font-size: 1.6rem; letter-spacing: 0; line-height: 1.4}
-h6{font-size: 1.4rem; letter-spacing: 0; line-height: 1.2}
-pre{padding: 1em;}
-
-.container{
-  margin: 0 auto;
-  max-width: 80.0rem;
-  padding: 0 2.0rem;
-  position: relative;
-  width: 100%
-}
-select {
-  width: auto;
-}
-
-/* Phoenix promo and logo */
-.phx-hero {
-  text-align: center;
-  border-bottom: 1px solid #e3e3e3;
-  background: #eee;
-  border-radius: 6px;
-  padding: 3em 3em 1em;
-  margin-bottom: 3rem;
-  font-weight: 200;
-  font-size: 120%;
-}
-.phx-hero input {
-  background: #ffffff;
-}
-.phx-logo {
-  min-width: 300px;
-  margin: 1rem;
-  display: block;
-}
-.phx-logo img {
-  width: auto;
-  display: block;
-}
-
-/* Headers */
-header {
-  width: 100%;
-  background: #fdfdfd;
-  border-bottom: 1px solid #eaeaea;
-  margin-bottom: 2rem;
-}
-header section {
-  align-items: center;
-  display: flex;
-  flex-direction: column;
-  justify-content: space-between;
-}
-header section :first-child {
-  order: 2;
-}
-header section :last-child {
-  order: 1;
-}
-header nav ul,
-header nav li {
-  margin: 0;
-  padding: 0;
-  display: block;
-  text-align: right;
-  white-space: nowrap;
-}
-header nav ul {
-  margin: 1rem;
-  margin-top: 0;
-}
-header nav a {
-  display: block;
-}
-
-@media (min-width: 40.0rem) { /* Small devices (landscape phones, 576px and up) */
-  header section {
-    flex-direction: row;
-  }
-  header nav ul {
-    margin: 1rem;
-  }
-  .phx-logo {
-    flex-basis: 527px;
-    margin: 2rem 1rem;
-  }
-}
diff --git apps/my_app_web/assets/js/app.js b/projects/phoenix/1.5.7/binaryid-database-noecto-nohtml-umbrella/apps/my_app_web/assets/js/app.js
deleted file mode 100644
index 5f6ee98..0000000
--- apps/my_app_web/assets/js/app.js
+++ /dev/null
@@ -1,15 +0,0 @@
-// We need to import the CSS so that webpack will load it.
-// The MiniCssExtractPlugin is used to separate it out into
-// its own CSS file.
-import "../css/app.scss"
-
-// webpack automatically bundles all modules in your
-// entry points. Those entry points can be configured
-// in "webpack.config.js".
-//
-// Import deps with the dep name or local files with a relative path, for example:
-//
-//     import {Socket} from "phoenix"
-//     import socket from "./socket"
-//
-
diff --git apps/my_app_web/assets/js/socket.js b/projects/phoenix/1.5.7/binaryid-database-noecto-nohtml-umbrella/apps/my_app_web/assets/js/socket.js
deleted file mode 100644
index 09929ab..0000000
--- apps/my_app_web/assets/js/socket.js
+++ /dev/null
@@ -1,63 +0,0 @@
-// NOTE: The contents of this file will only be executed if
-// you uncomment its entry in "assets/js/app.js".
-
-// To use Phoenix channels, the first step is to import Socket,
-// and connect at the socket path in "lib/web/endpoint.ex".
-//
-// Pass the token on params as below. Or remove it
-// from the params if you are not using authentication.
-import {Socket} from "phoenix"
-
-let socket = new Socket("/socket", {params: {token: window.userToken}})
-
-// When you connect, you'll often need to authenticate the client.
-// For example, imagine you have an authentication plug, `MyAuth`,
-// which authenticates the session and assigns a `:current_user`.
-// If the current user exists you can assign the user's token in
-// the connection for use in the layout.
-//
-// In your "lib/web/router.ex":
-//
-//     pipeline :browser do
-//       ...
-//       plug MyAuth
-//       plug :put_user_token
-//     end
-//
-//     defp put_user_token(conn, _) do
-//       if current_user = conn.assigns[:current_user] do
-//         token = Phoenix.Token.sign(conn, "user socket", current_user.id)
-//         assign(conn, :user_token, token)
-//       else
-//         conn
-//       end
-//     end
-//
-// Now you need to pass this token to JavaScript. You can do so
-// inside a script tag in "lib/web/templates/layout/app.html.eex":
-//
-//     <script>window.userToken = "<%= assigns[:user_token] %>";</script>
-//
-// You will need to verify the user token in the "connect/3" function
-// in "lib/web/channels/user_socket.ex":
-//
-//     def connect(%{"token" => token}, socket, _connect_info) do
-//       # max_age: 1209600 is equivalent to two weeks in seconds
-//       case Phoenix.Token.verify(socket, "user socket", token, max_age: 1209600) do
-//         {:ok, user_id} ->
-//           {:ok, assign(socket, :user, user_id)}
-//         {:error, reason} ->
-//           :error
-//       end
-//     end
-//
-// Finally, connect to the socket:
-socket.connect()
-
-// Now that you are connected, you can join channels with a topic:
-let channel = socket.channel("topic:subtopic", {})
-channel.join()
-  .receive("ok", resp => { console.log("Joined successfully", resp) })
-  .receive("error", resp => { console.log("Unable to join", resp) })
-
-export default socket
diff --git apps/my_app_web/assets/package.json b/projects/phoenix/1.5.7/binaryid-database-noecto-nohtml-umbrella/apps/my_app_web/assets/package.json
deleted file mode 100644
index 624f823..0000000
--- apps/my_app_web/assets/package.json
+++ /dev/null
@@ -1,27 +0,0 @@
-{
-  "repository": {},
-  "description": " ",
-  "license": "MIT",
-  "scripts": {
-    "deploy": "webpack --mode production",
-    "watch": "webpack --mode development --watch"
-  },
-  "dependencies": {
-    "phoenix": "file:../../../deps/phoenix"
-  },
-  "devDependencies": {
-    "@babel/core": "^7.0.0",
-    "@babel/preset-env": "^7.0.0",
-    "babel-loader": "^8.0.0",
-    "copy-webpack-plugin": "^5.1.1",
-    "css-loader": "^3.4.2",
-    "sass-loader": "^8.0.2",
-    "node-sass": "^4.13.1",
-    "hard-source-webpack-plugin": "^0.13.1",
-    "mini-css-extract-plugin": "^0.9.0",
-    "optimize-css-assets-webpack-plugin": "^5.0.1",
-    "terser-webpack-plugin": "^2.3.2",
-    "webpack": "4.41.5",
-    "webpack-cli": "^3.3.2"
-  }
-}
diff --git apps/my_app_web/assets/static/favicon.ico b/projects/phoenix/1.5.7/binaryid-database-noecto-nohtml-umbrella/apps/my_app_web/assets/static/favicon.ico
deleted file mode 100644
index 73de524..0000000
Binary files apps/my_app_web/assets/static/favicon.ico and /dev/null differ
diff --git apps/my_app_web/assets/static/images/phoenix.png b/projects/phoenix/1.5.7/binaryid-database-noecto-nohtml-umbrella/apps/my_app_web/assets/static/images/phoenix.png
deleted file mode 100644
index 9c81075..0000000
Binary files apps/my_app_web/assets/static/images/phoenix.png and /dev/null differ
diff --git apps/my_app_web/assets/static/robots.txt b/projects/phoenix/1.5.7/binaryid-database-noecto-nohtml-umbrella/apps/my_app_web/assets/static/robots.txt
deleted file mode 100644
index 3c9c7c0..0000000
--- apps/my_app_web/assets/static/robots.txt
+++ /dev/null
@@ -1,5 +0,0 @@
-# See http://www.robotstxt.org/robotstxt.html for documentation on how to use the robots.txt file
-#
-# To ban all spiders from the entire site uncomment the next two lines:
-# User-agent: *
-# Disallow: /
diff --git apps/my_app_web/assets/webpack.config.js b/projects/phoenix/1.5.7/binaryid-database-noecto-nohtml-umbrella/apps/my_app_web/assets/webpack.config.js
deleted file mode 100644
index 079610d..0000000
--- apps/my_app_web/assets/webpack.config.js
+++ /dev/null
@@ -1,53 +0,0 @@
-const path = require('path');
-const glob = require('glob');
-const HardSourceWebpackPlugin = require('hard-source-webpack-plugin');
-const MiniCssExtractPlugin = require('mini-css-extract-plugin');
-const TerserPlugin = require('terser-webpack-plugin');
-const OptimizeCSSAssetsPlugin = require('optimize-css-assets-webpack-plugin');
-const CopyWebpackPlugin = require('copy-webpack-plugin');
-
-module.exports = (env, options) => {
-  const devMode = options.mode !== 'production';
-
-  return {
-    optimization: {
-      minimizer: [
-        new TerserPlugin({ cache: true, parallel: true, sourceMap: devMode }),
-        new OptimizeCSSAssetsPlugin({})
-      ]
-    },
-    entry: {
-      'app': glob.sync('./vendor/**/*.js').concat(['./js/app.js'])
-    },
-    output: {
-      filename: '[name].js',
-      path: path.resolve(__dirname, '../priv/static/js'),
-      publicPath: '/js/'
-    },
-    devtool: devMode ? 'eval-cheap-module-source-map' : undefined,
-    module: {
-      rules: [
-        {
-          test: /\.js$/,
-          exclude: /node_modules/,
-          use: {
-            loader: 'babel-loader'
-          }
-        },
-        {
-          test: /\.[s]?css$/,
-          use: [
-            MiniCssExtractPlugin.loader,
-            'css-loader',
-            'sass-loader',
-          ],
-        }
-      ]
-    },
-    plugins: [
-      new MiniCssExtractPlugin({ filename: '../css/app.css' }),
-      new CopyWebpackPlugin([{ from: 'static/', to: '../' }])
-    ]
-    .concat(devMode ? [new HardSourceWebpackPlugin()] : [])
-  }
-};
diff --git apps/my_app_web/lib/my_app_web/router.ex b/projects/phoenix/1.5.7/binaryid-database-noecto-nohtml-umbrella/apps/my_app_web/lib/my_app_web/router.ex
deleted file mode 100644
index 4abdff1..0000000
--- apps/my_app_web/lib/my_app_web/router.ex
+++ /dev/null
@@ -1,27 +0,0 @@
-defmodule MyAppWeb.Router do
-  use MyAppWeb, :router
-
-  pipeline :api do
-    plug :accepts, ["json"]
-  end
-
-  scope "/api", MyAppWeb do
-    pipe_through :api
-  end
-
-  # Enables LiveDashboard only for development
-  #
-  # If you want to use the LiveDashboard in production, you should put
-  # it behind authentication and allow only admins to access it.
-  # If your application does not have an admins-only section yet,
-  # you can use Plug.BasicAuth to set up some basic authentication
-  # as long as you are also using SSL (which you should anyway).
-  if Mix.env() in [:dev, :test] do
-    import Phoenix.LiveDashboard.Router
-
-    scope "/" do
-      pipe_through [:fetch_session, :protect_from_forgery]
-      live_dashboard "/dashboard", metrics: MyAppWeb.Telemetry
-    end
-  end
-end
diff --git apps/my_app_web/mix.exs b/projects/phoenix/1.5.7/binaryid-database-noecto-nohtml-umbrella/apps/my_app_web/mix.exs
deleted file mode 100644
index 0c252b2..0000000
--- apps/my_app_web/mix.exs
+++ /dev/null
@@ -1,59 +0,0 @@
-defmodule MyAppWeb.MixProject do
-  use Mix.Project
-
-  def project do
-    [
-      app: :my_app_web,
-      version: "0.1.0",
-      build_path: "../../_build",
-      config_path: "../../config/config.exs",
-      deps_path: "../../deps",
-      lockfile: "../../mix.lock",
-      elixir: "~> 1.7",
-      elixirc_paths: elixirc_paths(Mix.env()),
-      compilers: [:phoenix, :gettext] ++ Mix.compilers(),
-      start_permanent: Mix.env() == :prod,
-      aliases: aliases(),
-      deps: deps()
-    ]
-  end
-
-  # Configuration for the OTP application.
-  #
-  # Type `mix help compile.app` for more information.
-  def application do
-    [
-      mod: {MyAppWeb.Application, []},
-      extra_applications: [:logger, :runtime_tools]
-    ]
-  end
-
-  # Specifies which paths to compile per environment.
-  defp elixirc_paths(:test), do: ["lib", "test/support"]
-  defp elixirc_paths(_), do: ["lib"]
-
-  # Specifies your project dependencies.
-  #
-  # Type `mix help deps` for examples and options.
-  defp deps do
-    [
-      {:phoenix, "~> 1.5.7"},
-      {:phoenix_live_dashboard, "~> 0.4"},
-      {:telemetry_metrics, "~> 0.4"},
-      {:telemetry_poller, "~> 0.4"},
-      {:gettext, "~> 0.11"},
-      {:my_app, in_umbrella: true},
-      {:jason, "~> 1.0"},
-      {:plug_cowboy, "~> 2.0"}
-    ]
-  end
-
-  # Aliases are shortcuts or tasks specific to the current project.
-  #
-  # See the documentation for `Mix` for more info on aliases.
-  defp aliases do
-    [
-      setup: ["deps.get", "cmd npm install --prefix assets"]
-    ]
-  end
-end
diff --git apps/my_app_web/priv/gettext/en/LC_MESSAGES/errors.po b/projects/phoenix/1.5.7/binaryid-database-noecto-nohtml-umbrella/apps/my_app_web/priv/gettext/en/LC_MESSAGES/errors.po
deleted file mode 100644
index cdec3a1..0000000
--- apps/my_app_web/priv/gettext/en/LC_MESSAGES/errors.po
+++ /dev/null
@@ -1,11 +0,0 @@
-## `msgid`s in this file come from POT (.pot) files.
-##
-## Do not add, change, or remove `msgid`s manually here as
-## they're tied to the ones in the corresponding POT file
-## (with the same domain).
-##
-## Use `mix gettext.extract --merge` or `mix gettext.merge`
-## to merge POT files into PO files.
-msgid ""
-msgstr ""
-"Language: en\n"
diff --git apps/my_app_web/priv/gettext/errors.pot b/projects/phoenix/1.5.7/binaryid-database-noecto-nohtml-umbrella/apps/my_app_web/priv/gettext/errors.pot
deleted file mode 100644
index d6f47fa..0000000
--- apps/my_app_web/priv/gettext/errors.pot
+++ /dev/null
@@ -1,10 +0,0 @@
-## This is a PO Template file.
-##
-## `msgid`s here are often extracted from source code.
-## Add new translations manually only if they're dynamic
-## translations that can't be statically extracted.
-##
-## Run `mix gettext.extract` to bring this file up to
-## date. Leave `msgstr`s empty as changing them here has no
-## effect: edit them in PO (`.po`) files instead.
-
diff --git apps/my_app_web/test/test_helper.exs b/projects/phoenix/1.5.7/binaryid-database-noecto-nohtml-umbrella/apps/my_app_web/test/test_helper.exs
deleted file mode 100644
index 869559e..0000000
--- apps/my_app_web/test/test_helper.exs
+++ /dev/null
@@ -1 +0,0 @@
-ExUnit.start()
diff --git config/config.exs config/config.exs
index b6d8a6c..4a28872 100644
--- config/config.exs
+++ config/config.exs
@@ -1,21 +1,18 @@
-# This file is responsible for configuring your umbrella
-# and **all applications** and their dependencies with the
-# help of Mix.Config.
+# This file is responsible for configuring your application
+# and its dependencies with the aid of the Mix.Config module.
 #
-# Note that all applications in your umbrella share the
-# same configuration and dependencies, which is why they
-# all use the same configuration file. If you want different
-# configurations or dependencies per app, it is best to
-# move said applications out of the umbrella.
-use Mix.Config
-
+# This configuration file is loaded before any dependency and
+# is restricted to this project.
 
+# General application configuration
+use Mix.Config
 
-config :my_app_web,
-  generators: [context_app: :my_app, binary_id: true]
+config :my_app,
+  ecto_repos: [MyApp.Repo],
+  generators: [binary_id: true]
 
 # Configures the endpoint
-config :my_app_web, MyAppWeb.Endpoint,
+config :my_app, MyAppWeb.Endpoint,
   url: [host: "localhost"],
   secret_key_base: "[redacted]",
   render_errors: [view: MyAppWeb.ErrorView, accepts: ~w(json), layout: false],
diff --git config/dev.exs config/dev.exs
index 5622e68..9befbc1 100644
--- config/dev.exs
+++ config/dev.exs
@@ -1,25 +1,26 @@
 use Mix.Config
 
+# Configure your database
+config :my_app, MyApp.Repo,
+  username: "postgres",
+  password: "postgres",
+  database: "my_app_dev",
+  hostname: "localhost",
+  show_sensitive_data_on_connection_error: true,
+  pool_size: 10
+
 # For development, we disable any cache and enable
 # debugging and code reloading.
 #
 # The watchers configuration can be used to run external
 # watchers to your application. For example, we use it
 # with webpack to recompile .js and .css sources.
-config :my_app_web, MyAppWeb.Endpoint,
+config :my_app, MyAppWeb.Endpoint,
   http: [port: 4000],
   debug_errors: true,
   code_reloader: true,
   check_origin: false,
-  watchers: [
-    node: [
-      "node_modules/webpack/bin/webpack.js",
-      "--mode",
-      "development",
-      "--watch-stdin",
-      cd: Path.expand("../apps/my_app_web/assets", __DIR__)
-    ]
-  ]
+  watchers: []
 
 # ## SSL Support
 #
@@ -48,9 +49,9 @@ config :my_app_web, MyAppWeb.Endpoint,
 # Do not include metadata nor timestamps in development logs
 config :logger, :console, format: "[$level] $message\n"
 
-# Initialize plugs at runtime for faster development compilation
-config :phoenix, :plug_init_mode, :runtime
-
 # Set a higher stacktrace during development. Avoid configuring such
 # in production as building large stacktraces may be expensive.
 config :phoenix, :stacktrace_depth, 20
+
+# Initialize plugs at runtime for faster development compilation
+config :phoenix, :plug_init_mode, :runtime
diff --git config/prod.exs config/prod.exs
index 8310ab5..7443cb4 100644
--- config/prod.exs
+++ config/prod.exs
@@ -9,16 +9,19 @@ use Mix.Config
 # manifest is generated by the `mix phx.digest` task,
 # which you should run after static files are built and
 # before starting your production server.
-config :my_app_web, MyAppWeb.Endpoint,
+config :my_app, MyAppWeb.Endpoint,
   url: [host: "example.com", port: 80],
   cache_static_manifest: "priv/static/cache_manifest.json"
 
+# Do not print debug messages in production
+config :logger, level: :info
+
 # ## SSL Support
 #
 # To get SSL working, you will need to add the `https` key
 # to the previous section and set your `:url` port to 443:
 #
-#     config :my_app_web, MyAppWeb.Endpoint,
+#     config :my_app, MyAppWeb.Endpoint,
 #       ...
 #       url: [host: "example.com", port: 443],
 #       https: [
@@ -42,14 +45,11 @@ config :my_app_web, MyAppWeb.Endpoint,
 # We also recommend setting `force_ssl` in your endpoint, ensuring
 # no data is ever sent via http, always redirecting to https:
 #
-#     config :my_app_web, MyAppWeb.Endpoint,
+#     config :my_app, MyAppWeb.Endpoint,
 #       force_ssl: [hsts: true]
 #
 # Check `Plug.SSL` for all available options in `force_ssl`.
 
-# Do not print debug messages in production
-config :logger, level: :info
-
 # Finally import the config/prod.secret.exs which loads secrets
 # and configuration from environment variables.
 import_config "prod.secret.exs"
diff --git config/prod.secret.exs config/prod.secret.exs
index 702c128..968473e 100644
--- config/prod.secret.exs
+++ config/prod.secret.exs
@@ -4,6 +4,18 @@
 # remember to add this file to your .gitignore.
 use Mix.Config
 
+database_url =
+  System.get_env("DATABASE_URL") ||
+    raise """
+    environment variable DATABASE_URL is missing.
+    For example: ecto://USER:PASS@HOST/DATABASE
+    """
+
+config :my_app, MyApp.Repo,
+  # ssl: true,
+  url: database_url,
+  pool_size: String.to_integer(System.get_env("POOL_SIZE") || "10")
+
 secret_key_base =
   System.get_env("SECRET_KEY_BASE") ||
     raise """
@@ -11,7 +23,7 @@ secret_key_base =
     You can generate one by calling: mix phx.gen.secret
     """
 
-config :my_app_web, MyAppWeb.Endpoint,
+config :my_app, MyAppWeb.Endpoint,
   http: [
     port: String.to_integer(System.get_env("PORT") || "4000"),
     transport_options: [socket_opts: [:inet6]]
@@ -23,7 +35,7 @@ config :my_app_web, MyAppWeb.Endpoint,
 # If you are doing OTP releases, you need to instruct Phoenix
 # to start each relevant endpoint:
 #
-#     config :my_app_web, MyAppWeb.Endpoint, server: true
+#     config :my_app, MyAppWeb.Endpoint, server: true
 #
 # Then you can assemble a release by calling `mix release`.
 # See `mix help release` for more information.
diff --git config/test.exs config/test.exs
index 8fd529b..5589099 100644
--- config/test.exs
+++ config/test.exs
@@ -1,8 +1,20 @@
 use Mix.Config
 
+# Configure your database
+#
+# The MIX_TEST_PARTITION environment variable can be used
+# to provide built-in test partitioning in CI environment.
+# Run `mix help test` for more information.
+config :my_app, MyApp.Repo,
+  username: "postgres",
+  password: "postgres",
+  database: "my_app_test#{System.get_env("MIX_TEST_PARTITION")}",
+  hostname: "localhost",
+  pool: Ecto.Adapters.SQL.Sandbox
+
 # We don't run a server during test. If one is required,
 # you can enable the server option below.
-config :my_app_web, MyAppWeb.Endpoint,
+config :my_app, MyAppWeb.Endpoint,
   http: [port: 4002],
   server: false
 
diff --git apps/my_app_web/lib/my_app_web/application.ex lib/my_app/application.ex
similarity index 68%
rename from projects/phoenix/1.5.7/binaryid-database-noecto-nohtml-umbrella/apps/my_app_web/lib/my_app_web/application.ex
rename to projects/phoenix/1.5.7/binaryid-nohtml-nowebpack-nodash/lib/my_app/application.ex
index fbdce53..fd03945 100644
--- apps/my_app_web/lib/my_app_web/application.ex
+++ lib/my_app/application.ex
@@ -1,4 +1,4 @@
-defmodule MyAppWeb.Application do
+defmodule MyApp.Application do
   # See https://hexdocs.pm/elixir/Application.html
   # for more information on OTP Applications
   @moduledoc false
@@ -7,17 +7,21 @@ defmodule MyAppWeb.Application do
 
   def start(_type, _args) do
     children = [
+      # Start the Ecto repository
+      MyApp.Repo,
       # Start the Telemetry supervisor
       MyAppWeb.Telemetry,
+      # Start the PubSub system
+      {Phoenix.PubSub, name: MyApp.PubSub},
       # Start the Endpoint (http/https)
       MyAppWeb.Endpoint
-      # Start a worker by calling: MyAppWeb.Worker.start_link(arg)
-      # {MyAppWeb.Worker, arg}
+      # Start a worker by calling: MyApp.Worker.start_link(arg)
+      # {MyApp.Worker, arg}
     ]
 
     # See https://hexdocs.pm/elixir/Supervisor.html
     # for other strategies and supported options
-    opts = [strategy: :one_for_one, name: MyAppWeb.Supervisor]
+    opts = [strategy: :one_for_one, name: MyApp.Supervisor]
     Supervisor.start_link(children, opts)
   end
 
diff --git a/projects/phoenix/1.5.7/binaryid-nohtml-nowebpack-nodash/lib/my_app/repo.ex lib/my_app/repo.ex
new file mode 100644
index 0000000..595ff57
--- /dev/null
+++ lib/my_app/repo.ex
@@ -0,0 +1,5 @@
+defmodule MyApp.Repo do
+  use Ecto.Repo,
+    otp_app: :my_app,
+    adapter: Ecto.Adapters.Postgres
+end
diff --git apps/my_app/lib/my_app.ex lib/my_app.ex
similarity index 100%
rename from projects/phoenix/1.5.7/binaryid-database-noecto-nohtml-umbrella/apps/my_app/lib/my_app.ex
rename to projects/phoenix/1.5.7/binaryid-nohtml-nowebpack-nodash/lib/my_app.ex
diff --git apps/my_app_web/lib/my_app_web/channels/user_socket.ex lib/my_app_web/channels/user_socket.ex
similarity index 100%
rename from projects/phoenix/1.5.7/binaryid-database-noecto-nohtml-umbrella/apps/my_app_web/lib/my_app_web/channels/user_socket.ex
rename to projects/phoenix/1.5.7/binaryid-nohtml-nowebpack-nodash/lib/my_app_web/channels/user_socket.ex
diff --git apps/my_app_web/lib/my_app_web/endpoint.ex lib/my_app_web/endpoint.ex
similarity index 76%
rename from projects/phoenix/1.5.7/binaryid-database-noecto-nohtml-umbrella/apps/my_app_web/lib/my_app_web/endpoint.ex
rename to projects/phoenix/1.5.7/binaryid-nohtml-nowebpack-nodash/lib/my_app_web/endpoint.ex
index c5d6e58..8e2fda4 100644
--- apps/my_app_web/lib/my_app_web/endpoint.ex
+++ lib/my_app_web/endpoint.ex
@@ -1,28 +1,26 @@
 defmodule MyAppWeb.Endpoint do
-  use Phoenix.Endpoint, otp_app: :my_app_web
+  use Phoenix.Endpoint, otp_app: :my_app
 
   # The session will be stored in the cookie and signed,
   # this means its contents can be read but not tampered with.
   # Set :encryption_salt if you would also like to encrypt it.
   @session_options [
     store: :cookie,
-    key: "_my_app_web_key",
-    signing_salt: "Jqd4/NFt"
+    key: "_my_app_key",
+    signing_salt: "[redacted]"
   ]
 
   socket "/socket", MyAppWeb.UserSocket,
     websocket: true,
     longpoll: false
 
-  socket "/live", Phoenix.LiveView.Socket, websocket: [connect_info: [session: @session_options]]
-
   # Serve at "/" the static files from "priv/static" directory.
   #
   # You should set gzip to true if you are running phx.digest
   # when deploying your static files in production.
   plug Plug.Static,
     at: "/",
-    from: :my_app_web,
+    from: :my_app,
     gzip: false,
     only: ~w(css fonts images js favicon.ico robots.txt)
 
@@ -30,12 +28,9 @@ defmodule MyAppWeb.Endpoint do
   # :code_reloader configuration of your endpoint.
   if code_reloading? do
     plug Phoenix.CodeReloader
+    plug Phoenix.Ecto.CheckRepoStatus, otp_app: :my_app
   end
 
-  plug Phoenix.LiveDashboard.RequestLogger,
-    param_key: "request_logger",
-    cookie_key: "request_logger"
-
   plug Plug.RequestId
   plug Plug.Telemetry, event_prefix: [:phoenix, :endpoint]
 
diff --git apps/my_app_web/lib/my_app_web/gettext.ex lib/my_app_web/gettext.ex
similarity index 94%
rename from projects/phoenix/1.5.7/binaryid-database-noecto-nohtml-umbrella/apps/my_app_web/lib/my_app_web/gettext.ex
rename to projects/phoenix/1.5.7/binaryid-nohtml-nowebpack-nodash/lib/my_app_web/gettext.ex
index 9c6644d..7919b97 100644
--- apps/my_app_web/lib/my_app_web/gettext.ex
+++ lib/my_app_web/gettext.ex
@@ -20,5 +20,5 @@ defmodule MyAppWeb.Gettext do
 
   See the [Gettext Docs](https://hexdocs.pm/gettext) for detailed usage.
   """
-  use Gettext, otp_app: :my_app_web
+  use Gettext, otp_app: :my_app
 end
diff --git a/projects/phoenix/1.5.7/binaryid-nohtml-nowebpack-nodash/lib/my_app_web/router.ex lib/my_app_web/router.ex
new file mode 100644
index 0000000..5f5f6fc
--- /dev/null
+++ lib/my_app_web/router.ex
@@ -0,0 +1,11 @@
+defmodule MyAppWeb.Router do
+  use MyAppWeb, :router
+
+  pipeline :api do
+    plug :accepts, ["json"]
+  end
+
+  scope "/api", MyAppWeb do
+    pipe_through :api
+  end
+end
diff --git apps/my_app_web/lib/my_app_web/telemetry.ex lib/my_app_web/telemetry.ex
similarity index 77%
rename from projects/phoenix/1.5.7/binaryid-database-noecto-nohtml-umbrella/apps/my_app_web/lib/my_app_web/telemetry.ex
rename to projects/phoenix/1.5.7/binaryid-nohtml-nowebpack-nodash/lib/my_app_web/telemetry.ex
index 9f50f3d..2c9c8ae 100644
--- apps/my_app_web/lib/my_app_web/telemetry.ex
+++ lib/my_app_web/telemetry.ex
@@ -30,6 +30,13 @@ defmodule MyAppWeb.Telemetry do
         unit: {:native, :millisecond}
       ),
 
+      # Database Metrics
+      summary("my_app.repo.query.total_time", unit: {:native, :millisecond}),
+      summary("my_app.repo.query.decode_time", unit: {:native, :millisecond}),
+      summary("my_app.repo.query.query_time", unit: {:native, :millisecond}),
+      summary("my_app.repo.query.queue_time", unit: {:native, :millisecond}),
+      summary("my_app.repo.query.idle_time", unit: {:native, :millisecond}),
+
       # VM Metrics
       summary("vm.memory.total", unit: {:byte, :kilobyte}),
       summary("vm.total_run_queue_lengths.total"),
diff --git apps/my_app_web/lib/my_app_web/views/error_helpers.ex lib/my_app_web/views/error_helpers.ex
similarity index 100%
rename from projects/phoenix/1.5.7/binaryid-database-noecto-nohtml-umbrella/apps/my_app_web/lib/my_app_web/views/error_helpers.ex
rename to projects/phoenix/1.5.7/binaryid-nohtml-nowebpack-nodash/lib/my_app_web/views/error_helpers.ex
diff --git apps/my_app_web/lib/my_app_web/views/error_view.ex lib/my_app_web/views/error_view.ex
similarity index 100%
rename from projects/phoenix/1.5.7/binaryid-database-noecto-nohtml-umbrella/apps/my_app_web/lib/my_app_web/views/error_view.ex
rename to projects/phoenix/1.5.7/binaryid-nohtml-nowebpack-nodash/lib/my_app_web/views/error_view.ex
diff --git apps/my_app_web/lib/my_app_web.ex lib/my_app_web.ex
similarity index 100%
rename from projects/phoenix/1.5.7/binaryid-database-noecto-nohtml-umbrella/apps/my_app_web/lib/my_app_web.ex
rename to projects/phoenix/1.5.7/binaryid-nohtml-nowebpack-nodash/lib/my_app_web.ex
diff --git mix.exs mix.exs
index 099c509..c777926 100644
--- mix.exs
+++ mix.exs
@@ -1,30 +1,48 @@
-defmodule MyApp.Umbrella.MixProject do
+defmodule MyApp.MixProject do
   use Mix.Project
 
   def project do
     [
-      apps_path: "apps",
+      app: :my_app,
       version: "0.1.0",
+      elixir: "~> 1.7",
+      elixirc_paths: elixirc_paths(Mix.env()),
+      compilers: [:phoenix, :gettext] ++ Mix.compilers(),
       start_permanent: Mix.env() == :prod,
-      deps: deps(),
-      aliases: aliases()
+      aliases: aliases(),
+      deps: deps()
     ]
   end
 
-  # Dependencies can be Hex packages:
+  # Configuration for the OTP application.
   #
-  #   {:mydep, "~> 0.3.0"}
-  #
-  # Or git/path repositories:
-  #
-  #   {:mydep, git: "https://github.com/elixir-lang/mydep.git", tag: "0.1.0"}
-  #
-  # Type "mix help deps" for more examples and options.
+  # Type `mix help compile.app` for more information.
+  def application do
+    [
+      mod: {MyApp.Application, []},
+      extra_applications: [:logger, :runtime_tools]
+    ]
+  end
+
+  # Specifies which paths to compile per environment.
+  defp elixirc_paths(:test), do: ["lib", "test/support"]
+  defp elixirc_paths(_), do: ["lib"]
+
+  # Specifies your project dependencies.
   #
-  # Dependencies listed here are available only for this project
-  # and cannot be accessed from applications inside the apps/ folder.
+  # Type `mix help deps` for examples and options.
   defp deps do
-    []
+    [
+      {:phoenix, "~> 1.5.7"},
+      {:phoenix_ecto, "~> 4.1"},
+      {:ecto_sql, "~> 3.4"},
+      {:postgrex, ">= 0.0.0"},
+      {:telemetry_metrics, "~> 0.4"},
+      {:telemetry_poller, "~> 0.4"},
+      {:gettext, "~> 0.11"},
+      {:jason, "~> 1.0"},
+      {:plug_cowboy, "~> 2.0"}
+    ]
   end
 
   # Aliases are shortcuts or tasks specific to the current project.
@@ -33,13 +51,12 @@ defmodule MyApp.Umbrella.MixProject do
   #     $ mix setup
   #
   # See the documentation for `Mix` for more info on aliases.
-  #
-  # Aliases listed here are available only for this project
-  # and cannot be accessed from applications inside the apps/ folder.
   defp aliases do
     [
-      # run `mix setup` in all child apps
-      setup: ["cmd mix setup"]
+      setup: ["deps.get", "ecto.setup"],
+      "ecto.setup": ["ecto.create", "ecto.migrate", "run priv/repo/seeds.exs"],
+      "ecto.reset": ["ecto.drop", "ecto.setup"],
+      test: ["ecto.create --quiet", "ecto.migrate --quiet", "test"]
     ]
   end
 end
diff --git a/projects/phoenix/1.5.7/binaryid-nohtml-nowebpack-nodash/priv/gettext/en/LC_MESSAGES/errors.po priv/gettext/en/LC_MESSAGES/errors.po
new file mode 100644
index 0000000..a589998
--- /dev/null
+++ priv/gettext/en/LC_MESSAGES/errors.po
@@ -0,0 +1,97 @@
+## `msgid`s in this file come from POT (.pot) files.
+##
+## Do not add, change, or remove `msgid`s manually here as
+## they're tied to the ones in the corresponding POT file
+## (with the same domain).
+##
+## Use `mix gettext.extract --merge` or `mix gettext.merge`
+## to merge POT files into PO files.
+msgid ""
+msgstr ""
+"Language: en\n"
+
+## From Ecto.Changeset.cast/4
+msgid "can't be blank"
+msgstr ""
+
+## From Ecto.Changeset.unique_constraint/3
+msgid "has already been taken"
+msgstr ""
+
+## From Ecto.Changeset.put_change/3
+msgid "is invalid"
+msgstr ""
+
+## From Ecto.Changeset.validate_acceptance/3
+msgid "must be accepted"
+msgstr ""
+
+## From Ecto.Changeset.validate_format/3
+msgid "has invalid format"
+msgstr ""
+
+## From Ecto.Changeset.validate_subset/3
+msgid "has an invalid entry"
+msgstr ""
+
+## From Ecto.Changeset.validate_exclusion/3
+msgid "is reserved"
+msgstr ""
+
+## From Ecto.Changeset.validate_confirmation/3
+msgid "does not match confirmation"
+msgstr ""
+
+## From Ecto.Changeset.no_assoc_constraint/3
+msgid "is still associated with this entry"
+msgstr ""
+
+msgid "are still associated with this entry"
+msgstr ""
+
+## From Ecto.Changeset.validate_length/3
+msgid "should be %{count} character(s)"
+msgid_plural "should be %{count} character(s)"
+msgstr[0] ""
+msgstr[1] ""
+
+msgid "should have %{count} item(s)"
+msgid_plural "should have %{count} item(s)"
+msgstr[0] ""
+msgstr[1] ""
+
+msgid "should be at least %{count} character(s)"
+msgid_plural "should be at least %{count} character(s)"
+msgstr[0] ""
+msgstr[1] ""
+
+msgid "should have at least %{count} item(s)"
+msgid_plural "should have at least %{count} item(s)"
+msgstr[0] ""
+msgstr[1] ""
+
+msgid "should be at most %{count} character(s)"
+msgid_plural "should be at most %{count} character(s)"
+msgstr[0] ""
+msgstr[1] ""
+
+msgid "should have at most %{count} item(s)"
+msgid_plural "should have at most %{count} item(s)"
+msgstr[0] ""
+msgstr[1] ""
+
+## From Ecto.Changeset.validate_number/3
+msgid "must be less than %{number}"
+msgstr ""
+
+msgid "must be greater than %{number}"
+msgstr ""
+
+msgid "must be less than or equal to %{number}"
+msgstr ""
+
+msgid "must be greater than or equal to %{number}"
+msgstr ""
+
+msgid "must be equal to %{number}"
+msgstr ""
diff --git a/projects/phoenix/1.5.7/binaryid-nohtml-nowebpack-nodash/priv/gettext/errors.pot priv/gettext/errors.pot
new file mode 100644
index 0000000..39a220b
--- /dev/null
+++ priv/gettext/errors.pot
@@ -0,0 +1,95 @@
+## This is a PO Template file.
+##
+## `msgid`s here are often extracted from source code.
+## Add new translations manually only if they're dynamic
+## translations that can't be statically extracted.
+##
+## Run `mix gettext.extract` to bring this file up to
+## date. Leave `msgstr`s empty as changing them here has no
+## effect: edit them in PO (`.po`) files instead.
+
+## From Ecto.Changeset.cast/4
+msgid "can't be blank"
+msgstr ""
+
+## From Ecto.Changeset.unique_constraint/3
+msgid "has already been taken"
+msgstr ""
+
+## From Ecto.Changeset.put_change/3
+msgid "is invalid"
+msgstr ""
+
+## From Ecto.Changeset.validate_acceptance/3
+msgid "must be accepted"
+msgstr ""
+
+## From Ecto.Changeset.validate_format/3
+msgid "has invalid format"
+msgstr ""
+
+## From Ecto.Changeset.validate_subset/3
+msgid "has an invalid entry"
+msgstr ""
+
+## From Ecto.Changeset.validate_exclusion/3
+msgid "is reserved"
+msgstr ""
+
+## From Ecto.Changeset.validate_confirmation/3
+msgid "does not match confirmation"
+msgstr ""
+
+## From Ecto.Changeset.no_assoc_constraint/3
+msgid "is still associated with this entry"
+msgstr ""
+
+msgid "are still associated with this entry"
+msgstr ""
+
+## From Ecto.Changeset.validate_length/3
+msgid "should be %{count} character(s)"
+msgid_plural "should be %{count} character(s)"
+msgstr[0] ""
+msgstr[1] ""
+
+msgid "should have %{count} item(s)"
+msgid_plural "should have %{count} item(s)"
+msgstr[0] ""
+msgstr[1] ""
+
+msgid "should be at least %{count} character(s)"
+msgid_plural "should be at least %{count} character(s)"
+msgstr[0] ""
+msgstr[1] ""
+
+msgid "should have at least %{count} item(s)"
+msgid_plural "should have at least %{count} item(s)"
+msgstr[0] ""
+msgstr[1] ""
+
+msgid "should be at most %{count} character(s)"
+msgid_plural "should be at most %{count} character(s)"
+msgstr[0] ""
+msgstr[1] ""
+
+msgid "should have at most %{count} item(s)"
+msgid_plural "should have at most %{count} item(s)"
+msgstr[0] ""
+msgstr[1] ""
+
+## From Ecto.Changeset.validate_number/3
+msgid "must be less than %{number}"
+msgstr ""
+
+msgid "must be greater than %{number}"
+msgstr ""
+
+msgid "must be less than or equal to %{number}"
+msgstr ""
+
+msgid "must be greater than or equal to %{number}"
+msgstr ""
+
+msgid "must be equal to %{number}"
+msgstr ""
diff --git a/projects/phoenix/1.5.7/binaryid-nohtml-nowebpack-nodash/priv/repo/migrations/.formatter.exs priv/repo/migrations/.formatter.exs
new file mode 100644
index 0000000..49f9151
--- /dev/null
+++ priv/repo/migrations/.formatter.exs
@@ -0,0 +1,4 @@
+[
+  import_deps: [:ecto_sql],
+  inputs: ["*.exs"]
+]
diff --git a/projects/phoenix/1.5.7/binaryid-nohtml-nowebpack-nodash/priv/repo/seeds.exs priv/repo/seeds.exs
new file mode 100644
index 0000000..e4ba004
--- /dev/null
+++ priv/repo/seeds.exs
@@ -0,0 +1,11 @@
+# Script for populating the database. You can run it as:
+#
+#     mix run priv/repo/seeds.exs
+#
+# Inside the script, you can read and write to any of your
+# repositories directly:
+#
+#     MyApp.Repo.insert!(%MyApp.SomeSchema{})
+#
+# We recommend using the bang functions (`insert!`, `update!`
+# and so on) as they will fail if something goes wrong.
diff --git apps/my_app_web/test/my_app_web/views/error_view_test.exs test/my_app_web/views/error_view_test.exs
similarity index 100%
rename from projects/phoenix/1.5.7/binaryid-database-noecto-nohtml-umbrella/apps/my_app_web/test/my_app_web/views/error_view_test.exs
rename to projects/phoenix/1.5.7/binaryid-nohtml-nowebpack-nodash/test/my_app_web/views/error_view_test.exs
diff --git apps/my_app_web/test/support/channel_case.ex test/support/channel_case.ex
similarity index 83%
rename from projects/phoenix/1.5.7/binaryid-database-noecto-nohtml-umbrella/apps/my_app_web/test/support/channel_case.ex
rename to projects/phoenix/1.5.7/binaryid-nohtml-nowebpack-nodash/test/support/channel_case.ex
index 2a1dfdb..831b300 100644
--- apps/my_app_web/test/support/channel_case.ex
+++ test/support/channel_case.ex
@@ -28,7 +28,13 @@ defmodule MyAppWeb.ChannelCase do
     end
   end
 
-  setup _tags do
+  setup tags do
+    :ok = Ecto.Adapters.SQL.Sandbox.checkout(MyApp.Repo)
+
+    unless tags[:async] do
+      Ecto.Adapters.SQL.Sandbox.mode(MyApp.Repo, {:shared, self()})
+    end
+
     :ok
   end
 end
diff --git apps/my_app_web/test/support/conn_case.ex test/support/conn_case.ex
similarity index 85%
rename from projects/phoenix/1.5.7/binaryid-database-noecto-nohtml-umbrella/apps/my_app_web/test/support/conn_case.ex
rename to projects/phoenix/1.5.7/binaryid-nohtml-nowebpack-nodash/test/support/conn_case.ex
index ae658eb..a1d99dc 100644
--- apps/my_app_web/test/support/conn_case.ex
+++ test/support/conn_case.ex
@@ -31,7 +31,13 @@ defmodule MyAppWeb.ConnCase do
     end
   end
 
-  setup _tags do
+  setup tags do
+    :ok = Ecto.Adapters.SQL.Sandbox.checkout(MyApp.Repo)
+
+    unless tags[:async] do
+      Ecto.Adapters.SQL.Sandbox.mode(MyApp.Repo, {:shared, self()})
+    end
+
     {:ok, conn: Phoenix.ConnTest.build_conn()}
   end
 end
diff --git a/projects/phoenix/1.5.7/binaryid-nohtml-nowebpack-nodash/test/support/data_case.ex test/support/data_case.ex
new file mode 100644
index 0000000..774d271
--- /dev/null
+++ test/support/data_case.ex
@@ -0,0 +1,55 @@
+defmodule MyApp.DataCase do
+  @moduledoc """
+  This module defines the setup for tests requiring
+  access to the application's data layer.
+
+  You may define functions here to be used as helpers in
+  your tests.
+
+  Finally, if the test case interacts with the database,
+  we enable the SQL sandbox, so changes done to the database
+  are reverted at the end of every test. If you are using
+  PostgreSQL, you can even run database tests asynchronously
+  by setting `use MyApp.DataCase, async: true`, although
+  this option is not recommended for other databases.
+  """
+
+  use ExUnit.CaseTemplate
+
+  using do
+    quote do
+      alias MyApp.Repo
+
+      import Ecto
+      import Ecto.Changeset
+      import Ecto.Query
+      import MyApp.DataCase
+    end
+  end
+
+  setup tags do
+    :ok = Ecto.Adapters.SQL.Sandbox.checkout(MyApp.Repo)
+
+    unless tags[:async] do
+      Ecto.Adapters.SQL.Sandbox.mode(MyApp.Repo, {:shared, self()})
+    end
+
+    :ok
+  end
+
+  @doc """
+  A helper that transforms changeset errors into a map of messages.
+
+      assert {:error, changeset} = Accounts.create_user(%{password: "short"})
+      assert "password is too short" in errors_on(changeset).password
+      assert %{password: ["password is too short"]} = errors_on(changeset)
+
+  """
+  def errors_on(changeset) do
+    Ecto.Changeset.traverse_errors(changeset, fn {message, opts} ->
+      Regex.replace(~r"%{(\w+)}", message, fn _, key ->
+        opts |> Keyword.get(String.to_existing_atom(key), key) |> to_string()
+      end)
+    end)
+  end
+end
diff --git a/projects/phoenix/1.5.7/binaryid-nohtml-nowebpack-nodash/test/test_helper.exs test/test_helper.exs
new file mode 100644
index 0000000..0491a89
--- /dev/null
+++ test/test_helper.exs
@@ -0,0 +1,2 @@
+ExUnit.start()
+Ecto.Adapters.SQL.Sandbox.mode(MyApp.Repo, :manual)
