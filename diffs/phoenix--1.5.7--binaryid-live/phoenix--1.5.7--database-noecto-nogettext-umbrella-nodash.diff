diff --git .formatter.exs .formatter.exs
index 8a6391c..6915976 100644
--- .formatter.exs
+++ .formatter.exs
@@ -1,5 +1,4 @@
 [
-  import_deps: [:ecto, :phoenix],
-  inputs: ["*.{ex,exs}", "priv/*/seeds.exs", "{config,lib,test}/**/*.{ex,exs}"],
-  subdirectories: ["priv/*/migrations"]
+  inputs: ["mix.exs", "config/*.exs"],
+  subdirectories: ["apps/*"]
 ]
diff --git .gitignore .gitignore
index 8b3a72e..12179ea 100644
--- .gitignore
+++ .gitignore
@@ -18,17 +18,3 @@ erl_crash.dump
 
 # Also ignore archive artifacts (built via "mix archive.build").
 *.ez
-
-# Ignore package tarball (built via "mix hex.build").
-my_app-*.tar
-
-# If NPM crashes, it generates a log, let's ignore it too.
-npm-debug.log
-
-# The directory NPM downloads your dependencies sources to.
-/assets/node_modules/
-
-# Since we are building assets from assets/,
-# we ignore priv/static. You may want to comment
-# this depending on your deployment strategy.
-/priv/static/
diff --git README.md README.md
index 8e838c3..729adca 100644
--- README.md
+++ README.md
@@ -1,20 +1 @@
-# MyApp
-
-To start your Phoenix server:
-
-  * Install dependencies with `mix deps.get`
-  * Create and migrate your database with `mix ecto.setup`
-  * Install Node.js dependencies with `npm install` inside the `assets` directory
-  * Start Phoenix endpoint with `mix phx.server`
-
-Now you can visit [`localhost:4000`](http://localhost:4000) from your browser.
-
-Ready to run in production? Please [check our deployment guides](https://hexdocs.pm/phoenix/deployment.html).
-
-## Learn more
-
-  * Official website: https://www.phoenixframework.org/
-  * Guides: https://hexdocs.pm/phoenix/overview.html
-  * Docs: https://hexdocs.pm/phoenix
-  * Forum: https://elixirforum.com/c/phoenix-forum
-  * Source: https://github.com/phoenixframework/phoenix
+# MyApp.Umbrella
diff --git a/projects/phoenix/1.5.7/database-noecto-nogettext-umbrella-nodash/apps/my_app/.formatter.exs apps/my_app/.formatter.exs
new file mode 100644
index 0000000..3d8ce11
--- /dev/null
+++ apps/my_app/.formatter.exs
@@ -0,0 +1,3 @@
+[
+  inputs: ["*.{ex,exs}", "{config,lib,test}/**/*.{ex,exs}"]
+]
diff --git a/projects/phoenix/1.5.7/database-noecto-nogettext-umbrella-nodash/apps/my_app/.gitignore apps/my_app/.gitignore
new file mode 100644
index 0000000..992da6d
--- /dev/null
+++ apps/my_app/.gitignore
@@ -0,0 +1,23 @@
+# The directory Mix will write compiled artifacts to.
+/_build/
+
+# If you run "mix test --cover", coverage assets end up here.
+/cover/
+
+# The directory Mix downloads your dependencies sources to.
+/deps/
+
+# Where 3rd-party dependencies like ExDoc output generated docs.
+/doc/
+
+# Ignore .fetch files in case you like to edit your project deps locally.
+/.fetch
+
+# If the VM crashes, it generates a dump, let's ignore it too.
+erl_crash.dump
+
+# Also ignore archive artifacts (built via "mix archive.build").
+*.ez
+
+# Ignore package tarball (built via "mix hex.build").
+my_app-*.tar
diff --git a/projects/phoenix/1.5.7/database-noecto-nogettext-umbrella-nodash/apps/my_app/README.md apps/my_app/README.md
new file mode 100644
index 0000000..4a0521a
--- /dev/null
+++ apps/my_app/README.md
@@ -0,0 +1,3 @@
+# MyApp
+
+**TODO: Add description**
diff --git a/projects/phoenix/1.5.7/database-noecto-nogettext-umbrella-nodash/apps/my_app/lib/my_app/application.ex apps/my_app/lib/my_app/application.ex
new file mode 100644
index 0000000..d968a2f
--- /dev/null
+++ apps/my_app/lib/my_app/application.ex
@@ -0,0 +1,18 @@
+defmodule MyApp.Application do
+  # See https://hexdocs.pm/elixir/Application.html
+  # for more information on OTP Applications
+  @moduledoc false
+
+  use Application
+
+  def start(_type, _args) do
+    children = [
+      # Start the PubSub system
+      {Phoenix.PubSub, name: MyApp.PubSub}
+      # Start a worker by calling: MyApp.Worker.start_link(arg)
+      # {MyApp.Worker, arg}
+    ]
+
+    Supervisor.start_link(children, strategy: :one_for_one, name: MyApp.Supervisor)
+  end
+end
diff --git lib/my_app.ex apps/my_app/lib/my_app.ex
similarity index 100%
rename from projects/phoenix/1.5.7/binaryid-live/lib/my_app.ex
rename to projects/phoenix/1.5.7/database-noecto-nogettext-umbrella-nodash/apps/my_app/lib/my_app.ex
diff --git a/projects/phoenix/1.5.7/database-noecto-nogettext-umbrella-nodash/apps/my_app/mix.exs apps/my_app/mix.exs
new file mode 100644
index 0000000..07cf694
--- /dev/null
+++ apps/my_app/mix.exs
@@ -0,0 +1,51 @@
+defmodule MyApp.MixProject do
+  use Mix.Project
+
+  def project do
+    [
+      app: :my_app,
+      version: "0.1.0",
+      build_path: "../../_build",
+      config_path: "../../config/config.exs",
+      deps_path: "../../deps",
+      lockfile: "../../mix.lock",
+      elixir: "~> 1.7",
+      elixirc_paths: elixirc_paths(Mix.env()),
+      start_permanent: Mix.env() == :prod,
+      aliases: aliases(),
+      deps: deps()
+    ]
+  end
+
+  # Configuration for the OTP application.
+  #
+  # Type `mix help compile.app` for more information.
+  def application do
+    [
+      mod: {MyApp.Application, []},
+      extra_applications: [:logger, :runtime_tools]
+    ]
+  end
+
+  # Specifies which paths to compile per environment.
+  defp elixirc_paths(:test), do: ["lib", "test/support"]
+  defp elixirc_paths(_), do: ["lib"]
+
+  # Specifies your project dependencies.
+  #
+  # Type `mix help deps` for examples and options.
+  defp deps do
+    [
+      {:phoenix_pubsub, "~> 2.0"}
+    ]
+  end
+
+  # Aliases are shortcuts or tasks specific to the current project.
+  #
+  # See the documentation for `Mix` for more info on aliases.
+  defp aliases do
+    [
+      setup: ["deps.get"]
+    ]
+  end
+end
diff --git a/projects/phoenix/1.5.7/database-noecto-nogettext-umbrella-nodash/apps/my_app/test/test_helper.exs apps/my_app/test/test_helper.exs
new file mode 100644
index 0000000..869559e
--- /dev/null
+++ apps/my_app/test/test_helper.exs
@@ -0,0 +1 @@
+ExUnit.start()
diff --git a/projects/phoenix/1.5.7/database-noecto-nogettext-umbrella-nodash/apps/my_app_web/.formatter.exs apps/my_app_web/.formatter.exs
new file mode 100644
index 0000000..4761678
--- /dev/null
+++ apps/my_app_web/.formatter.exs
@@ -0,0 +1,4 @@
+[
+  import_deps: [:phoenix],
+  inputs: ["*.{ex,exs}", "{config,lib,test}/**/*.{ex,exs}"]
+]
diff --git a/projects/phoenix/1.5.7/database-noecto-nogettext-umbrella-nodash/apps/my_app_web/.gitignore apps/my_app_web/.gitignore
new file mode 100644
index 0000000..5f1d967
--- /dev/null
+++ apps/my_app_web/.gitignore
@@ -0,0 +1,34 @@
+# The directory Mix will write compiled artifacts to.
+/_build/
+
+# If you run "mix test --cover", coverage assets end up here.
+/cover/
+
+# The directory Mix downloads your dependencies sources to.
+/deps/
+
+# Where 3rd-party dependencies like ExDoc output generated docs.
+/doc/
+
+# Ignore .fetch files in case you like to edit your project deps locally.
+/.fetch
+
+# If the VM crashes, it generates a dump, let's ignore it too.
+erl_crash.dump
+
+# Also ignore archive artifacts (built via "mix archive.build").
+*.ez
+
+# Ignore package tarball (built via "mix hex.build").
+my_app_web-*.tar
+
+# If NPM crashes, it generates a log, let's ignore it too.
+npm-debug.log
+
+# The directory NPM downloads your dependencies sources to.
+/assets/node_modules/
+
+# Since we are building assets from assets/,
+# we ignore priv/static. You may want to comment
+# this depending on your deployment strategy.
+/priv/static/
diff --git a/projects/phoenix/1.5.7/database-noecto-nogettext-umbrella-nodash/apps/my_app_web/README.md apps/my_app_web/README.md
new file mode 100644
index 0000000..6d4b014
--- /dev/null
+++ apps/my_app_web/README.md
@@ -0,0 +1,19 @@
+# MyAppWeb
+
+To start your Phoenix server:
+
+  * Install dependencies with `mix deps.get`
+  * Install Node.js dependencies with `npm install` inside the `assets` directory
+  * Start Phoenix endpoint with `mix phx.server`
+
+Now you can visit [`localhost:4000`](http://localhost:4000) from your browser.
+
+Ready to run in production? Please [check our deployment guides](https://hexdocs.pm/phoenix/deployment.html).
+
+## Learn more
+
+  * Official website: https://www.phoenixframework.org/
+  * Guides: https://hexdocs.pm/phoenix/overview.html
+  * Docs: https://hexdocs.pm/phoenix
+  * Forum: https://elixirforum.com/c/phoenix-forum
+  * Source: https://github.com/phoenixframework/phoenix
diff --git assets/.babelrc apps/my_app_web/assets/.babelrc
similarity index 100%
rename from projects/phoenix/1.5.7/binaryid-live/assets/.babelrc
rename to projects/phoenix/1.5.7/database-noecto-nogettext-umbrella-nodash/apps/my_app_web/assets/.babelrc
diff --git a/projects/phoenix/1.5.7/database-noecto-nogettext-umbrella-nodash/apps/my_app_web/assets/css/app.scss apps/my_app_web/assets/css/app.scss
new file mode 100644
index 0000000..5c2c9b5
--- /dev/null
+++ apps/my_app_web/assets/css/app.scss
@@ -0,0 +1,36 @@
+/* This file is for your main application css. */
+@import "./phoenix.css";
+
+/* Alerts and form errors */
+.alert {
+  padding: 15px;
+  margin-bottom: 20px;
+  border: 1px solid transparent;
+  border-radius: 4px;
+}
+.alert-info {
+  color: #31708f;
+  background-color: #d9edf7;
+  border-color: #bce8f1;
+}
+.alert-warning {
+  color: #8a6d3b;
+  background-color: #fcf8e3;
+  border-color: #faebcc;
+}
+.alert-danger {
+  color: #a94442;
+  background-color: #f2dede;
+  border-color: #ebccd1;
+}
+.alert p {
+  margin-bottom: 0;
+}
+.alert:empty {
+  display: none;
+}
+.invalid-feedback {
+  color: #a94442;
+  display: block;
+  margin: -1rem 0 2rem;
+}
diff --git assets/css/phoenix.css apps/my_app_web/assets/css/phoenix.css
similarity index 100%
rename from projects/phoenix/1.5.7/binaryid-live/assets/css/phoenix.css
rename to projects/phoenix/1.5.7/database-noecto-nogettext-umbrella-nodash/apps/my_app_web/assets/css/phoenix.css
diff --git a/projects/phoenix/1.5.7/database-noecto-nogettext-umbrella-nodash/apps/my_app_web/assets/js/app.js apps/my_app_web/assets/js/app.js
new file mode 100644
index 0000000..af00596
--- /dev/null
+++ apps/my_app_web/assets/js/app.js
@@ -0,0 +1,15 @@
+// We need to import the CSS so that webpack will load it.
+// The MiniCssExtractPlugin is used to separate it out into
+// its own CSS file.
+import "../css/app.scss"
+
+// webpack automatically bundles all modules in your
+// entry points. Those entry points can be configured
+// in "webpack.config.js".
+//
+// Import deps with the dep name or local files with a relative path, for example:
+//
+//     import {Socket} from "phoenix"
+//     import socket from "./socket"
+//
+import "phoenix_html"
diff --git a/projects/phoenix/1.5.7/database-noecto-nogettext-umbrella-nodash/apps/my_app_web/assets/js/socket.js apps/my_app_web/assets/js/socket.js
new file mode 100644
index 0000000..09929ab
--- /dev/null
+++ apps/my_app_web/assets/js/socket.js
@@ -0,0 +1,63 @@
+// NOTE: The contents of this file will only be executed if
+// you uncomment its entry in "assets/js/app.js".
+
+// To use Phoenix channels, the first step is to import Socket,
+// and connect at the socket path in "lib/web/endpoint.ex".
+//
+// Pass the token on params as below. Or remove it
+// from the params if you are not using authentication.
+import {Socket} from "phoenix"
+
+let socket = new Socket("/socket", {params: {token: window.userToken}})
+
+// When you connect, you'll often need to authenticate the client.
+// For example, imagine you have an authentication plug, `MyAuth`,
+// which authenticates the session and assigns a `:current_user`.
+// If the current user exists you can assign the user's token in
+// the connection for use in the layout.
+//
+// In your "lib/web/router.ex":
+//
+//     pipeline :browser do
+//       ...
+//       plug MyAuth
+//       plug :put_user_token
+//     end
+//
+//     defp put_user_token(conn, _) do
+//       if current_user = conn.assigns[:current_user] do
+//         token = Phoenix.Token.sign(conn, "user socket", current_user.id)
+//         assign(conn, :user_token, token)
+//       else
+//         conn
+//       end
+//     end
+//
+// Now you need to pass this token to JavaScript. You can do so
+// inside a script tag in "lib/web/templates/layout/app.html.eex":
+//
+//     <script>window.userToken = "<%= assigns[:user_token] %>";</script>
+//
+// You will need to verify the user token in the "connect/3" function
+// in "lib/web/channels/user_socket.ex":
+//
+//     def connect(%{"token" => token}, socket, _connect_info) do
+//       # max_age: 1209600 is equivalent to two weeks in seconds
+//       case Phoenix.Token.verify(socket, "user socket", token, max_age: 1209600) do
+//         {:ok, user_id} ->
+//           {:ok, assign(socket, :user, user_id)}
+//         {:error, reason} ->
+//           :error
+//       end
+//     end
+//
+// Finally, connect to the socket:
+socket.connect()
+
+// Now that you are connected, you can join channels with a topic:
+let channel = socket.channel("topic:subtopic", {})
+channel.join()
+  .receive("ok", resp => { console.log("Joined successfully", resp) })
+  .receive("error", resp => { console.log("Unable to join", resp) })
+
+export default socket
diff --git assets/package.json apps/my_app_web/assets/package.json
similarity index 79%
rename from projects/phoenix/1.5.7/binaryid-live/assets/package.json
rename to projects/phoenix/1.5.7/database-noecto-nogettext-umbrella-nodash/apps/my_app_web/assets/package.json
index aa41dee..de0e306 100644
--- assets/package.json
+++ apps/my_app_web/assets/package.json
@@ -7,10 +7,8 @@
     "watch": "webpack --mode development --watch"
   },
   "dependencies": {
-    "phoenix": "file:../deps/phoenix",
-    "phoenix_html": "file:../deps/phoenix_html",
-    "phoenix_live_view": "file:../deps/phoenix_live_view",
-    "nprogress": "^0.2.0"
+    "phoenix": "file:../../../deps/phoenix",
+    "phoenix_html": "file:../../../deps/phoenix_html"
   },
   "devDependencies": {
     "@babel/core": "^7.0.0",
diff --git assets/static/favicon.ico apps/my_app_web/assets/static/favicon.ico
similarity index 100%
rename from projects/phoenix/1.5.7/binaryid-live/assets/static/favicon.ico
rename to projects/phoenix/1.5.7/database-noecto-nogettext-umbrella-nodash/apps/my_app_web/assets/static/favicon.ico
diff --git assets/static/images/phoenix.png apps/my_app_web/assets/static/images/phoenix.png
similarity index 100%
rename from projects/phoenix/1.5.7/binaryid-live/assets/static/images/phoenix.png
rename to projects/phoenix/1.5.7/database-noecto-nogettext-umbrella-nodash/apps/my_app_web/assets/static/images/phoenix.png
diff --git assets/static/robots.txt apps/my_app_web/assets/static/robots.txt
similarity index 100%
rename from projects/phoenix/1.5.7/binaryid-live/assets/static/robots.txt
rename to projects/phoenix/1.5.7/database-noecto-nogettext-umbrella-nodash/apps/my_app_web/assets/static/robots.txt
diff --git assets/webpack.config.js apps/my_app_web/assets/webpack.config.js
similarity index 100%
rename from projects/phoenix/1.5.7/binaryid-live/assets/webpack.config.js
rename to projects/phoenix/1.5.7/database-noecto-nogettext-umbrella-nodash/apps/my_app_web/assets/webpack.config.js
diff --git lib/my_app/application.ex apps/my_app_web/lib/my_app_web/application.ex
similarity index 68%
rename from projects/phoenix/1.5.7/binaryid-live/lib/my_app/application.ex
rename to projects/phoenix/1.5.7/database-noecto-nogettext-umbrella-nodash/apps/my_app_web/lib/my_app_web/application.ex
index fd03945..fbdce53 100644
--- lib/my_app/application.ex
+++ apps/my_app_web/lib/my_app_web/application.ex
@@ -1,4 +1,4 @@
-defmodule MyApp.Application do
+defmodule MyAppWeb.Application do
   # See https://hexdocs.pm/elixir/Application.html
   # for more information on OTP Applications
   @moduledoc false
@@ -7,21 +7,17 @@ defmodule MyApp.Application do
 
   def start(_type, _args) do
     children = [
-      # Start the Ecto repository
-      MyApp.Repo,
       # Start the Telemetry supervisor
       MyAppWeb.Telemetry,
-      # Start the PubSub system
-      {Phoenix.PubSub, name: MyApp.PubSub},
       # Start the Endpoint (http/https)
       MyAppWeb.Endpoint
-      # Start a worker by calling: MyApp.Worker.start_link(arg)
-      # {MyApp.Worker, arg}
+      # Start a worker by calling: MyAppWeb.Worker.start_link(arg)
+      # {MyAppWeb.Worker, arg}
     ]
 
     # See https://hexdocs.pm/elixir/Supervisor.html
     # for other strategies and supported options
-    opts = [strategy: :one_for_one, name: MyApp.Supervisor]
+    opts = [strategy: :one_for_one, name: MyAppWeb.Supervisor]
     Supervisor.start_link(children, opts)
   end
 
diff --git lib/my_app_web/channels/user_socket.ex apps/my_app_web/lib/my_app_web/channels/user_socket.ex
similarity index 100%
rename from projects/phoenix/1.5.7/binaryid-live/lib/my_app_web/channels/user_socket.ex
rename to projects/phoenix/1.5.7/database-noecto-nogettext-umbrella-nodash/apps/my_app_web/lib/my_app_web/channels/user_socket.ex
diff --git a/projects/phoenix/1.5.7/database-noecto-nogettext-umbrella-nodash/apps/my_app_web/lib/my_app_web/controllers/page_controller.ex apps/my_app_web/lib/my_app_web/controllers/page_controller.ex
new file mode 100644
index 0000000..9628848
--- /dev/null
+++ apps/my_app_web/lib/my_app_web/controllers/page_controller.ex
@@ -0,0 +1,7 @@
+defmodule MyAppWeb.PageController do
+  use MyAppWeb, :controller
+
+  def index(conn, _params) do
+    render(conn, "index.html")
+  end
+end
diff --git lib/my_app_web/endpoint.ex apps/my_app_web/lib/my_app_web/endpoint.ex
similarity index 76%
rename from projects/phoenix/1.5.7/binaryid-live/lib/my_app_web/endpoint.ex
rename to projects/phoenix/1.5.7/database-noecto-nogettext-umbrella-nodash/apps/my_app_web/lib/my_app_web/endpoint.ex
index 8a9c912..7c61357 100644
--- lib/my_app_web/endpoint.ex
+++ apps/my_app_web/lib/my_app_web/endpoint.ex
@@ -1,28 +1,26 @@
 defmodule MyAppWeb.Endpoint do
-  use Phoenix.Endpoint, otp_app: :my_app
+  use Phoenix.Endpoint, otp_app: :my_app_web
 
   # The session will be stored in the cookie and signed,
   # this means its contents can be read but not tampered with.
   # Set :encryption_salt if you would also like to encrypt it.
   @session_options [
     store: :cookie,
-    key: "_my_app_key",
-    signing_salt: "[redacted]"
+    key: "_my_app_web_key",
+    signing_salt: "nllKgq+b"
   ]
 
   socket "/socket", MyAppWeb.UserSocket,
     websocket: true,
     longpoll: false
 
-  socket "/live", Phoenix.LiveView.Socket, websocket: [connect_info: [session: @session_options]]
-
   # Serve at "/" the static files from "priv/static" directory.
   #
   # You should set gzip to true if you are running phx.digest
   # when deploying your static files in production.
   plug Plug.Static,
     at: "/",
-    from: :my_app,
+    from: :my_app_web,
     gzip: false,
     only: ~w(css fonts images js favicon.ico robots.txt)
 
@@ -32,13 +30,8 @@ defmodule MyAppWeb.Endpoint do
     socket "/phoenix/live_reload/socket", Phoenix.LiveReloader.Socket
     plug Phoenix.LiveReloader
     plug Phoenix.CodeReloader
-    plug Phoenix.Ecto.CheckRepoStatus, otp_app: :my_app
   end
 
-  plug Phoenix.LiveDashboard.RequestLogger,
-    param_key: "request_logger",
-    cookie_key: "request_logger"
-
   plug Plug.RequestId
   plug Plug.Telemetry, event_prefix: [:phoenix, :endpoint]
 
diff --git a/projects/phoenix/1.5.7/database-noecto-nogettext-umbrella-nodash/apps/my_app_web/lib/my_app_web/router.ex apps/my_app_web/lib/my_app_web/router.ex
new file mode 100644
index 0000000..8309276
--- /dev/null
+++ apps/my_app_web/lib/my_app_web/router.ex
@@ -0,0 +1,26 @@
+defmodule MyAppWeb.Router do
+  use MyAppWeb, :router
+
+  pipeline :browser do
+    plug :accepts, ["html"]
+    plug :fetch_session
+    plug :fetch_flash
+    plug :protect_from_forgery
+    plug :put_secure_browser_headers
+  end
+
+  pipeline :api do
+    plug :accepts, ["json"]
+  end
+
+  scope "/", MyAppWeb do
+    pipe_through :browser
+
+    get "/", PageController, :index
+  end
+
+  # Other scopes may use custom stacks.
+  # scope "/api", MyAppWeb do
+  #   pipe_through :api
+  # end
+end
diff --git lib/my_app_web/telemetry.ex apps/my_app_web/lib/my_app_web/telemetry.ex
similarity index 77%
rename from projects/phoenix/1.5.7/binaryid-live/lib/my_app_web/telemetry.ex
rename to projects/phoenix/1.5.7/database-noecto-nogettext-umbrella-nodash/apps/my_app_web/lib/my_app_web/telemetry.ex
index 2c9c8ae..9f50f3d 100644
--- lib/my_app_web/telemetry.ex
+++ apps/my_app_web/lib/my_app_web/telemetry.ex
@@ -30,13 +30,6 @@ defmodule MyAppWeb.Telemetry do
         unit: {:native, :millisecond}
       ),
 
-      # Database Metrics
-      summary("my_app.repo.query.total_time", unit: {:native, :millisecond}),
-      summary("my_app.repo.query.decode_time", unit: {:native, :millisecond}),
-      summary("my_app.repo.query.query_time", unit: {:native, :millisecond}),
-      summary("my_app.repo.query.queue_time", unit: {:native, :millisecond}),
-      summary("my_app.repo.query.idle_time", unit: {:native, :millisecond}),
-
       # VM Metrics
       summary("vm.memory.total", unit: {:byte, :kilobyte}),
       summary("vm.total_run_queue_lengths.total"),
diff --git lib/my_app_web/templates/layout/root.html.leex apps/my_app_web/lib/my_app_web/templates/layout/app.html.eex
similarity index 54%
rename from projects/phoenix/1.5.7/binaryid-live/lib/my_app_web/templates/layout/root.html.leex
rename to projects/phoenix/1.5.7/database-noecto-nogettext-umbrella-nodash/apps/my_app_web/lib/my_app_web/templates/layout/app.html.eex
index 630a552..981504d 100644
--- lib/my_app_web/templates/layout/root.html.leex
+++ apps/my_app_web/lib/my_app_web/templates/layout/app.html.eex
@@ -4,10 +4,9 @@
     <meta charset="utf-8"/>
     <meta http-equiv="X-UA-Compatible" content="IE=edge"/>
     <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
-    <%= csrf_meta_tag() %>
-    <%= live_title_tag assigns[:page_title] || "MyApp", suffix: " · Phoenix Framework" %>
-    <link phx-track-static rel="stylesheet" href="<%= Routes.static_path(@conn, "/css/app.css") %>"/>
-    <script defer phx-track-static type="text/javascript" src="<%= Routes.static_path(@conn, "/js/app.js") %>"></script>
+    <title>MyApp · Phoenix Framework</title>
+    <link rel="stylesheet" href="<%= Routes.static_path(@conn, "/css/app.css") %>"/>
+    <script defer type="text/javascript" src="<%= Routes.static_path(@conn, "/js/app.js") %>"></script>
   </head>
   <body>
     <header>
@@ -15,9 +14,7 @@
         <nav role="navigation">
           <ul>
             <li><a href="https://hexdocs.pm/phoenix/overview.html">Get Started</a></li>
-            <%= if function_exported?(Routes, :live_dashboard_path, 2) do %>
-              <li><%= link "LiveDashboard", to: Routes.live_dashboard_path(@conn, :home) %></li>
-            <% end %>
+            
           </ul>
         </nav>
         <a href="https://phoenixframework.org/" class="phx-logo">
@@ -25,6 +22,10 @@
         </a>
       </section>
     </header>
-    <%= @inner_content %>
+    <main role="main" class="container">
+      <p class="alert alert-info" role="alert"><%= get_flash(@conn, :info) %></p>
+      <p class="alert alert-danger" role="alert"><%= get_flash(@conn, :error) %></p>
+      <%= @inner_content %>
+    </main>
   </body>
 </html>
diff --git lib/my_app_web/live/page_live.html.leex apps/my_app_web/lib/my_app_web/templates/page/index.html.eex
similarity index 67%
rename from projects/phoenix/1.5.7/binaryid-live/lib/my_app_web/live/page_live.html.leex
rename to projects/phoenix/1.5.7/database-noecto-nogettext-umbrella-nodash/apps/my_app_web/lib/my_app_web/templates/page/index.html.eex
index 52509c2..479197d 100644
--- lib/my_app_web/live/page_live.html.leex
+++ apps/my_app_web/lib/my_app_web/templates/page/index.html.eex
@@ -1,16 +1,6 @@
 <section class="phx-hero">
-  <h1><%= gettext "Welcome to %{name}!", name: "Phoenix" %></h1>
+  <h1>Welcome to Phoenix!</h1>
   <p>Peace of mind from prototype to production</p>
-
-  <form phx-change="suggest" phx-submit="search">
-    <input type="text" name="q" value="<%= @query %>" placeholder="Live dependency search" list="results" autocomplete="off"/>
-    <datalist id="results">
-      <%= for {app, _vsn} <- @results do %>
-        <option value="<%= app %>"><%= app %></option>
-      <% end %>
-    </datalist>
-    <button type="submit" phx-disable-with="Searching...">Go to Hexdocs</button>
-  </form>
 </section>
 
 <section class="row">
diff --git a/projects/phoenix/1.5.7/database-noecto-nogettext-umbrella-nodash/apps/my_app_web/lib/my_app_web/views/error_helpers.ex apps/my_app_web/lib/my_app_web/views/error_helpers.ex
new file mode 100644
index 0000000..a250bf2
--- /dev/null
+++ apps/my_app_web/lib/my_app_web/views/error_helpers.ex
@@ -0,0 +1,30 @@
+defmodule MyAppWeb.ErrorHelpers do
+  @moduledoc """
+  Conveniences for translating and building error messages.
+  """
+
+  use Phoenix.HTML
+
+  @doc """
+  Generates tag for inlined form input errors.
+  """
+  def error_tag(form, field) do
+    Enum.map(Keyword.get_values(form.errors, field), fn error ->
+      content_tag(:span, translate_error(error),
+        class: "invalid-feedback",
+        phx_feedback_for: input_id(form, field)
+      )
+    end)
+  end
+
+  @doc """
+  Translates an error message.
+  """
+  def translate_error({msg, opts}) do
+    # Because the error messages we show in our forms and APIs
+    # are defined inside Ecto, we need to translate them dynamically.
+    Enum.reduce(opts, msg, fn {key, value}, acc ->
+      String.replace(acc, "%{#{key}}", to_string(value))
+    end)
+  end
+end
diff --git lib/my_app_web/views/error_view.ex apps/my_app_web/lib/my_app_web/views/error_view.ex
similarity index 100%
rename from projects/phoenix/1.5.7/binaryid-live/lib/my_app_web/views/error_view.ex
rename to projects/phoenix/1.5.7/database-noecto-nogettext-umbrella-nodash/apps/my_app_web/lib/my_app_web/views/error_view.ex
diff --git lib/my_app_web/views/layout_view.ex apps/my_app_web/lib/my_app_web/views/layout_view.ex
similarity index 100%
rename from projects/phoenix/1.5.7/binaryid-live/lib/my_app_web/views/layout_view.ex
rename to projects/phoenix/1.5.7/database-noecto-nogettext-umbrella-nodash/apps/my_app_web/lib/my_app_web/views/layout_view.ex
diff --git a/projects/phoenix/1.5.7/database-noecto-nogettext-umbrella-nodash/apps/my_app_web/lib/my_app_web/views/page_view.ex apps/my_app_web/lib/my_app_web/views/page_view.ex
new file mode 100644
index 0000000..3385fda
--- /dev/null
+++ apps/my_app_web/lib/my_app_web/views/page_view.ex
@@ -0,0 +1,3 @@
+defmodule MyAppWeb.PageView do
+  use MyAppWeb, :view
+end
diff --git lib/my_app_web.ex apps/my_app_web/lib/my_app_web.ex
similarity index 77%
rename from projects/phoenix/1.5.7/binaryid-live/lib/my_app_web.ex
rename to projects/phoenix/1.5.7/database-noecto-nogettext-umbrella-nodash/apps/my_app_web/lib/my_app_web.ex
index 222c4f0..7a894e8 100644
--- lib/my_app_web.ex
+++ apps/my_app_web/lib/my_app_web.ex
@@ -22,7 +22,6 @@ defmodule MyAppWeb do
       use Phoenix.Controller, namespace: MyAppWeb
 
       import Plug.Conn
-      import MyAppWeb.Gettext
       alias MyAppWeb.Router.Helpers, as: Routes
     end
   end
@@ -42,37 +41,18 @@ defmodule MyAppWeb do
     end
   end
 
-  def live_view do
-    quote do
-      use Phoenix.LiveView,
-        layout: {MyAppWeb.LayoutView, "live.html"}
-
-      unquote(view_helpers())
-    end
-  end
-
-  def live_component do
-    quote do
-      use Phoenix.LiveComponent
-
-      unquote(view_helpers())
-    end
-  end
-
   def router do
     quote do
       use Phoenix.Router
 
       import Plug.Conn
       import Phoenix.Controller
-      import Phoenix.LiveView.Router
     end
   end
 
   def channel do
     quote do
       use Phoenix.Channel
-      import MyAppWeb.Gettext
     end
   end
 
@@ -81,14 +61,10 @@ defmodule MyAppWeb do
       # Use all HTML functionality (forms, tags, etc)
       use Phoenix.HTML
 
-      # Import LiveView helpers (live_render, live_component, live_patch, etc)
-      import Phoenix.LiveView.Helpers
-
       # Import basic rendering functionality (render, render_layout, etc)
       import Phoenix.View
 
       import MyAppWeb.ErrorHelpers
-      import MyAppWeb.Gettext
       alias MyAppWeb.Router.Helpers, as: Routes
     end
   end
diff --git a/projects/phoenix/1.5.7/database-noecto-nogettext-umbrella-nodash/apps/my_app_web/mix.exs apps/my_app_web/mix.exs
new file mode 100644
index 0000000..4e4ef12
--- /dev/null
+++ apps/my_app_web/mix.exs
@@ -0,0 +1,59 @@
+defmodule MyAppWeb.MixProject do
+  use Mix.Project
+
+  def project do
+    [
+      app: :my_app_web,
+      version: "0.1.0",
+      build_path: "../../_build",
+      config_path: "../../config/config.exs",
+      deps_path: "../../deps",
+      lockfile: "../../mix.lock",
+      elixir: "~> 1.7",
+      elixirc_paths: elixirc_paths(Mix.env()),
+      compilers: [:phoenix] ++ Mix.compilers(),
+      start_permanent: Mix.env() == :prod,
+      aliases: aliases(),
+      deps: deps()
+    ]
+  end
+
+  # Configuration for the OTP application.
+  #
+  # Type `mix help compile.app` for more information.
+  def application do
+    [
+      mod: {MyAppWeb.Application, []},
+      extra_applications: [:logger, :runtime_tools]
+    ]
+  end
+
+  # Specifies which paths to compile per environment.
+  defp elixirc_paths(:test), do: ["lib", "test/support"]
+  defp elixirc_paths(_), do: ["lib"]
+
+  # Specifies your project dependencies.
+  #
+  # Type `mix help deps` for examples and options.
+  defp deps do
+    [
+      {:phoenix, "~> 1.5.7"},
+      {:phoenix_html, "~> 2.11"},
+      {:phoenix_live_reload, "~> 1.2", only: :dev},
+      {:telemetry_metrics, "~> 0.4"},
+      {:telemetry_poller, "~> 0.4"},
+      {:my_app, in_umbrella: true},
+      {:jason, "~> 1.0"},
+      {:plug_cowboy, "~> 2.0"}
+    ]
+  end
+
+  # Aliases are shortcuts or tasks specific to the current project.
+  #
+  # See the documentation for `Mix` for more info on aliases.
+  defp aliases do
+    [
+      setup: ["deps.get", "cmd npm install --prefix assets"]
+    ]
+  end
+end
diff --git a/projects/phoenix/1.5.7/database-noecto-nogettext-umbrella-nodash/apps/my_app_web/test/my_app_web/controllers/page_controller_test.exs apps/my_app_web/test/my_app_web/controllers/page_controller_test.exs
new file mode 100644
index 0000000..5c16b7f
--- /dev/null
+++ apps/my_app_web/test/my_app_web/controllers/page_controller_test.exs
@@ -0,0 +1,8 @@
+defmodule MyAppWeb.PageControllerTest do
+  use MyAppWeb.ConnCase
+
+  test "GET /", %{conn: conn} do
+    conn = get(conn, "/")
+    assert html_response(conn, 200) =~ "Welcome to Phoenix!"
+  end
+end
diff --git test/my_app_web/views/error_view_test.exs apps/my_app_web/test/my_app_web/views/error_view_test.exs
similarity index 100%
rename from projects/phoenix/1.5.7/binaryid-live/test/my_app_web/views/error_view_test.exs
rename to projects/phoenix/1.5.7/database-noecto-nogettext-umbrella-nodash/apps/my_app_web/test/my_app_web/views/error_view_test.exs
diff --git test/my_app_web/views/layout_view_test.exs apps/my_app_web/test/my_app_web/views/layout_view_test.exs
similarity index 100%
rename from projects/phoenix/1.5.7/binaryid-live/test/my_app_web/views/layout_view_test.exs
rename to projects/phoenix/1.5.7/database-noecto-nogettext-umbrella-nodash/apps/my_app_web/test/my_app_web/views/layout_view_test.exs
diff --git a/projects/phoenix/1.5.7/database-noecto-nogettext-umbrella-nodash/apps/my_app_web/test/my_app_web/views/page_view_test.exs apps/my_app_web/test/my_app_web/views/page_view_test.exs
new file mode 100644
index 0000000..82612dc
--- /dev/null
+++ apps/my_app_web/test/my_app_web/views/page_view_test.exs
@@ -0,0 +1,3 @@
+defmodule MyAppWeb.PageViewTest do
+  use MyAppWeb.ConnCase, async: true
+end
diff --git test/support/channel_case.ex apps/my_app_web/test/support/channel_case.ex
similarity index 83%
rename from projects/phoenix/1.5.7/binaryid-live/test/support/channel_case.ex
rename to projects/phoenix/1.5.7/database-noecto-nogettext-umbrella-nodash/apps/my_app_web/test/support/channel_case.ex
index 831b300..2a1dfdb 100644
--- test/support/channel_case.ex
+++ apps/my_app_web/test/support/channel_case.ex
@@ -28,13 +28,7 @@ defmodule MyAppWeb.ChannelCase do
     end
   end
 
-  setup tags do
-    :ok = Ecto.Adapters.SQL.Sandbox.checkout(MyApp.Repo)
-
-    unless tags[:async] do
-      Ecto.Adapters.SQL.Sandbox.mode(MyApp.Repo, {:shared, self()})
-    end
-
+  setup _tags do
     :ok
   end
 end
diff --git test/support/conn_case.ex apps/my_app_web/test/support/conn_case.ex
similarity index 85%
rename from projects/phoenix/1.5.7/binaryid-live/test/support/conn_case.ex
rename to projects/phoenix/1.5.7/database-noecto-nogettext-umbrella-nodash/apps/my_app_web/test/support/conn_case.ex
index a1d99dc..ae658eb 100644
--- test/support/conn_case.ex
+++ apps/my_app_web/test/support/conn_case.ex
@@ -31,13 +31,7 @@ defmodule MyAppWeb.ConnCase do
     end
   end
 
-  setup tags do
-    :ok = Ecto.Adapters.SQL.Sandbox.checkout(MyApp.Repo)
-
-    unless tags[:async] do
-      Ecto.Adapters.SQL.Sandbox.mode(MyApp.Repo, {:shared, self()})
-    end
-
+  setup _tags do
     {:ok, conn: Phoenix.ConnTest.build_conn()}
   end
 end
diff --git a/projects/phoenix/1.5.7/database-noecto-nogettext-umbrella-nodash/apps/my_app_web/test/test_helper.exs apps/my_app_web/test/test_helper.exs
new file mode 100644
index 0000000..869559e
--- /dev/null
+++ apps/my_app_web/test/test_helper.exs
@@ -0,0 +1 @@
+ExUnit.start()
diff --git assets/css/app.scss b/projects/phoenix/1.5.7/binaryid-live/assets/css/app.scss
deleted file mode 100644
index f7775db..0000000
--- assets/css/app.scss
+++ /dev/null
@@ -1,91 +0,0 @@
-/* This file is for your main application css. */
-@import "./phoenix.css";
-@import "../node_modules/nprogress/nprogress.css";
-
-/* LiveView specific classes for your customizations */
-.phx-no-feedback.invalid-feedback,
-.phx-no-feedback .invalid-feedback {
-  display: none;
-}
-
-.phx-click-loading {
-  opacity: 0.5;
-  transition: opacity 1s ease-out;
-}
-
-.phx-disconnected{
-  cursor: wait;
-}
-.phx-disconnected *{
-  pointer-events: none;
-}
-
-.phx-modal {
-  opacity: 1!important;
-  position: fixed;
-  z-index: 1;
-  left: 0;
-  top: 0;
-  width: 100%;
-  height: 100%;
-  overflow: auto;
-  background-color: rgb(0,0,0);
-  background-color: rgba(0,0,0,0.4);
-}
-
-.phx-modal-content {
-  background-color: #fefefe;
-  margin: 15% auto;
-  padding: 20px;
-  border: 1px solid #888;
-  width: 80%;
-}
-
-.phx-modal-close {
-  color: #aaa;
-  float: right;
-  font-size: 28px;
-  font-weight: bold;
-}
-
-.phx-modal-close:hover,
-.phx-modal-close:focus {
-  color: black;
-  text-decoration: none;
-  cursor: pointer;
-}
-
-
-/* Alerts and form errors */
-.alert {
-  padding: 15px;
-  margin-bottom: 20px;
-  border: 1px solid transparent;
-  border-radius: 4px;
-}
-.alert-info {
-  color: #31708f;
-  background-color: #d9edf7;
-  border-color: #bce8f1;
-}
-.alert-warning {
-  color: #8a6d3b;
-  background-color: #fcf8e3;
-  border-color: #faebcc;
-}
-.alert-danger {
-  color: #a94442;
-  background-color: #f2dede;
-  border-color: #ebccd1;
-}
-.alert p {
-  margin-bottom: 0;
-}
-.alert:empty {
-  display: none;
-}
-.invalid-feedback {
-  color: #a94442;
-  display: block;
-  margin: -1rem 0 2rem;
-}
diff --git assets/js/app.js b/projects/phoenix/1.5.7/binaryid-live/assets/js/app.js
deleted file mode 100644
index dfc0f97..0000000
--- assets/js/app.js
+++ /dev/null
@@ -1,35 +0,0 @@
-// We need to import the CSS so that webpack will load it.
-// The MiniCssExtractPlugin is used to separate it out into
-// its own CSS file.
-import "../css/app.scss"
-
-// webpack automatically bundles all modules in your
-// entry points. Those entry points can be configured
-// in "webpack.config.js".
-//
-// Import deps with the dep name or local files with a relative path, for example:
-//
-//     import {Socket} from "phoenix"
-//     import socket from "./socket"
-//
-import "phoenix_html"
-import {Socket} from "phoenix"
-import NProgress from "nprogress"
-import {LiveSocket} from "phoenix_live_view"
-
-let csrfToken = document.querySelector("meta[name='csrf-token']").getAttribute("content")
-let liveSocket = new LiveSocket("/live", Socket, {params: {_csrf_token: csrfToken}})
-
-// Show progress bar on live navigation and form submits
-window.addEventListener("phx:page-loading-start", info => NProgress.start())
-window.addEventListener("phx:page-loading-stop", info => NProgress.done())
-
-// connect if there are any LiveViews on the page
-liveSocket.connect()
-
-// expose liveSocket on window for web console debug logs and latency simulation:
-// >> liveSocket.enableDebug()
-// >> liveSocket.enableLatencySim(1000)  // enabled for duration of browser session
-// >> liveSocket.disableLatencySim()
-window.liveSocket = liveSocket
-
diff --git config/config.exs config/config.exs
index cdd0d02..d1757ad 100644
--- config/config.exs
+++ config/config.exs
@@ -1,18 +1,21 @@
-# This file is responsible for configuring your application
-# and its dependencies with the aid of the Mix.Config module.
+# This file is responsible for configuring your umbrella
+# and **all applications** and their dependencies with the
+# help of Mix.Config.
 #
-# This configuration file is loaded before any dependency and
-# is restricted to this project.
-
-# General application configuration
+# Note that all applications in your umbrella share the
+# same configuration and dependencies, which is why they
+# all use the same configuration file. If you want different
+# configurations or dependencies per app, it is best to
+# move said applications out of the umbrella.
 use Mix.Config
 
-config :my_app,
-  ecto_repos: [MyApp.Repo],
-  generators: [binary_id: true]
+
+
+config :my_app_web,
+  generators: [context_app: :my_app]
 
 # Configures the endpoint
-config :my_app, MyAppWeb.Endpoint,
+config :my_app_web, MyAppWeb.Endpoint,
   url: [host: "localhost"],
   secret_key_base: "[redacted]",
   render_errors: [view: MyAppWeb.ErrorView, accepts: ~w(html json), layout: false],
diff --git config/dev.exs config/dev.exs
index 071eb94..407b9f8 100644
--- config/dev.exs
+++ config/dev.exs
@@ -1,21 +1,12 @@
 use Mix.Config
 
-# Configure your database
-config :my_app, MyApp.Repo,
-  username: "postgres",
-  password: "postgres",
-  database: "my_app_dev",
-  hostname: "localhost",
-  show_sensitive_data_on_connection_error: true,
-  pool_size: 10
-
 # For development, we disable any cache and enable
 # debugging and code reloading.
 #
 # The watchers configuration can be used to run external
 # watchers to your application. For example, we use it
 # with webpack to recompile .js and .css sources.
-config :my_app, MyAppWeb.Endpoint,
+config :my_app_web, MyAppWeb.Endpoint,
   http: [port: 4000],
   debug_errors: true,
   code_reloader: true,
@@ -26,7 +17,7 @@ config :my_app, MyAppWeb.Endpoint,
       "--mode",
       "development",
       "--watch-stdin",
-      cd: Path.expand("../assets", __DIR__)
+      cd: Path.expand("../apps/my_app_web/assets", __DIR__)
     ]
   ]
 
@@ -55,11 +46,10 @@ config :my_app, MyAppWeb.Endpoint,
 # different ports.
 
 # Watch static and templates for browser reloading.
-config :my_app, MyAppWeb.Endpoint,
+config :my_app_web, MyAppWeb.Endpoint,
   live_reload: [
     patterns: [
       ~r"priv/static/.*(js|css|png|jpeg|jpg|gif|svg)$",
-      ~r"priv/gettext/.*(po)$",
       ~r"lib/my_app_web/(live|views)/.*(ex)$",
       ~r"lib/my_app_web/templates/.*(eex)$"
     ]
@@ -68,9 +58,9 @@ config :my_app, MyAppWeb.Endpoint,
 # Do not include metadata nor timestamps in development logs
 config :logger, :console, format: "[$level] $message\n"
 
+# Initialize plugs at runtime for faster development compilation
+config :phoenix, :plug_init_mode, :runtime
+
 # Set a higher stacktrace during development. Avoid configuring such
 # in production as building large stacktraces may be expensive.
 config :phoenix, :stacktrace_depth, 20
-
-# Initialize plugs at runtime for faster development compilation
-config :phoenix, :plug_init_mode, :runtime
diff --git config/prod.exs config/prod.exs
index 7443cb4..8310ab5 100644
--- config/prod.exs
+++ config/prod.exs
@@ -9,19 +9,16 @@ use Mix.Config
 # manifest is generated by the `mix phx.digest` task,
 # which you should run after static files are built and
 # before starting your production server.
-config :my_app, MyAppWeb.Endpoint,
+config :my_app_web, MyAppWeb.Endpoint,
   url: [host: "example.com", port: 80],
   cache_static_manifest: "priv/static/cache_manifest.json"
 
-# Do not print debug messages in production
-config :logger, level: :info
-
 # ## SSL Support
 #
 # To get SSL working, you will need to add the `https` key
 # to the previous section and set your `:url` port to 443:
 #
-#     config :my_app, MyAppWeb.Endpoint,
+#     config :my_app_web, MyAppWeb.Endpoint,
 #       ...
 #       url: [host: "example.com", port: 443],
 #       https: [
@@ -45,11 +42,14 @@ config :logger, level: :info
 # We also recommend setting `force_ssl` in your endpoint, ensuring
 # no data is ever sent via http, always redirecting to https:
 #
-#     config :my_app, MyAppWeb.Endpoint,
+#     config :my_app_web, MyAppWeb.Endpoint,
 #       force_ssl: [hsts: true]
 #
 # Check `Plug.SSL` for all available options in `force_ssl`.
 
+# Do not print debug messages in production
+config :logger, level: :info
+
 # Finally import the config/prod.secret.exs which loads secrets
 # and configuration from environment variables.
 import_config "prod.secret.exs"
diff --git config/prod.secret.exs config/prod.secret.exs
index 968473e..702c128 100644
--- config/prod.secret.exs
+++ config/prod.secret.exs
@@ -4,18 +4,6 @@
 # remember to add this file to your .gitignore.
 use Mix.Config
 
-database_url =
-  System.get_env("DATABASE_URL") ||
-    raise """
-    environment variable DATABASE_URL is missing.
-    For example: ecto://USER:PASS@HOST/DATABASE
-    """
-
-config :my_app, MyApp.Repo,
-  # ssl: true,
-  url: database_url,
-  pool_size: String.to_integer(System.get_env("POOL_SIZE") || "10")
-
 secret_key_base =
   System.get_env("SECRET_KEY_BASE") ||
     raise """
@@ -23,7 +11,7 @@ secret_key_base =
     You can generate one by calling: mix phx.gen.secret
     """
 
-config :my_app, MyAppWeb.Endpoint,
+config :my_app_web, MyAppWeb.Endpoint,
   http: [
     port: String.to_integer(System.get_env("PORT") || "4000"),
     transport_options: [socket_opts: [:inet6]]
@@ -35,7 +23,7 @@ config :my_app, MyAppWeb.Endpoint,
 # If you are doing OTP releases, you need to instruct Phoenix
 # to start each relevant endpoint:
 #
-#     config :my_app, MyAppWeb.Endpoint, server: true
+#     config :my_app_web, MyAppWeb.Endpoint, server: true
 #
 # Then you can assemble a release by calling `mix release`.
 # See `mix help release` for more information.
diff --git config/test.exs config/test.exs
index 5589099..8fd529b 100644
--- config/test.exs
+++ config/test.exs
@@ -1,20 +1,8 @@
 use Mix.Config
 
-# Configure your database
-#
-# The MIX_TEST_PARTITION environment variable can be used
-# to provide built-in test partitioning in CI environment.
-# Run `mix help test` for more information.
-config :my_app, MyApp.Repo,
-  username: "postgres",
-  password: "postgres",
-  database: "my_app_test#{System.get_env("MIX_TEST_PARTITION")}",
-  hostname: "localhost",
-  pool: Ecto.Adapters.SQL.Sandbox
-
 # We don't run a server during test. If one is required,
 # you can enable the server option below.
-config :my_app, MyAppWeb.Endpoint,
+config :my_app_web, MyAppWeb.Endpoint,
   http: [port: 4002],
   server: false
 
diff --git lib/my_app/repo.ex b/projects/phoenix/1.5.7/binaryid-live/lib/my_app/repo.ex
deleted file mode 100644
index 595ff57..0000000
--- lib/my_app/repo.ex
+++ /dev/null
@@ -1,5 +0,0 @@
-defmodule MyApp.Repo do
-  use Ecto.Repo,
-    otp_app: :my_app,
-    adapter: Ecto.Adapters.Postgres
-end
diff --git lib/my_app_web/gettext.ex b/projects/phoenix/1.5.7/binaryid-live/lib/my_app_web/gettext.ex
deleted file mode 100644
index 7919b97..0000000
--- lib/my_app_web/gettext.ex
+++ /dev/null
@@ -1,24 +0,0 @@
-defmodule MyAppWeb.Gettext do
-  @moduledoc """
-  A module providing Internationalization with a gettext-based API.
-
-  By using [Gettext](https://hexdocs.pm/gettext),
-  your module gains a set of macros for translations, for example:
-
-      import MyAppWeb.Gettext
-
-      # Simple translation
-      gettext("Here is the string to translate")
-
-      # Plural translation
-      ngettext("Here is the string to translate",
-               "Here are the strings to translate",
-               3)
-
-      # Domain-based translation
-      dgettext("errors", "Here is the error message to translate")
-
-  See the [Gettext Docs](https://hexdocs.pm/gettext) for detailed usage.
-  """
-  use Gettext, otp_app: :my_app
-end
diff --git lib/my_app_web/live/page_live.ex b/projects/phoenix/1.5.7/binaryid-live/lib/my_app_web/live/page_live.ex
deleted file mode 100644
index 1d75b57..0000000
--- lib/my_app_web/live/page_live.ex
+++ /dev/null
@@ -1,39 +0,0 @@
-defmodule MyAppWeb.PageLive do
-  use MyAppWeb, :live_view
-
-  @impl true
-  def mount(_params, _session, socket) do
-    {:ok, assign(socket, query: "", results: %{})}
-  end
-
-  @impl true
-  def handle_event("suggest", %{"q" => query}, socket) do
-    {:noreply, assign(socket, results: search(query), query: query)}
-  end
-
-  @impl true
-  def handle_event("search", %{"q" => query}, socket) do
-    case search(query) do
-      %{^query => vsn} ->
-        {:noreply, redirect(socket, external: "https://hexdocs.pm/#{query}/#{vsn}")}
-
-      _ ->
-        {:noreply,
-         socket
-         |> put_flash(:error, "No dependencies found matching \"#{query}\"")
-         |> assign(results: %{}, query: query)}
-    end
-  end
-
-  defp search(query) do
-    if not MyAppWeb.Endpoint.config(:code_reloader) do
-      raise "action disabled when not in development"
-    end
-
-    for {app, desc, vsn} <- Application.started_applications(),
-        app = to_string(app),
-        String.starts_with?(app, query) and not List.starts_with?(desc, ~c"ERTS"),
-        into: %{},
-        do: {app, vsn}
-  end
-end
diff --git lib/my_app_web/router.ex b/projects/phoenix/1.5.7/binaryid-live/lib/my_app_web/router.ex
deleted file mode 100644
index ad9430e..0000000
--- lib/my_app_web/router.ex
+++ /dev/null
@@ -1,43 +0,0 @@
-defmodule MyAppWeb.Router do
-  use MyAppWeb, :router
-
-  pipeline :browser do
-    plug :accepts, ["html"]
-    plug :fetch_session
-    plug :fetch_live_flash
-    plug :put_root_layout, {MyAppWeb.LayoutView, :root}
-    plug :protect_from_forgery
-    plug :put_secure_browser_headers
-  end
-
-  pipeline :api do
-    plug :accepts, ["json"]
-  end
-
-  scope "/", MyAppWeb do
-    pipe_through :browser
-
-    live "/", PageLive, :index
-  end
-
-  # Other scopes may use custom stacks.
-  # scope "/api", MyAppWeb do
-  #   pipe_through :api
-  # end
-
-  # Enables LiveDashboard only for development
-  #
-  # If you want to use the LiveDashboard in production, you should put
-  # it behind authentication and allow only admins to access it.
-  # If your application does not have an admins-only section yet,
-  # you can use Plug.BasicAuth to set up some basic authentication
-  # as long as you are also using SSL (which you should anyway).
-  if Mix.env() in [:dev, :test] do
-    import Phoenix.LiveDashboard.Router
-
-    scope "/" do
-      pipe_through :browser
-      live_dashboard "/dashboard", metrics: MyAppWeb.Telemetry
-    end
-  end
-end
diff --git lib/my_app_web/templates/layout/app.html.eex b/projects/phoenix/1.5.7/binaryid-live/lib/my_app_web/templates/layout/app.html.eex
deleted file mode 100644
index 09ffdad..0000000
--- lib/my_app_web/templates/layout/app.html.eex
+++ /dev/null
@@ -1,5 +0,0 @@
-<main role="main" class="container">
-  <p class="alert alert-info" role="alert"><%= get_flash(@conn, :info) %></p>
-  <p class="alert alert-danger" role="alert"><%= get_flash(@conn, :error) %></p>
-  <%= @inner_content %>
-</main>
diff --git lib/my_app_web/templates/layout/live.html.leex b/projects/phoenix/1.5.7/binaryid-live/lib/my_app_web/templates/layout/live.html.leex
deleted file mode 100644
index 8dcded5..0000000
--- lib/my_app_web/templates/layout/live.html.leex
+++ /dev/null
@@ -1,11 +0,0 @@
-<main role="main" class="container">
-  <p class="alert alert-info" role="alert"
-    phx-click="lv:clear-flash"
-    phx-value-key="info"><%= live_flash(@flash, :info) %></p>
-
-  <p class="alert alert-danger" role="alert"
-    phx-click="lv:clear-flash"
-    phx-value-key="error"><%= live_flash(@flash, :error) %></p>
-
-  <%= @inner_content %>
-</main>
diff --git lib/my_app_web/views/error_helpers.ex b/projects/phoenix/1.5.7/binaryid-live/lib/my_app_web/views/error_helpers.ex
deleted file mode 100644
index 9b530af..0000000
--- lib/my_app_web/views/error_helpers.ex
+++ /dev/null
@@ -1,47 +0,0 @@
-defmodule MyAppWeb.ErrorHelpers do
-  @moduledoc """
-  Conveniences for translating and building error messages.
-  """
-
-  use Phoenix.HTML
-
-  @doc """
-  Generates tag for inlined form input errors.
-  """
-  def error_tag(form, field) do
-    Enum.map(Keyword.get_values(form.errors, field), fn error ->
-      content_tag(:span, translate_error(error),
-        class: "invalid-feedback",
-        phx_feedback_for: input_id(form, field)
-      )
-    end)
-  end
-
-  @doc """
-  Translates an error message using gettext.
-  """
-  def translate_error({msg, opts}) do
-    # When using gettext, we typically pass the strings we want
-    # to translate as a static argument:
-    #
-    #     # Translate "is invalid" in the "errors" domain
-    #     dgettext("errors", "is invalid")
-    #
-    #     # Translate the number of files with plural rules
-    #     dngettext("errors", "1 file", "%{count} files", count)
-    #
-    # Because the error messages we show in our forms and APIs
-    # are defined inside Ecto, we need to translate them dynamically.
-    # This requires us to call the Gettext module passing our gettext
-    # backend as first argument.
-    #
-    # Note we use the "errors" domain, which means translations
-    # should be written to the errors.po file. The :count option is
-    # set by Ecto and indicates we should also apply plural rules.
-    if count = opts[:count] do
-      Gettext.dngettext(MyAppWeb.Gettext, "errors", msg, msg, count, opts)
-    else
-      Gettext.dgettext(MyAppWeb.Gettext, "errors", msg, opts)
-    end
-  end
-end
diff --git mix.exs mix.exs
index a65ebe0..099c509 100644
--- mix.exs
+++ mix.exs
@@ -1,53 +1,30 @@
-defmodule MyApp.MixProject do
+defmodule MyApp.Umbrella.MixProject do
   use Mix.Project
 
   def project do
     [
-      app: :my_app,
+      apps_path: "apps",
       version: "0.1.0",
-      elixir: "~> 1.7",
-      elixirc_paths: elixirc_paths(Mix.env()),
-      compilers: [:phoenix, :gettext] ++ Mix.compilers(),
       start_permanent: Mix.env() == :prod,
-      aliases: aliases(),
-      deps: deps()
+      deps: deps(),
+      aliases: aliases()
     ]
   end
 
-  # Configuration for the OTP application.
+  # Dependencies can be Hex packages:
   #
-  # Type `mix help compile.app` for more information.
-  def application do
-    [
-      mod: {MyApp.Application, []},
-      extra_applications: [:logger, :runtime_tools]
-    ]
-  end
-
-  # Specifies which paths to compile per environment.
-  defp elixirc_paths(:test), do: ["lib", "test/support"]
-  defp elixirc_paths(_), do: ["lib"]
-
-  # Specifies your project dependencies.
+  #   {:mydep, "~> 0.3.0"}
+  #
+  # Or git/path repositories:
   #
-  # Type `mix help deps` for examples and options.
+  #   {:mydep, git: "https://github.com/elixir-lang/mydep.git", tag: "0.1.0"}
+  #
+  # Type "mix help deps" for more examples and options.
+  #
+  # Dependencies listed here are available only for this project
+  # and cannot be accessed from applications inside the apps/ folder.
   defp deps do
-    [
-      {:phoenix, "~> 1.5.7"},
-      {:phoenix_ecto, "~> 4.1"},
-      {:ecto_sql, "~> 3.4"},
-      {:postgrex, ">= 0.0.0"},
-      {:phoenix_live_view, "~> 0.15.0"},
-      {:floki, ">= 0.27.0", only: :test},
-      {:phoenix_html, "~> 2.11"},
-      {:phoenix_live_reload, "~> 1.2", only: :dev},
-      {:phoenix_live_dashboard, "~> 0.4"},
-      {:telemetry_metrics, "~> 0.4"},
-      {:telemetry_poller, "~> 0.4"},
-      {:gettext, "~> 0.11"},
-      {:jason, "~> 1.0"},
-      {:plug_cowboy, "~> 2.0"}
-    ]
+    []
   end
 
   # Aliases are shortcuts or tasks specific to the current project.
@@ -56,12 +33,13 @@ defmodule MyApp.MixProject do
   #     $ mix setup
   #
   # See the documentation for `Mix` for more info on aliases.
+  #
+  # Aliases listed here are available only for this project
+  # and cannot be accessed from applications inside the apps/ folder.
   defp aliases do
     [
-      setup: ["deps.get", "ecto.setup", "cmd npm install --prefix assets"],
-      "ecto.setup": ["ecto.create", "ecto.migrate", "run priv/repo/seeds.exs"],
-      "ecto.reset": ["ecto.drop", "ecto.setup"],
-      test: ["ecto.create --quiet", "ecto.migrate --quiet", "test"]
+      # run `mix setup` in all child apps
+      setup: ["cmd mix setup"]
     ]
   end
 end
diff --git priv/gettext/en/LC_MESSAGES/errors.po b/projects/phoenix/1.5.7/binaryid-live/priv/gettext/en/LC_MESSAGES/errors.po
deleted file mode 100644
index a589998..0000000
--- priv/gettext/en/LC_MESSAGES/errors.po
+++ /dev/null
@@ -1,97 +0,0 @@
-## `msgid`s in this file come from POT (.pot) files.
-##
-## Do not add, change, or remove `msgid`s manually here as
-## they're tied to the ones in the corresponding POT file
-## (with the same domain).
-##
-## Use `mix gettext.extract --merge` or `mix gettext.merge`
-## to merge POT files into PO files.
-msgid ""
-msgstr ""
-"Language: en\n"
-
-## From Ecto.Changeset.cast/4
-msgid "can't be blank"
-msgstr ""
-
-## From Ecto.Changeset.unique_constraint/3
-msgid "has already been taken"
-msgstr ""
-
-## From Ecto.Changeset.put_change/3
-msgid "is invalid"
-msgstr ""
-
-## From Ecto.Changeset.validate_acceptance/3
-msgid "must be accepted"
-msgstr ""
-
-## From Ecto.Changeset.validate_format/3
-msgid "has invalid format"
-msgstr ""
-
-## From Ecto.Changeset.validate_subset/3
-msgid "has an invalid entry"
-msgstr ""
-
-## From Ecto.Changeset.validate_exclusion/3
-msgid "is reserved"
-msgstr ""
-
-## From Ecto.Changeset.validate_confirmation/3
-msgid "does not match confirmation"
-msgstr ""
-
-## From Ecto.Changeset.no_assoc_constraint/3
-msgid "is still associated with this entry"
-msgstr ""
-
-msgid "are still associated with this entry"
-msgstr ""
-
-## From Ecto.Changeset.validate_length/3
-msgid "should be %{count} character(s)"
-msgid_plural "should be %{count} character(s)"
-msgstr[0] ""
-msgstr[1] ""
-
-msgid "should have %{count} item(s)"
-msgid_plural "should have %{count} item(s)"
-msgstr[0] ""
-msgstr[1] ""
-
-msgid "should be at least %{count} character(s)"
-msgid_plural "should be at least %{count} character(s)"
-msgstr[0] ""
-msgstr[1] ""
-
-msgid "should have at least %{count} item(s)"
-msgid_plural "should have at least %{count} item(s)"
-msgstr[0] ""
-msgstr[1] ""
-
-msgid "should be at most %{count} character(s)"
-msgid_plural "should be at most %{count} character(s)"
-msgstr[0] ""
-msgstr[1] ""
-
-msgid "should have at most %{count} item(s)"
-msgid_plural "should have at most %{count} item(s)"
-msgstr[0] ""
-msgstr[1] ""
-
-## From Ecto.Changeset.validate_number/3
-msgid "must be less than %{number}"
-msgstr ""
-
-msgid "must be greater than %{number}"
-msgstr ""
-
-msgid "must be less than or equal to %{number}"
-msgstr ""
-
-msgid "must be greater than or equal to %{number}"
-msgstr ""
-
-msgid "must be equal to %{number}"
-msgstr ""
diff --git priv/gettext/errors.pot b/projects/phoenix/1.5.7/binaryid-live/priv/gettext/errors.pot
deleted file mode 100644
index 39a220b..0000000
--- priv/gettext/errors.pot
+++ /dev/null
@@ -1,95 +0,0 @@
-## This is a PO Template file.
-##
-## `msgid`s here are often extracted from source code.
-## Add new translations manually only if they're dynamic
-## translations that can't be statically extracted.
-##
-## Run `mix gettext.extract` to bring this file up to
-## date. Leave `msgstr`s empty as changing them here has no
-## effect: edit them in PO (`.po`) files instead.
-
-## From Ecto.Changeset.cast/4
-msgid "can't be blank"
-msgstr ""
-
-## From Ecto.Changeset.unique_constraint/3
-msgid "has already been taken"
-msgstr ""
-
-## From Ecto.Changeset.put_change/3
-msgid "is invalid"
-msgstr ""
-
-## From Ecto.Changeset.validate_acceptance/3
-msgid "must be accepted"
-msgstr ""
-
-## From Ecto.Changeset.validate_format/3
-msgid "has invalid format"
-msgstr ""
-
-## From Ecto.Changeset.validate_subset/3
-msgid "has an invalid entry"
-msgstr ""
-
-## From Ecto.Changeset.validate_exclusion/3
-msgid "is reserved"
-msgstr ""
-
-## From Ecto.Changeset.validate_confirmation/3
-msgid "does not match confirmation"
-msgstr ""
-
-## From Ecto.Changeset.no_assoc_constraint/3
-msgid "is still associated with this entry"
-msgstr ""
-
-msgid "are still associated with this entry"
-msgstr ""
-
-## From Ecto.Changeset.validate_length/3
-msgid "should be %{count} character(s)"
-msgid_plural "should be %{count} character(s)"
-msgstr[0] ""
-msgstr[1] ""
-
-msgid "should have %{count} item(s)"
-msgid_plural "should have %{count} item(s)"
-msgstr[0] ""
-msgstr[1] ""
-
-msgid "should be at least %{count} character(s)"
-msgid_plural "should be at least %{count} character(s)"
-msgstr[0] ""
-msgstr[1] ""
-
-msgid "should have at least %{count} item(s)"
-msgid_plural "should have at least %{count} item(s)"
-msgstr[0] ""
-msgstr[1] ""
-
-msgid "should be at most %{count} character(s)"
-msgid_plural "should be at most %{count} character(s)"
-msgstr[0] ""
-msgstr[1] ""
-
-msgid "should have at most %{count} item(s)"
-msgid_plural "should have at most %{count} item(s)"
-msgstr[0] ""
-msgstr[1] ""
-
-## From Ecto.Changeset.validate_number/3
-msgid "must be less than %{number}"
-msgstr ""
-
-msgid "must be greater than %{number}"
-msgstr ""
-
-msgid "must be less than or equal to %{number}"
-msgstr ""
-
-msgid "must be greater than or equal to %{number}"
-msgstr ""
-
-msgid "must be equal to %{number}"
-msgstr ""
diff --git priv/repo/migrations/.formatter.exs b/projects/phoenix/1.5.7/binaryid-live/priv/repo/migrations/.formatter.exs
deleted file mode 100644
index 49f9151..0000000
--- priv/repo/migrations/.formatter.exs
+++ /dev/null
@@ -1,4 +0,0 @@
-[
-  import_deps: [:ecto_sql],
-  inputs: ["*.exs"]
-]
diff --git priv/repo/seeds.exs b/projects/phoenix/1.5.7/binaryid-live/priv/repo/seeds.exs
deleted file mode 100644
index e4ba004..0000000
--- priv/repo/seeds.exs
+++ /dev/null
@@ -1,11 +0,0 @@
-# Script for populating the database. You can run it as:
-#
-#     mix run priv/repo/seeds.exs
-#
-# Inside the script, you can read and write to any of your
-# repositories directly:
-#
-#     MyApp.Repo.insert!(%MyApp.SomeSchema{})
-#
-# We recommend using the bang functions (`insert!`, `update!`
-# and so on) as they will fail if something goes wrong.
diff --git test/my_app_web/live/page_live_test.exs b/projects/phoenix/1.5.7/binaryid-live/test/my_app_web/live/page_live_test.exs
deleted file mode 100644
index 7d971b0..0000000
--- test/my_app_web/live/page_live_test.exs
+++ /dev/null
@@ -1,11 +0,0 @@
-defmodule MyAppWeb.PageLiveTest do
-  use MyAppWeb.ConnCase
-
-  import Phoenix.LiveViewTest
-
-  test "disconnected and connected render", %{conn: conn} do
-    {:ok, page_live, disconnected_html} = live(conn, "/")
-    assert disconnected_html =~ "Welcome to Phoenix!"
-    assert render(page_live) =~ "Welcome to Phoenix!"
-  end
-end
diff --git test/support/data_case.ex b/projects/phoenix/1.5.7/binaryid-live/test/support/data_case.ex
deleted file mode 100644
index 774d271..0000000
--- test/support/data_case.ex
+++ /dev/null
@@ -1,55 +0,0 @@
-defmodule MyApp.DataCase do
-  @moduledoc """
-  This module defines the setup for tests requiring
-  access to the application's data layer.
-
-  You may define functions here to be used as helpers in
-  your tests.
-
-  Finally, if the test case interacts with the database,
-  we enable the SQL sandbox, so changes done to the database
-  are reverted at the end of every test. If you are using
-  PostgreSQL, you can even run database tests asynchronously
-  by setting `use MyApp.DataCase, async: true`, although
-  this option is not recommended for other databases.
-  """
-
-  use ExUnit.CaseTemplate
-
-  using do
-    quote do
-      alias MyApp.Repo
-
-      import Ecto
-      import Ecto.Changeset
-      import Ecto.Query
-      import MyApp.DataCase
-    end
-  end
-
-  setup tags do
-    :ok = Ecto.Adapters.SQL.Sandbox.checkout(MyApp.Repo)
-
-    unless tags[:async] do
-      Ecto.Adapters.SQL.Sandbox.mode(MyApp.Repo, {:shared, self()})
-    end
-
-    :ok
-  end
-
-  @doc """
-  A helper that transforms changeset errors into a map of messages.
-
-      assert {:error, changeset} = Accounts.create_user(%{password: "short"})
-      assert "password is too short" in errors_on(changeset).password
-      assert %{password: ["password is too short"]} = errors_on(changeset)
-
-  """
-  def errors_on(changeset) do
-    Ecto.Changeset.traverse_errors(changeset, fn {message, opts} ->
-      Regex.replace(~r"%{(\w+)}", message, fn _, key ->
-        opts |> Keyword.get(String.to_existing_atom(key), key) |> to_string()
-      end)
-    end)
-  end
-end
diff --git test/test_helper.exs b/projects/phoenix/1.5.7/binaryid-live/test/test_helper.exs
deleted file mode 100644
index 0491a89..0000000
--- test/test_helper.exs
+++ /dev/null
@@ -1,2 +0,0 @@
-ExUnit.start()
-Ecto.Adapters.SQL.Sandbox.mode(MyApp.Repo, :manual)
