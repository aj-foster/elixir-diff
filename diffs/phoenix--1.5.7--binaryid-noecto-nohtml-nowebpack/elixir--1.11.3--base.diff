diff --git .formatter.exs .formatter.exs
index 4761678..d2cda26 100644
--- .formatter.exs
+++ .formatter.exs
@@ -1,4 +1,4 @@
+# Used by "mix format"
 [
-  import_deps: [:phoenix],
-  inputs: ["*.{ex,exs}", "{config,lib,test}/**/*.{ex,exs}"]
+  inputs: ["{mix,.formatter}.exs", "{config,lib,test}/**/*.{ex,exs}"]
 ]
diff --git .gitignore .gitignore
index be002d1..2be4a13 100644
--- .gitignore
+++ .gitignore
@@ -7,7 +7,7 @@
 # The directory Mix downloads your dependencies sources to.
 /deps/
 
-# Where 3rd-party dependencies like ExDoc output generated docs.
+# Where third-party dependencies like ExDoc output generated docs.
 /doc/
 
 # Ignore .fetch files in case you like to edit your project deps locally.
@@ -22,7 +22,6 @@ erl_crash.dump
 # Ignore package tarball (built via "mix hex.build").
 my_app-*.tar
 
-# Since we are building assets from assets/,
-# we ignore priv/static. You may want to comment
-# this depending on your deployment strategy.
-/priv/static/
+
+# Temporary files for e.g. tests
+/tmp
diff --git README.md README.md
index 54e4276..a0b6bf0 100644
--- README.md
+++ README.md
@@ -1,18 +1,21 @@
 # MyApp
 
-To start your Phoenix server:
+**TODO: Add description**
 
-  * Install dependencies with `mix deps.get`
-  * Start Phoenix endpoint with `mix phx.server`
+## Installation
 
-Now you can visit [`localhost:4000`](http://localhost:4000) from your browser.
+If [available in Hex](https://hex.pm/docs/publish), the package can be installed
+by adding `my_app` to your list of dependencies in `mix.exs`:
 
-Ready to run in production? Please [check our deployment guides](https://hexdocs.pm/phoenix/deployment.html).
+```elixir
+def deps do
+  [
+    {:my_app, "~> 0.1.0"}
+  ]
+end
+```
 
-## Learn more
+Documentation can be generated with [ExDoc](https://github.com/elixir-lang/ex_doc)
+and published on [HexDocs](https://hexdocs.pm). Once published, the docs can
+be found at [https://hexdocs.pm/my_app](https://hexdocs.pm/my_app).
 
-  * Official website: https://www.phoenixframework.org/
-  * Guides: https://hexdocs.pm/phoenix/overview.html
-  * Docs: https://hexdocs.pm/phoenix
-  * Forum: https://elixirforum.com/c/phoenix-forum
-  * Source: https://github.com/phoenixframework/phoenix
diff --git config/config.exs b/projects/phoenix/1.5.7/binaryid-noecto-nohtml-nowebpack/config/config.exs
deleted file mode 100644
index b600774..0000000
--- config/config.exs
+++ /dev/null
@@ -1,31 +0,0 @@
-# This file is responsible for configuring your application
-# and its dependencies with the aid of the Mix.Config module.
-#
-# This configuration file is loaded before any dependency and
-# is restricted to this project.
-
-# General application configuration
-use Mix.Config
-
-config :my_app,
-  generators: [binary_id: true]
-
-# Configures the endpoint
-config :my_app, MyAppWeb.Endpoint,
-  url: [host: "localhost"],
-  secret_key_base: "[redacted]",
-  render_errors: [view: MyAppWeb.ErrorView, accepts: ~w(json), layout: false],
-  pubsub_server: MyApp.PubSub,
-  live_view: [signing_salt: "[redacted]"]
-
-# Configures Elixir's Logger
-config :logger, :console,
-  format: "$time $metadata[$level] $message\n",
-  metadata: [:request_id]
-
-# Use Jason for JSON parsing in Phoenix
-config :phoenix, :json_library, Jason
-
-# Import environment specific config. This must remain at the bottom
-# of this file so it overrides the configuration defined above.
-import_config "#{Mix.env()}.exs"
diff --git config/dev.exs b/projects/phoenix/1.5.7/binaryid-noecto-nohtml-nowebpack/config/dev.exs
deleted file mode 100644
index a729e6b..0000000
--- config/dev.exs
+++ /dev/null
@@ -1,48 +0,0 @@
-use Mix.Config
-
-# For development, we disable any cache and enable
-# debugging and code reloading.
-#
-# The watchers configuration can be used to run external
-# watchers to your application. For example, we use it
-# with webpack to recompile .js and .css sources.
-config :my_app, MyAppWeb.Endpoint,
-  http: [port: 4000],
-  debug_errors: true,
-  code_reloader: true,
-  check_origin: false,
-  watchers: []
-
-# ## SSL Support
-#
-# In order to use HTTPS in development, a self-signed
-# certificate can be generated by running the following
-# Mix task:
-#
-#     mix phx.gen.cert
-#
-# Note that this task requires Erlang/OTP 20 or later.
-# Run `mix help phx.gen.cert` for more information.
-#
-# The `http:` config above can be replaced with:
-#
-#     https: [
-#       port: 4001,
-#       cipher_suite: :strong,
-#       keyfile: "priv/cert/selfsigned_key.pem",
-#       certfile: "priv/cert/selfsigned.pem"
-#     ],
-#
-# If desired, both `http:` and `https:` keys can be
-# configured to run both http and https servers on
-# different ports.
-
-# Do not include metadata nor timestamps in development logs
-config :logger, :console, format: "[$level] $message\n"
-
-# Set a higher stacktrace during development. Avoid configuring such
-# in production as building large stacktraces may be expensive.
-config :phoenix, :stacktrace_depth, 20
-
-# Initialize plugs at runtime for faster development compilation
-config :phoenix, :plug_init_mode, :runtime
diff --git config/prod.exs b/projects/phoenix/1.5.7/binaryid-noecto-nohtml-nowebpack/config/prod.exs
deleted file mode 100644
index 7443cb4..0000000
--- config/prod.exs
+++ /dev/null
@@ -1,55 +0,0 @@
-use Mix.Config
-
-# For production, don't forget to configure the url host
-# to something meaningful, Phoenix uses this information
-# when generating URLs.
-#
-# Note we also include the path to a cache manifest
-# containing the digested version of static files. This
-# manifest is generated by the `mix phx.digest` task,
-# which you should run after static files are built and
-# before starting your production server.
-config :my_app, MyAppWeb.Endpoint,
-  url: [host: "example.com", port: 80],
-  cache_static_manifest: "priv/static/cache_manifest.json"
-
-# Do not print debug messages in production
-config :logger, level: :info
-
-# ## SSL Support
-#
-# To get SSL working, you will need to add the `https` key
-# to the previous section and set your `:url` port to 443:
-#
-#     config :my_app, MyAppWeb.Endpoint,
-#       ...
-#       url: [host: "example.com", port: 443],
-#       https: [
-#         port: 443,
-#         cipher_suite: :strong,
-#         keyfile: System.get_env("SOME_APP_SSL_KEY_PATH"),
-#         certfile: System.get_env("SOME_APP_SSL_CERT_PATH"),
-#         transport_options: [socket_opts: [:inet6]]
-#       ]
-#
-# The `cipher_suite` is set to `:strong` to support only the
-# latest and more secure SSL ciphers. This means old browsers
-# and clients may not be supported. You can set it to
-# `:compatible` for wider support.
-#
-# `:keyfile` and `:certfile` expect an absolute path to the key
-# and cert in disk or a relative path inside priv, for example
-# "priv/ssl/server.key". For all supported SSL configuration
-# options, see https://hexdocs.pm/plug/Plug.SSL.html#configure/1
-#
-# We also recommend setting `force_ssl` in your endpoint, ensuring
-# no data is ever sent via http, always redirecting to https:
-#
-#     config :my_app, MyAppWeb.Endpoint,
-#       force_ssl: [hsts: true]
-#
-# Check `Plug.SSL` for all available options in `force_ssl`.
-
-# Finally import the config/prod.secret.exs which loads secrets
-# and configuration from environment variables.
-import_config "prod.secret.exs"
diff --git config/prod.secret.exs b/projects/phoenix/1.5.7/binaryid-noecto-nohtml-nowebpack/config/prod.secret.exs
deleted file mode 100644
index 3568fa4..0000000
--- config/prod.secret.exs
+++ /dev/null
@@ -1,29 +0,0 @@
-# In this file, we load production configuration and secrets
-# from environment variables. You can also hardcode secrets,
-# although such is generally not recommended and you have to
-# remember to add this file to your .gitignore.
-use Mix.Config
-
-secret_key_base =
-  System.get_env("SECRET_KEY_BASE") ||
-    raise """
-    environment variable SECRET_KEY_BASE is missing.
-    You can generate one by calling: mix phx.gen.secret
-    """
-
-config :my_app, MyAppWeb.Endpoint,
-  http: [
-    port: String.to_integer(System.get_env("PORT") || "4000"),
-    transport_options: [socket_opts: [:inet6]]
-  ],
-  secret_key_base: secret_key_base
-
-# ## Using releases (Elixir v1.9+)
-#
-# If you are doing OTP releases, you need to instruct Phoenix
-# to start each relevant endpoint:
-#
-#     config :my_app, MyAppWeb.Endpoint, server: true
-#
-# Then you can assemble a release by calling `mix release`.
-# See `mix help release` for more information.
diff --git config/test.exs b/projects/phoenix/1.5.7/binaryid-noecto-nohtml-nowebpack/config/test.exs
deleted file mode 100644
index d363390..0000000
--- config/test.exs
+++ /dev/null
@@ -1,10 +0,0 @@
-use Mix.Config
-
-# We don't run a server during test. If one is required,
-# you can enable the server option below.
-config :my_app, MyAppWeb.Endpoint,
-  http: [port: 4002],
-  server: false
-
-# Print only warnings and errors during test
-config :logger, level: :warn
diff --git lib/my_app/application.ex b/projects/phoenix/1.5.7/binaryid-noecto-nohtml-nowebpack/lib/my_app/application.ex
deleted file mode 100644
index 9ecbdae..0000000
--- lib/my_app/application.ex
+++ /dev/null
@@ -1,32 +0,0 @@
-defmodule MyApp.Application do
-  # See https://hexdocs.pm/elixir/Application.html
-  # for more information on OTP Applications
-  @moduledoc false
-
-  use Application
-
-  def start(_type, _args) do
-    children = [
-      # Start the Telemetry supervisor
-      MyAppWeb.Telemetry,
-      # Start the PubSub system
-      {Phoenix.PubSub, name: MyApp.PubSub},
-      # Start the Endpoint (http/https)
-      MyAppWeb.Endpoint
-      # Start a worker by calling: MyApp.Worker.start_link(arg)
-      # {MyApp.Worker, arg}
-    ]
-
-    # See https://hexdocs.pm/elixir/Supervisor.html
-    # for other strategies and supported options
-    opts = [strategy: :one_for_one, name: MyApp.Supervisor]
-    Supervisor.start_link(children, opts)
-  end
-
-  # Tell Phoenix to update the endpoint configuration
-  # whenever the application is updated.
-  def config_change(changed, _new, removed) do
-    MyAppWeb.Endpoint.config_change(changed, removed)
-    :ok
-  end
-end
diff --git lib/my_app.ex lib/my_app.ex
index ee0175f..af46ee9 100644
--- lib/my_app.ex
+++ lib/my_app.ex
@@ -1,9 +1,18 @@
 defmodule MyApp do
   @moduledoc """
-  MyApp keeps the contexts that define your domain
-  and business logic.
+  Documentation for `MyApp`.
+  """
+
+  @doc """
+  Hello world.
+
+  ## Examples
+
+      iex> MyApp.hello()
+      :world
 
-  Contexts are also responsible for managing your data, regardless
-  if it comes from the database, an external API or others.
   """
+  def hello do
+    :world
+  end
 end
diff --git lib/my_app_web/channels/user_socket.ex b/projects/phoenix/1.5.7/binaryid-noecto-nohtml-nowebpack/lib/my_app_web/channels/user_socket.ex
deleted file mode 100644
index 2b7368f..0000000
--- lib/my_app_web/channels/user_socket.ex
+++ /dev/null
@@ -1,35 +0,0 @@
-defmodule MyAppWeb.UserSocket do
-  use Phoenix.Socket
-
-  ## Channels
-  # channel "room:*", MyAppWeb.RoomChannel
-
-  # Socket params are passed from the client and can
-  # be used to verify and authenticate a user. After
-  # verification, you can put default assigns into
-  # the socket that will be set for all channels, ie
-  #
-  #     {:ok, assign(socket, :user_id, verified_user_id)}
-  #
-  # To deny connection, return `:error`.
-  #
-  # See `Phoenix.Token` documentation for examples in
-  # performing token verification on connect.
-  @impl true
-  def connect(_params, socket, _connect_info) do
-    {:ok, socket}
-  end
-
-  # Socket id's are topics that allow you to identify all sockets for a given user:
-  #
-  #     def id(socket), do: "user_socket:#{socket.assigns.user_id}"
-  #
-  # Would allow you to broadcast a "disconnect" event and terminate
-  # all active sockets and channels for a given user:
-  #
-  #     MyAppWeb.Endpoint.broadcast("user_socket:#{user.id}", "disconnect", %{})
-  #
-  # Returning `nil` makes this socket anonymous.
-  @impl true
-  def id(_socket), do: nil
-end
diff --git lib/my_app_web/endpoint.ex b/projects/phoenix/1.5.7/binaryid-noecto-nohtml-nowebpack/lib/my_app_web/endpoint.ex
deleted file mode 100644
index 2b9f117..0000000
--- lib/my_app_web/endpoint.ex
+++ /dev/null
@@ -1,51 +0,0 @@
-defmodule MyAppWeb.Endpoint do
-  use Phoenix.Endpoint, otp_app: :my_app
-
-  # The session will be stored in the cookie and signed,
-  # this means its contents can be read but not tampered with.
-  # Set :encryption_salt if you would also like to encrypt it.
-  @session_options [
-    store: :cookie,
-    key: "_my_app_key",
-    signing_salt: "[redacted]"
-  ]
-
-  socket "/socket", MyAppWeb.UserSocket,
-    websocket: true,
-    longpoll: false
-
-  socket "/live", Phoenix.LiveView.Socket, websocket: [connect_info: [session: @session_options]]
-
-  # Serve at "/" the static files from "priv/static" directory.
-  #
-  # You should set gzip to true if you are running phx.digest
-  # when deploying your static files in production.
-  plug Plug.Static,
-    at: "/",
-    from: :my_app,
-    gzip: false,
-    only: ~w(css fonts images js favicon.ico robots.txt)
-
-  # Code reloading can be explicitly enabled under the
-  # :code_reloader configuration of your endpoint.
-  if code_reloading? do
-    plug Phoenix.CodeReloader
-  end
-
-  plug Phoenix.LiveDashboard.RequestLogger,
-    param_key: "request_logger",
-    cookie_key: "request_logger"
-
-  plug Plug.RequestId
-  plug Plug.Telemetry, event_prefix: [:phoenix, :endpoint]
-
-  plug Plug.Parsers,
-    parsers: [:urlencoded, :multipart, :json],
-    pass: ["*/*"],
-    json_decoder: Phoenix.json_library()
-
-  plug Plug.MethodOverride
-  plug Plug.Head
-  plug Plug.Session, @session_options
-  plug MyAppWeb.Router
-end
diff --git lib/my_app_web/gettext.ex b/projects/phoenix/1.5.7/binaryid-noecto-nohtml-nowebpack/lib/my_app_web/gettext.ex
deleted file mode 100644
index 7919b97..0000000
--- lib/my_app_web/gettext.ex
+++ /dev/null
@@ -1,24 +0,0 @@
-defmodule MyAppWeb.Gettext do
-  @moduledoc """
-  A module providing Internationalization with a gettext-based API.
-
-  By using [Gettext](https://hexdocs.pm/gettext),
-  your module gains a set of macros for translations, for example:
-
-      import MyAppWeb.Gettext
-
-      # Simple translation
-      gettext("Here is the string to translate")
-
-      # Plural translation
-      ngettext("Here is the string to translate",
-               "Here are the strings to translate",
-               3)
-
-      # Domain-based translation
-      dgettext("errors", "Here is the error message to translate")
-
-  See the [Gettext Docs](https://hexdocs.pm/gettext) for detailed usage.
-  """
-  use Gettext, otp_app: :my_app
-end
diff --git lib/my_app_web/router.ex b/projects/phoenix/1.5.7/binaryid-noecto-nohtml-nowebpack/lib/my_app_web/router.ex
deleted file mode 100644
index 4abdff1..0000000
--- lib/my_app_web/router.ex
+++ /dev/null
@@ -1,27 +0,0 @@
-defmodule MyAppWeb.Router do
-  use MyAppWeb, :router
-
-  pipeline :api do
-    plug :accepts, ["json"]
-  end
-
-  scope "/api", MyAppWeb do
-    pipe_through :api
-  end
-
-  # Enables LiveDashboard only for development
-  #
-  # If you want to use the LiveDashboard in production, you should put
-  # it behind authentication and allow only admins to access it.
-  # If your application does not have an admins-only section yet,
-  # you can use Plug.BasicAuth to set up some basic authentication
-  # as long as you are also using SSL (which you should anyway).
-  if Mix.env() in [:dev, :test] do
-    import Phoenix.LiveDashboard.Router
-
-    scope "/" do
-      pipe_through [:fetch_session, :protect_from_forgery]
-      live_dashboard "/dashboard", metrics: MyAppWeb.Telemetry
-    end
-  end
-end
diff --git lib/my_app_web/telemetry.ex b/projects/phoenix/1.5.7/binaryid-noecto-nohtml-nowebpack/lib/my_app_web/telemetry.ex
deleted file mode 100644
index 9f50f3d..0000000
--- lib/my_app_web/telemetry.ex
+++ /dev/null
@@ -1,48 +0,0 @@
-defmodule MyAppWeb.Telemetry do
-  use Supervisor
-  import Telemetry.Metrics
-
-  def start_link(arg) do
-    Supervisor.start_link(__MODULE__, arg, name: __MODULE__)
-  end
-
-  @impl true
-  def init(_arg) do
-    children = [
-      # Telemetry poller will execute the given period measurements
-      # every 10_000ms. Learn more here: https://hexdocs.pm/telemetry_metrics
-      {:telemetry_poller, measurements: periodic_measurements(), period: 10_000}
-      # Add reporters as children of your supervision tree.
-      # {Telemetry.Metrics.ConsoleReporter, metrics: metrics()}
-    ]
-
-    Supervisor.init(children, strategy: :one_for_one)
-  end
-
-  def metrics do
-    [
-      # Phoenix Metrics
-      summary("phoenix.endpoint.stop.duration",
-        unit: {:native, :millisecond}
-      ),
-      summary("phoenix.router_dispatch.stop.duration",
-        tags: [:route],
-        unit: {:native, :millisecond}
-      ),
-
-      # VM Metrics
-      summary("vm.memory.total", unit: {:byte, :kilobyte}),
-      summary("vm.total_run_queue_lengths.total"),
-      summary("vm.total_run_queue_lengths.cpu"),
-      summary("vm.total_run_queue_lengths.io")
-    ]
-  end
-
-  defp periodic_measurements do
-    [
-      # A module, function and arguments to be invoked periodically.
-      # This function must call :telemetry.execute/3 and a metric must be added above.
-      # {MyAppWeb, :count_users, []}
-    ]
-  end
-end
diff --git lib/my_app_web/views/error_helpers.ex b/projects/phoenix/1.5.7/binaryid-noecto-nohtml-nowebpack/lib/my_app_web/views/error_helpers.ex
deleted file mode 100644
index 1882f7f..0000000
--- lib/my_app_web/views/error_helpers.ex
+++ /dev/null
@@ -1,33 +0,0 @@
-defmodule MyAppWeb.ErrorHelpers do
-  @moduledoc """
-  Conveniences for translating and building error messages.
-  """
-
-  @doc """
-  Translates an error message using gettext.
-  """
-  def translate_error({msg, opts}) do
-    # When using gettext, we typically pass the strings we want
-    # to translate as a static argument:
-    #
-    #     # Translate "is invalid" in the "errors" domain
-    #     dgettext("errors", "is invalid")
-    #
-    #     # Translate the number of files with plural rules
-    #     dngettext("errors", "1 file", "%{count} files", count)
-    #
-    # Because the error messages we show in our forms and APIs
-    # are defined inside Ecto, we need to translate them dynamically.
-    # This requires us to call the Gettext module passing our gettext
-    # backend as first argument.
-    #
-    # Note we use the "errors" domain, which means translations
-    # should be written to the errors.po file. The :count option is
-    # set by Ecto and indicates we should also apply plural rules.
-    if count = opts[:count] do
-      Gettext.dngettext(MyAppWeb.Gettext, "errors", msg, msg, count, opts)
-    else
-      Gettext.dgettext(MyAppWeb.Gettext, "errors", msg, opts)
-    end
-  end
-end
diff --git lib/my_app_web/views/error_view.ex b/projects/phoenix/1.5.7/binaryid-noecto-nohtml-nowebpack/lib/my_app_web/views/error_view.ex
deleted file mode 100644
index 6bc5b14..0000000
--- lib/my_app_web/views/error_view.ex
+++ /dev/null
@@ -1,16 +0,0 @@
-defmodule MyAppWeb.ErrorView do
-  use MyAppWeb, :view
-
-  # If you want to customize a particular status code
-  # for a certain format, you may uncomment below.
-  # def render("500.json", _assigns) do
-  #   %{errors: %{detail: "Internal Server Error"}}
-  # end
-
-  # By default, Phoenix returns the status message from
-  # the template name. For example, "404.json" becomes
-  # "Not Found".
-  def template_not_found(template, _assigns) do
-    %{errors: %{detail: Phoenix.Controller.status_message_from_template(template)}}
-  end
-end
diff --git lib/my_app_web.ex b/projects/phoenix/1.5.7/binaryid-noecto-nohtml-nowebpack/lib/my_app_web.ex
deleted file mode 100644
index 7af6bb3..0000000
--- lib/my_app_web.ex
+++ /dev/null
@@ -1,78 +0,0 @@
-defmodule MyAppWeb do
-  @moduledoc """
-  The entrypoint for defining your web interface, such
-  as controllers, views, channels and so on.
-
-  This can be used in your application as:
-
-      use MyAppWeb, :controller
-      use MyAppWeb, :view
-
-  The definitions below will be executed for every view,
-  controller, etc, so keep them short and clean, focused
-  on imports, uses and aliases.
-
-  Do NOT define functions inside the quoted expressions
-  below. Instead, define any helper function in modules
-  and import those modules here.
-  """
-
-  def controller do
-    quote do
-      use Phoenix.Controller, namespace: MyAppWeb
-
-      import Plug.Conn
-      import MyAppWeb.Gettext
-      alias MyAppWeb.Router.Helpers, as: Routes
-    end
-  end
-
-  def view do
-    quote do
-      use Phoenix.View,
-        root: "lib/my_app_web/templates",
-        namespace: MyAppWeb
-
-      # Import convenience functions from controllers
-      import Phoenix.Controller,
-        only: [get_flash: 1, get_flash: 2, view_module: 1, view_template: 1]
-
-      # Include shared imports and aliases for views
-      unquote(view_helpers())
-    end
-  end
-
-  def router do
-    quote do
-      use Phoenix.Router
-
-      import Plug.Conn
-      import Phoenix.Controller
-    end
-  end
-
-  def channel do
-    quote do
-      use Phoenix.Channel
-      import MyAppWeb.Gettext
-    end
-  end
-
-  defp view_helpers do
-    quote do
-      # Import basic rendering functionality (render, render_layout, etc)
-      import Phoenix.View
-
-      import MyAppWeb.ErrorHelpers
-      import MyAppWeb.Gettext
-      alias MyAppWeb.Router.Helpers, as: Routes
-    end
-  end
-
-  @doc """
-  When used, dispatch to the appropriate controller/view/etc.
-  """
-  defmacro __using__(which) when is_atom(which) do
-    apply(__MODULE__, which, [])
-  end
-end
diff --git mix.exs mix.exs
index 6cd5bb3..169ac20 100644
--- mix.exs
+++ mix.exs
@@ -5,53 +5,24 @@ defmodule MyApp.MixProject do
     [
       app: :my_app,
       version: "0.1.0",
-      elixir: "~> 1.7",
-      elixirc_paths: elixirc_paths(Mix.env()),
-      compilers: [:phoenix, :gettext] ++ Mix.compilers(),
+      elixir: "~> 1.11",
       start_permanent: Mix.env() == :prod,
-      aliases: aliases(),
       deps: deps()
     ]
   end
 
-  # Configuration for the OTP application.
-  #
-  # Type `mix help compile.app` for more information.
+  # Run "mix help compile.app" to learn about applications.
   def application do
     [
-      mod: {MyApp.Application, []},
-      extra_applications: [:logger, :runtime_tools]
+      extra_applications: [:logger]
     ]
   end
 
-  # Specifies which paths to compile per environment.
-  defp elixirc_paths(:test), do: ["lib", "test/support"]
-  defp elixirc_paths(_), do: ["lib"]
-
-  # Specifies your project dependencies.
-  #
-  # Type `mix help deps` for examples and options.
+  # Run "mix help deps" to learn about dependencies.
   defp deps do
     [
-      {:phoenix, "~> 1.5.7"},
-      {:phoenix_live_dashboard, "~> 0.4"},
-      {:telemetry_metrics, "~> 0.4"},
-      {:telemetry_poller, "~> 0.4"},
-      {:gettext, "~> 0.11"},
-      {:jason, "~> 1.0"},
-      {:plug_cowboy, "~> 2.0"}
-    ]
-  end
-
-  # Aliases are shortcuts or tasks specific to the current project.
-  # For example, to install project dependencies and perform other setup tasks, run:
-  #
-  #     $ mix setup
-  #
-  # See the documentation for `Mix` for more info on aliases.
-  defp aliases do
-    [
-      setup: ["deps.get"]
+      # {:dep_from_hexpm, "~> 0.3.0"},
+      # {:dep_from_git, git: "https://github.com/elixir-lang/my_dep.git", tag: "0.1.0"}
     ]
   end
 end
diff --git priv/gettext/en/LC_MESSAGES/errors.po b/projects/phoenix/1.5.7/binaryid-noecto-nohtml-nowebpack/priv/gettext/en/LC_MESSAGES/errors.po
deleted file mode 100644
index cdec3a1..0000000
--- priv/gettext/en/LC_MESSAGES/errors.po
+++ /dev/null
@@ -1,11 +0,0 @@
-## `msgid`s in this file come from POT (.pot) files.
-##
-## Do not add, change, or remove `msgid`s manually here as
-## they're tied to the ones in the corresponding POT file
-## (with the same domain).
-##
-## Use `mix gettext.extract --merge` or `mix gettext.merge`
-## to merge POT files into PO files.
-msgid ""
-msgstr ""
-"Language: en\n"
diff --git priv/gettext/errors.pot b/projects/phoenix/1.5.7/binaryid-noecto-nohtml-nowebpack/priv/gettext/errors.pot
deleted file mode 100644
index d6f47fa..0000000
--- priv/gettext/errors.pot
+++ /dev/null
@@ -1,10 +0,0 @@
-## This is a PO Template file.
-##
-## `msgid`s here are often extracted from source code.
-## Add new translations manually only if they're dynamic
-## translations that can't be statically extracted.
-##
-## Run `mix gettext.extract` to bring this file up to
-## date. Leave `msgstr`s empty as changing them here has no
-## effect: edit them in PO (`.po`) files instead.
-
diff --git a/projects/elixir/1.11.3/base/test/my_app_test.exs test/my_app_test.exs
new file mode 100644
index 0000000..b775537
--- /dev/null
+++ test/my_app_test.exs
@@ -0,0 +1,8 @@
+defmodule MyAppTest do
+  use ExUnit.Case
+  doctest MyApp
+
+  test "greets the world" do
+    assert MyApp.hello() == :world
+  end
+end
diff --git test/my_app_web/views/error_view_test.exs b/projects/phoenix/1.5.7/binaryid-noecto-nohtml-nowebpack/test/my_app_web/views/error_view_test.exs
deleted file mode 100644
index 05a065b..0000000
--- test/my_app_web/views/error_view_test.exs
+++ /dev/null
@@ -1,15 +0,0 @@
-defmodule MyAppWeb.ErrorViewTest do
-  use MyAppWeb.ConnCase, async: true
-
-  # Bring render/3 and render_to_string/3 for testing custom views
-  import Phoenix.View
-
-  test "renders 404.json" do
-    assert render(MyAppWeb.ErrorView, "404.json", []) == %{errors: %{detail: "Not Found"}}
-  end
-
-  test "renders 500.json" do
-    assert render(MyAppWeb.ErrorView, "500.json", []) ==
-             %{errors: %{detail: "Internal Server Error"}}
-  end
-end
diff --git test/support/channel_case.ex b/projects/phoenix/1.5.7/binaryid-noecto-nohtml-nowebpack/test/support/channel_case.ex
deleted file mode 100644
index 2a1dfdb..0000000
--- test/support/channel_case.ex
+++ /dev/null
@@ -1,34 +0,0 @@
-defmodule MyAppWeb.ChannelCase do
-  @moduledoc """
-  This module defines the test case to be used by
-  channel tests.
-
-  Such tests rely on `Phoenix.ChannelTest` and also
-  import other functionality to make it easier
-  to build common data structures and query the data layer.
-
-  Finally, if the test case interacts with the database,
-  we enable the SQL sandbox, so changes done to the database
-  are reverted at the end of every test. If you are using
-  PostgreSQL, you can even run database tests asynchronously
-  by setting `use MyAppWeb.ChannelCase, async: true`, although
-  this option is not recommended for other databases.
-  """
-
-  use ExUnit.CaseTemplate
-
-  using do
-    quote do
-      # Import conveniences for testing with channels
-      import Phoenix.ChannelTest
-      import MyAppWeb.ChannelCase
-
-      # The default endpoint for testing
-      @endpoint MyAppWeb.Endpoint
-    end
-  end
-
-  setup _tags do
-    :ok
-  end
-end
diff --git test/support/conn_case.ex b/projects/phoenix/1.5.7/binaryid-noecto-nohtml-nowebpack/test/support/conn_case.ex
deleted file mode 100644
index ae658eb..0000000
--- test/support/conn_case.ex
+++ /dev/null
@@ -1,37 +0,0 @@
-defmodule MyAppWeb.ConnCase do
-  @moduledoc """
-  This module defines the test case to be used by
-  tests that require setting up a connection.
-
-  Such tests rely on `Phoenix.ConnTest` and also
-  import other functionality to make it easier
-  to build common data structures and query the data layer.
-
-  Finally, if the test case interacts with the database,
-  we enable the SQL sandbox, so changes done to the database
-  are reverted at the end of every test. If you are using
-  PostgreSQL, you can even run database tests asynchronously
-  by setting `use MyAppWeb.ConnCase, async: true`, although
-  this option is not recommended for other databases.
-  """
-
-  use ExUnit.CaseTemplate
-
-  using do
-    quote do
-      # Import conveniences for testing with connections
-      import Plug.Conn
-      import Phoenix.ConnTest
-      import MyAppWeb.ConnCase
-
-      alias MyAppWeb.Router.Helpers, as: Routes
-
-      # The default endpoint for testing
-      @endpoint MyAppWeb.Endpoint
-    end
-  end
-
-  setup _tags do
-    {:ok, conn: Phoenix.ConnTest.build_conn()}
-  end
-end
