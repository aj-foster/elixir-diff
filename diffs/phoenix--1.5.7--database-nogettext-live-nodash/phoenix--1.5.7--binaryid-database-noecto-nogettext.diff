diff --git .formatter.exs .formatter.exs
index 8a6391c..4761678 100644
--- .formatter.exs
+++ .formatter.exs
@@ -1,5 +1,4 @@
 [
-  import_deps: [:ecto, :phoenix],
-  inputs: ["*.{ex,exs}", "priv/*/seeds.exs", "{config,lib,test}/**/*.{ex,exs}"],
-  subdirectories: ["priv/*/migrations"]
+  import_deps: [:phoenix],
+  inputs: ["*.{ex,exs}", "{config,lib,test}/**/*.{ex,exs}"]
 ]
diff --git README.md README.md
index 8e838c3..0d08a74 100644
--- README.md
+++ README.md
@@ -3,7 +3,6 @@
 To start your Phoenix server:
 
   * Install dependencies with `mix deps.get`
-  * Create and migrate your database with `mix ecto.setup`
   * Install Node.js dependencies with `npm install` inside the `assets` directory
   * Start Phoenix endpoint with `mix phx.server`
 
diff --git assets/css/app.scss assets/css/app.scss
index f7775db..5c2c9b5 100644
--- assets/css/app.scss
+++ assets/css/app.scss
@@ -1,60 +1,5 @@
 /* This file is for your main application css. */
 @import "./phoenix.css";
-@import "../node_modules/nprogress/nprogress.css";
-
-/* LiveView specific classes for your customizations */
-.phx-no-feedback.invalid-feedback,
-.phx-no-feedback .invalid-feedback {
-  display: none;
-}
-
-.phx-click-loading {
-  opacity: 0.5;
-  transition: opacity 1s ease-out;
-}
-
-.phx-disconnected{
-  cursor: wait;
-}
-.phx-disconnected *{
-  pointer-events: none;
-}
-
-.phx-modal {
-  opacity: 1!important;
-  position: fixed;
-  z-index: 1;
-  left: 0;
-  top: 0;
-  width: 100%;
-  height: 100%;
-  overflow: auto;
-  background-color: rgb(0,0,0);
-  background-color: rgba(0,0,0,0.4);
-}
-
-.phx-modal-content {
-  background-color: #fefefe;
-  margin: 15% auto;
-  padding: 20px;
-  border: 1px solid #888;
-  width: 80%;
-}
-
-.phx-modal-close {
-  color: #aaa;
-  float: right;
-  font-size: 28px;
-  font-weight: bold;
-}
-
-.phx-modal-close:hover,
-.phx-modal-close:focus {
-  color: black;
-  text-decoration: none;
-  cursor: pointer;
-}
-
 
 /* Alerts and form errors */
 .alert {
diff --git assets/js/app.js assets/js/app.js
index dfc0f97..af00596 100644
--- assets/js/app.js
+++ assets/js/app.js
@@ -13,23 +13,3 @@ import "../css/app.scss"
 //     import socket from "./socket"
 //
 import "phoenix_html"
-import {Socket} from "phoenix"
-import NProgress from "nprogress"
-import {LiveSocket} from "phoenix_live_view"
-
-let csrfToken = document.querySelector("meta[name='csrf-token']").getAttribute("content")
-let liveSocket = new LiveSocket("/live", Socket, {params: {_csrf_token: csrfToken}})
-
-// Show progress bar on live navigation and form submits
-window.addEventListener("phx:page-loading-start", info => NProgress.start())
-window.addEventListener("phx:page-loading-stop", info => NProgress.done())
-
-// connect if there are any LiveViews on the page
-liveSocket.connect()
-
-// expose liveSocket on window for web console debug logs and latency simulation:
-// >> liveSocket.enableDebug()
-// >> liveSocket.enableLatencySim(1000)  // enabled for duration of browser session
-// >> liveSocket.disableLatencySim()
-window.liveSocket = liveSocket
-
diff --git a/projects/phoenix/1.5.7/binaryid-database-noecto-nogettext/assets/js/socket.js assets/js/socket.js
new file mode 100644
index 0000000..09929ab
--- /dev/null
+++ assets/js/socket.js
@@ -0,0 +1,63 @@
+// NOTE: The contents of this file will only be executed if
+// you uncomment its entry in "assets/js/app.js".
+
+// To use Phoenix channels, the first step is to import Socket,
+// and connect at the socket path in "lib/web/endpoint.ex".
+//
+// Pass the token on params as below. Or remove it
+// from the params if you are not using authentication.
+import {Socket} from "phoenix"
+
+let socket = new Socket("/socket", {params: {token: window.userToken}})
+
+// When you connect, you'll often need to authenticate the client.
+// For example, imagine you have an authentication plug, `MyAuth`,
+// which authenticates the session and assigns a `:current_user`.
+// If the current user exists you can assign the user's token in
+// the connection for use in the layout.
+//
+// In your "lib/web/router.ex":
+//
+//     pipeline :browser do
+//       ...
+//       plug MyAuth
+//       plug :put_user_token
+//     end
+//
+//     defp put_user_token(conn, _) do
+//       if current_user = conn.assigns[:current_user] do
+//         token = Phoenix.Token.sign(conn, "user socket", current_user.id)
+//         assign(conn, :user_token, token)
+//       else
+//         conn
+//       end
+//     end
+//
+// Now you need to pass this token to JavaScript. You can do so
+// inside a script tag in "lib/web/templates/layout/app.html.eex":
+//
+//     <script>window.userToken = "<%= assigns[:user_token] %>";</script>
+//
+// You will need to verify the user token in the "connect/3" function
+// in "lib/web/channels/user_socket.ex":
+//
+//     def connect(%{"token" => token}, socket, _connect_info) do
+//       # max_age: 1209600 is equivalent to two weeks in seconds
+//       case Phoenix.Token.verify(socket, "user socket", token, max_age: 1209600) do
+//         {:ok, user_id} ->
+//           {:ok, assign(socket, :user, user_id)}
+//         {:error, reason} ->
+//           :error
+//       end
+//     end
+//
+// Finally, connect to the socket:
+socket.connect()
+
+// Now that you are connected, you can join channels with a topic:
+let channel = socket.channel("topic:subtopic", {})
+channel.join()
+  .receive("ok", resp => { console.log("Joined successfully", resp) })
+  .receive("error", resp => { console.log("Unable to join", resp) })
+
+export default socket
diff --git assets/package.json assets/package.json
index aa41dee..170b4d5 100644
--- assets/package.json
+++ assets/package.json
@@ -8,9 +8,7 @@
   },
   "dependencies": {
     "phoenix": "file:../deps/phoenix",
-    "phoenix_html": "file:../deps/phoenix_html",
-    "phoenix_live_view": "file:../deps/phoenix_live_view",
-    "nprogress": "^0.2.0"
+    "phoenix_html": "file:../deps/phoenix_html"
   },
   "devDependencies": {
     "@babel/core": "^7.0.0",
diff --git config/config.exs config/config.exs
index 1e1fcef..4bf1199 100644
--- config/config.exs
+++ config/config.exs
@@ -8,7 +8,7 @@
 use Mix.Config
 
 config :my_app,
-  ecto_repos: [MyApp.Repo]
+  generators: [binary_id: true]
 
 # Configures the endpoint
 config :my_app, MyAppWeb.Endpoint,
diff --git config/dev.exs config/dev.exs
index 2d672d1..0f604b6 100644
--- config/dev.exs
+++ config/dev.exs
@@ -1,14 +1,5 @@
 use Mix.Config
 
-# Configure your database
-config :my_app, MyApp.Repo,
-  username: "root",
-  password: "",
-  database: "my_app_dev",
-  hostname: "localhost",
-  show_sensitive_data_on_connection_error: true,
-  pool_size: 10
-
 # For development, we disable any cache and enable
 # debugging and code reloading.
 #
diff --git config/prod.secret.exs config/prod.secret.exs
index 968473e..3568fa4 100644
--- config/prod.secret.exs
+++ config/prod.secret.exs
@@ -4,18 +4,6 @@
 # remember to add this file to your .gitignore.
 use Mix.Config
 
-database_url =
-  System.get_env("DATABASE_URL") ||
-    raise """
-    environment variable DATABASE_URL is missing.
-    For example: ecto://USER:PASS@HOST/DATABASE
-    """
-
-config :my_app, MyApp.Repo,
-  # ssl: true,
-  url: database_url,
-  pool_size: String.to_integer(System.get_env("POOL_SIZE") || "10")
-
 secret_key_base =
   System.get_env("SECRET_KEY_BASE") ||
     raise """
diff --git config/test.exs config/test.exs
index e4a57c1..d363390 100644
--- config/test.exs
+++ config/test.exs
@@ -1,17 +1,5 @@
 use Mix.Config
 
-# Configure your database
-#
-# The MIX_TEST_PARTITION environment variable can be used
-# to provide built-in test partitioning in CI environment.
-# Run `mix help test` for more information.
-config :my_app, MyApp.Repo,
-  username: "root",
-  password: "",
-  database: "my_app_test#{System.get_env("MIX_TEST_PARTITION")}",
-  hostname: "localhost",
-  pool: Ecto.Adapters.SQL.Sandbox
-
 # We don't run a server during test. If one is required,
 # you can enable the server option below.
 config :my_app, MyAppWeb.Endpoint,
diff --git lib/my_app/application.ex lib/my_app/application.ex
index fd03945..9ecbdae 100644
--- lib/my_app/application.ex
+++ lib/my_app/application.ex
@@ -7,8 +7,6 @@ defmodule MyApp.Application do
 
   def start(_type, _args) do
     children = [
-      # Start the Ecto repository
-      MyApp.Repo,
       # Start the Telemetry supervisor
       MyAppWeb.Telemetry,
       # Start the PubSub system
diff --git lib/my_app/repo.ex b/projects/phoenix/1.5.7/database-nogettext-live-nodash/lib/my_app/repo.ex
deleted file mode 100644
index c623d89..0000000
--- lib/my_app/repo.ex
+++ /dev/null
@@ -1,5 +0,0 @@
-defmodule MyApp.Repo do
-  use Ecto.Repo,
-    otp_app: :my_app,
-    adapter: Ecto.Adapters.MyXQL
-end
diff --git a/projects/phoenix/1.5.7/binaryid-database-noecto-nogettext/lib/my_app_web/controllers/page_controller.ex lib/my_app_web/controllers/page_controller.ex
new file mode 100644
index 0000000..9628848
--- /dev/null
+++ lib/my_app_web/controllers/page_controller.ex
@@ -0,0 +1,7 @@
+defmodule MyAppWeb.PageController do
+  use MyAppWeb, :controller
+
+  def index(conn, _params) do
+    render(conn, "index.html")
+  end
+end
diff --git lib/my_app_web/endpoint.ex lib/my_app_web/endpoint.ex
index 505334a..c620fdb 100644
--- lib/my_app_web/endpoint.ex
+++ lib/my_app_web/endpoint.ex
@@ -32,9 +32,12 @@ defmodule MyAppWeb.Endpoint do
     socket "/phoenix/live_reload/socket", Phoenix.LiveReloader.Socket
     plug Phoenix.LiveReloader
     plug Phoenix.CodeReloader
-    plug Phoenix.Ecto.CheckRepoStatus, otp_app: :my_app
   end
 
+  plug Phoenix.LiveDashboard.RequestLogger,
+    param_key: "request_logger",
+    cookie_key: "request_logger"
+
   plug Plug.RequestId
   plug Plug.Telemetry, event_prefix: [:phoenix, :endpoint]
 
diff --git lib/my_app_web/live/page_live.ex b/projects/phoenix/1.5.7/database-nogettext-live-nodash/lib/my_app_web/live/page_live.ex
deleted file mode 100644
index 1d75b57..0000000
--- lib/my_app_web/live/page_live.ex
+++ /dev/null
@@ -1,39 +0,0 @@
-defmodule MyAppWeb.PageLive do
-  use MyAppWeb, :live_view
-
-  @impl true
-  def mount(_params, _session, socket) do
-    {:ok, assign(socket, query: "", results: %{})}
-  end
-
-  @impl true
-  def handle_event("suggest", %{"q" => query}, socket) do
-    {:noreply, assign(socket, results: search(query), query: query)}
-  end
-
-  @impl true
-  def handle_event("search", %{"q" => query}, socket) do
-    case search(query) do
-      %{^query => vsn} ->
-        {:noreply, redirect(socket, external: "https://hexdocs.pm/#{query}/#{vsn}")}
-
-      _ ->
-        {:noreply,
-         socket
-         |> put_flash(:error, "No dependencies found matching \"#{query}\"")
-         |> assign(results: %{}, query: query)}
-    end
-  end
-
-  defp search(query) do
-    if not MyAppWeb.Endpoint.config(:code_reloader) do
-      raise "action disabled when not in development"
-    end
-
-    for {app, desc, vsn} <- Application.started_applications(),
-        app = to_string(app),
-        String.starts_with?(app, query) and not List.starts_with?(desc, ~c"ERTS"),
-        into: %{},
-        do: {app, vsn}
-  end
-end
diff --git lib/my_app_web/router.ex lib/my_app_web/router.ex
index d7a49da..b65151f 100644
--- lib/my_app_web/router.ex
+++ lib/my_app_web/router.ex
@@ -4,8 +4,7 @@ defmodule MyAppWeb.Router do
   pipeline :browser do
     plug :accepts, ["html"]
     plug :fetch_session
-    plug :fetch_live_flash
-    plug :put_root_layout, {MyAppWeb.LayoutView, :root}
+    plug :fetch_flash
     plug :protect_from_forgery
     plug :put_secure_browser_headers
   end
@@ -17,11 +16,27 @@ defmodule MyAppWeb.Router do
   scope "/", MyAppWeb do
     pipe_through :browser
 
-    live "/", PageLive, :index
+    get "/", PageController, :index
   end
 
   # Other scopes may use custom stacks.
   # scope "/api", MyAppWeb do
   #   pipe_through :api
   # end
+
+  # Enables LiveDashboard only for development
+  #
+  # If you want to use the LiveDashboard in production, you should put
+  # it behind authentication and allow only admins to access it.
+  # If your application does not have an admins-only section yet,
+  # you can use Plug.BasicAuth to set up some basic authentication
+  # as long as you are also using SSL (which you should anyway).
+  if Mix.env() in [:dev, :test] do
+    import Phoenix.LiveDashboard.Router
+
+    scope "/" do
+      pipe_through :browser
+      live_dashboard "/dashboard", metrics: MyAppWeb.Telemetry
+    end
+  end
 end
diff --git lib/my_app_web/telemetry.ex lib/my_app_web/telemetry.ex
index 2c9c8ae..9f50f3d 100644
--- lib/my_app_web/telemetry.ex
+++ lib/my_app_web/telemetry.ex
@@ -30,13 +30,6 @@ defmodule MyAppWeb.Telemetry do
         unit: {:native, :millisecond}
       ),
 
-      # Database Metrics
-      summary("my_app.repo.query.total_time", unit: {:native, :millisecond}),
-      summary("my_app.repo.query.decode_time", unit: {:native, :millisecond}),
-      summary("my_app.repo.query.query_time", unit: {:native, :millisecond}),
-      summary("my_app.repo.query.queue_time", unit: {:native, :millisecond}),
-      summary("my_app.repo.query.idle_time", unit: {:native, :millisecond}),
-
       # VM Metrics
       summary("vm.memory.total", unit: {:byte, :kilobyte}),
       summary("vm.total_run_queue_lengths.total"),
diff --git lib/my_app_web/templates/layout/app.html.eex lib/my_app_web/templates/layout/app.html.eex
index 09ffdad..83d4670 100644
--- lib/my_app_web/templates/layout/app.html.eex
+++ lib/my_app_web/templates/layout/app.html.eex
@@ -1,5 +1,33 @@
-<main role="main" class="container">
-  <p class="alert alert-info" role="alert"><%= get_flash(@conn, :info) %></p>
-  <p class="alert alert-danger" role="alert"><%= get_flash(@conn, :error) %></p>
-  <%= @inner_content %>
-</main>
+<!DOCTYPE html>
+<html lang="en">
+  <head>
+    <meta charset="utf-8"/>
+    <meta http-equiv="X-UA-Compatible" content="IE=edge"/>
+    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
+    <title>MyApp · Phoenix Framework</title>
+    <link rel="stylesheet" href="<%= Routes.static_path(@conn, "/css/app.css") %>"/>
+    <script defer type="text/javascript" src="<%= Routes.static_path(@conn, "/js/app.js") %>"></script>
+  </head>
+  <body>
+    <header>
+      <section class="container">
+        <nav role="navigation">
+          <ul>
+            <li><a href="https://hexdocs.pm/phoenix/overview.html">Get Started</a></li>
+            <%= if function_exported?(Routes, :live_dashboard_path, 2) do %>
+              <li><%= link "LiveDashboard", to: Routes.live_dashboard_path(@conn, :home) %></li>
+            <% end %>
+          </ul>
+        </nav>
+        <a href="https://phoenixframework.org/" class="phx-logo">
+          <img src="<%= Routes.static_path(@conn, "/images/phoenix.png") %>" alt="Phoenix Framework Logo"/>
+        </a>
+      </section>
+    </header>
+    <main role="main" class="container">
+      <p class="alert alert-info" role="alert"><%= get_flash(@conn, :info) %></p>
+      <p class="alert alert-danger" role="alert"><%= get_flash(@conn, :error) %></p>
+      <%= @inner_content %>
+    </main>
+  </body>
+</html>
diff --git lib/my_app_web/templates/layout/live.html.leex b/projects/phoenix/1.5.7/database-nogettext-live-nodash/lib/my_app_web/templates/layout/live.html.leex
deleted file mode 100644
index 8dcded5..0000000
--- lib/my_app_web/templates/layout/live.html.leex
+++ /dev/null
@@ -1,11 +0,0 @@
-<main role="main" class="container">
-  <p class="alert alert-info" role="alert"
-    phx-click="lv:clear-flash"
-    phx-value-key="info"><%= live_flash(@flash, :info) %></p>
-
-  <p class="alert alert-danger" role="alert"
-    phx-click="lv:clear-flash"
-    phx-value-key="error"><%= live_flash(@flash, :error) %></p>
-
-  <%= @inner_content %>
-</main>
diff --git lib/my_app_web/templates/layout/root.html.leex b/projects/phoenix/1.5.7/database-nogettext-live-nodash/lib/my_app_web/templates/layout/root.html.leex
deleted file mode 100644
index d3b97a7..0000000
--- lib/my_app_web/templates/layout/root.html.leex
+++ /dev/null
@@ -1,28 +0,0 @@
-<!DOCTYPE html>
-<html lang="en">
-  <head>
-    <meta charset="utf-8"/>
-    <meta http-equiv="X-UA-Compatible" content="IE=edge"/>
-    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
-    <%= csrf_meta_tag() %>
-    <%= live_title_tag assigns[:page_title] || "MyApp", suffix: " · Phoenix Framework" %>
-    <link phx-track-static rel="stylesheet" href="<%= Routes.static_path(@conn, "/css/app.css") %>"/>
-    <script defer phx-track-static type="text/javascript" src="<%= Routes.static_path(@conn, "/js/app.js") %>"></script>
-  </head>
-  <body>
-    <header>
-      <section class="container">
-        <nav role="navigation">
-          <ul>
-            <li><a href="https://hexdocs.pm/phoenix/overview.html">Get Started</a></li>
-            
-          </ul>
-        </nav>
-        <a href="https://phoenixframework.org/" class="phx-logo">
-          <img src="<%= Routes.static_path(@conn, "/images/phoenix.png") %>" alt="Phoenix Framework Logo"/>
-        </a>
-      </section>
-    </header>
-    <%= @inner_content %>
-  </body>
-</html>
diff --git lib/my_app_web/live/page_live.html.leex lib/my_app_web/templates/page/index.html.eex
similarity index 71%
rename from projects/phoenix/1.5.7/database-nogettext-live-nodash/lib/my_app_web/live/page_live.html.leex
rename to projects/phoenix/1.5.7/binaryid-database-noecto-nogettext/lib/my_app_web/templates/page/index.html.eex
index f116c9c..479197d 100644
--- lib/my_app_web/live/page_live.html.leex
+++ lib/my_app_web/templates/page/index.html.eex
@@ -1,16 +1,6 @@
 <section class="phx-hero">
   <h1>Welcome to Phoenix!</h1>
   <p>Peace of mind from prototype to production</p>
-
-  <form phx-change="suggest" phx-submit="search">
-    <input type="text" name="q" value="<%= @query %>" placeholder="Live dependency search" list="results" autocomplete="off"/>
-    <datalist id="results">
-      <%= for {app, _vsn} <- @results do %>
-        <option value="<%= app %>"><%= app %></option>
-      <% end %>
-    </datalist>
-    <button type="submit" phx-disable-with="Searching...">Go to Hexdocs</button>
-  </form>
 </section>
 
 <section class="row">
diff --git a/projects/phoenix/1.5.7/binaryid-database-noecto-nogettext/lib/my_app_web/views/page_view.ex lib/my_app_web/views/page_view.ex
new file mode 100644
index 0000000..3385fda
--- /dev/null
+++ lib/my_app_web/views/page_view.ex
@@ -0,0 +1,3 @@
+defmodule MyAppWeb.PageView do
+  use MyAppWeb, :view
+end
diff --git lib/my_app_web.ex lib/my_app_web.ex
index f3f5856..7a894e8 100644
--- lib/my_app_web.ex
+++ lib/my_app_web.ex
@@ -41,30 +41,12 @@ defmodule MyAppWeb do
     end
   end
 
-  def live_view do
-    quote do
-      use Phoenix.LiveView,
-        layout: {MyAppWeb.LayoutView, "live.html"}
-
-      unquote(view_helpers())
-    end
-  end
-
-  def live_component do
-    quote do
-      use Phoenix.LiveComponent
-
-      unquote(view_helpers())
-    end
-  end
-
   def router do
     quote do
       use Phoenix.Router
 
       import Plug.Conn
       import Phoenix.Controller
-      import Phoenix.LiveView.Router
     end
   end
 
@@ -79,9 +61,6 @@ defmodule MyAppWeb do
       # Use all HTML functionality (forms, tags, etc)
       use Phoenix.HTML
 
-      # Import LiveView helpers (live_render, live_component, live_patch, etc)
-      import Phoenix.LiveView.Helpers
-
       # Import basic rendering functionality (render, render_layout, etc)
       import Phoenix.View
 
diff --git mix.exs mix.exs
index 19b8913..0620e75 100644
--- mix.exs
+++ mix.exs
@@ -34,13 +34,9 @@ defmodule MyApp.MixProject do
   defp deps do
     [
       {:phoenix, "~> 1.5.7"},
-      {:phoenix_ecto, "~> 4.1"},
-      {:ecto_sql, "~> 3.4"},
-      {:myxql, ">= 0.0.0"},
-      {:phoenix_live_view, "~> 0.15.0"},
-      {:floki, ">= 0.27.0", only: :test},
       {:phoenix_html, "~> 2.11"},
       {:phoenix_live_reload, "~> 1.2", only: :dev},
+      {:phoenix_live_dashboard, "~> 0.4"},
       {:telemetry_metrics, "~> 0.4"},
       {:telemetry_poller, "~> 0.4"},
       {:jason, "~> 1.0"},
@@ -56,10 +52,7 @@ defmodule MyApp.MixProject do
   # See the documentation for `Mix` for more info on aliases.
   defp aliases do
     [
-      setup: ["deps.get", "ecto.setup", "cmd npm install --prefix assets"],
-      "ecto.setup": ["ecto.create", "ecto.migrate", "run priv/repo/seeds.exs"],
-      "ecto.reset": ["ecto.drop", "ecto.setup"],
-      test: ["ecto.create --quiet", "ecto.migrate --quiet", "test"]
+      setup: ["deps.get", "cmd npm install --prefix assets"]
     ]
   end
 end
diff --git priv/repo/migrations/.formatter.exs b/projects/phoenix/1.5.7/database-nogettext-live-nodash/priv/repo/migrations/.formatter.exs
deleted file mode 100644
index 49f9151..0000000
--- priv/repo/migrations/.formatter.exs
+++ /dev/null
@@ -1,4 +0,0 @@
-[
-  import_deps: [:ecto_sql],
-  inputs: ["*.exs"]
-]
diff --git priv/repo/seeds.exs b/projects/phoenix/1.5.7/database-nogettext-live-nodash/priv/repo/seeds.exs
deleted file mode 100644
index e4ba004..0000000
--- priv/repo/seeds.exs
+++ /dev/null
@@ -1,11 +0,0 @@
-# Script for populating the database. You can run it as:
-#
-#     mix run priv/repo/seeds.exs
-#
-# Inside the script, you can read and write to any of your
-# repositories directly:
-#
-#     MyApp.Repo.insert!(%MyApp.SomeSchema{})
-#
-# We recommend using the bang functions (`insert!`, `update!`
-# and so on) as they will fail if something goes wrong.
diff --git a/projects/phoenix/1.5.7/binaryid-database-noecto-nogettext/test/my_app_web/controllers/page_controller_test.exs test/my_app_web/controllers/page_controller_test.exs
new file mode 100644
index 0000000..5c16b7f
--- /dev/null
+++ test/my_app_web/controllers/page_controller_test.exs
@@ -0,0 +1,8 @@
+defmodule MyAppWeb.PageControllerTest do
+  use MyAppWeb.ConnCase
+
+  test "GET /", %{conn: conn} do
+    conn = get(conn, "/")
+    assert html_response(conn, 200) =~ "Welcome to Phoenix!"
+  end
+end
diff --git test/my_app_web/live/page_live_test.exs b/projects/phoenix/1.5.7/database-nogettext-live-nodash/test/my_app_web/live/page_live_test.exs
deleted file mode 100644
index 7d971b0..0000000
--- test/my_app_web/live/page_live_test.exs
+++ /dev/null
@@ -1,11 +0,0 @@
-defmodule MyAppWeb.PageLiveTest do
-  use MyAppWeb.ConnCase
-
-  import Phoenix.LiveViewTest
-
-  test "disconnected and connected render", %{conn: conn} do
-    {:ok, page_live, disconnected_html} = live(conn, "/")
-    assert disconnected_html =~ "Welcome to Phoenix!"
-    assert render(page_live) =~ "Welcome to Phoenix!"
-  end
-end
diff --git a/projects/phoenix/1.5.7/binaryid-database-noecto-nogettext/test/my_app_web/views/page_view_test.exs test/my_app_web/views/page_view_test.exs
new file mode 100644
index 0000000..82612dc
--- /dev/null
+++ test/my_app_web/views/page_view_test.exs
@@ -0,0 +1,3 @@
+defmodule MyAppWeb.PageViewTest do
+  use MyAppWeb.ConnCase, async: true
+end
diff --git test/support/channel_case.ex test/support/channel_case.ex
index 831b300..2a1dfdb 100644
--- test/support/channel_case.ex
+++ test/support/channel_case.ex
@@ -28,13 +28,7 @@ defmodule MyAppWeb.ChannelCase do
     end
   end
 
-  setup tags do
-    :ok = Ecto.Adapters.SQL.Sandbox.checkout(MyApp.Repo)
-
-    unless tags[:async] do
-      Ecto.Adapters.SQL.Sandbox.mode(MyApp.Repo, {:shared, self()})
-    end
-
+  setup _tags do
     :ok
   end
 end
diff --git test/support/conn_case.ex test/support/conn_case.ex
index a1d99dc..ae658eb 100644
--- test/support/conn_case.ex
+++ test/support/conn_case.ex
@@ -31,13 +31,7 @@ defmodule MyAppWeb.ConnCase do
     end
   end
 
-  setup tags do
-    :ok = Ecto.Adapters.SQL.Sandbox.checkout(MyApp.Repo)
-
-    unless tags[:async] do
-      Ecto.Adapters.SQL.Sandbox.mode(MyApp.Repo, {:shared, self()})
-    end
-
+  setup _tags do
     {:ok, conn: Phoenix.ConnTest.build_conn()}
   end
 end
diff --git test/support/data_case.ex b/projects/phoenix/1.5.7/database-nogettext-live-nodash/test/support/data_case.ex
deleted file mode 100644
index 774d271..0000000
--- test/support/data_case.ex
+++ /dev/null
@@ -1,55 +0,0 @@
-defmodule MyApp.DataCase do
-  @moduledoc """
-  This module defines the setup for tests requiring
-  access to the application's data layer.
-
-  You may define functions here to be used as helpers in
-  your tests.
-
-  Finally, if the test case interacts with the database,
-  we enable the SQL sandbox, so changes done to the database
-  are reverted at the end of every test. If you are using
-  PostgreSQL, you can even run database tests asynchronously
-  by setting `use MyApp.DataCase, async: true`, although
-  this option is not recommended for other databases.
-  """
-
-  use ExUnit.CaseTemplate
-
-  using do
-    quote do
-      alias MyApp.Repo
-
-      import Ecto
-      import Ecto.Changeset
-      import Ecto.Query
-      import MyApp.DataCase
-    end
-  end
-
-  setup tags do
-    :ok = Ecto.Adapters.SQL.Sandbox.checkout(MyApp.Repo)
-
-    unless tags[:async] do
-      Ecto.Adapters.SQL.Sandbox.mode(MyApp.Repo, {:shared, self()})
-    end
-
-    :ok
-  end
-
-  @doc """
-  A helper that transforms changeset errors into a map of messages.
-
-      assert {:error, changeset} = Accounts.create_user(%{password: "short"})
-      assert "password is too short" in errors_on(changeset).password
-      assert %{password: ["password is too short"]} = errors_on(changeset)
-
-  """
-  def errors_on(changeset) do
-    Ecto.Changeset.traverse_errors(changeset, fn {message, opts} ->
-      Regex.replace(~r"%{(\w+)}", message, fn _, key ->
-        opts |> Keyword.get(String.to_existing_atom(key), key) |> to_string()
-      end)
-    end)
-  end
-end
diff --git test/test_helper.exs test/test_helper.exs
index 0491a89..869559e 100644
--- test/test_helper.exs
+++ test/test_helper.exs
@@ -1,2 +1 @@
 ExUnit.start()
-Ecto.Adapters.SQL.Sandbox.mode(MyApp.Repo, :manual)
