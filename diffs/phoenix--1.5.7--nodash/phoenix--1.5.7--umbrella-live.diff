diff --git .formatter.exs .formatter.exs
index 8a6391c..6915976 100644
--- .formatter.exs
+++ .formatter.exs
@@ -1,5 +1,4 @@
 [
-  import_deps: [:ecto, :phoenix],
-  inputs: ["*.{ex,exs}", "priv/*/seeds.exs", "{config,lib,test}/**/*.{ex,exs}"],
-  subdirectories: ["priv/*/migrations"]
+  inputs: ["mix.exs", "config/*.exs"],
+  subdirectories: ["apps/*"]
 ]
diff --git .gitignore .gitignore
index 8b3a72e..12179ea 100644
--- .gitignore
+++ .gitignore
@@ -18,17 +18,3 @@ erl_crash.dump
 
 # Also ignore archive artifacts (built via "mix archive.build").
 *.ez
-
-# Ignore package tarball (built via "mix hex.build").
-my_app-*.tar
-
-# If NPM crashes, it generates a log, let's ignore it too.
-npm-debug.log
-
-# The directory NPM downloads your dependencies sources to.
-/assets/node_modules/
-
-# Since we are building assets from assets/,
-# we ignore priv/static. You may want to comment
-# this depending on your deployment strategy.
-/priv/static/
diff --git README.md README.md
index 8e838c3..729adca 100644
--- README.md
+++ README.md
@@ -1,20 +1 @@
-# MyApp
-
-To start your Phoenix server:
-
-  * Install dependencies with `mix deps.get`
-  * Create and migrate your database with `mix ecto.setup`
-  * Install Node.js dependencies with `npm install` inside the `assets` directory
-  * Start Phoenix endpoint with `mix phx.server`
-
-Now you can visit [`localhost:4000`](http://localhost:4000) from your browser.
-
-Ready to run in production? Please [check our deployment guides](https://hexdocs.pm/phoenix/deployment.html).
-
-## Learn more
-
-  * Official website: https://www.phoenixframework.org/
-  * Guides: https://hexdocs.pm/phoenix/overview.html
-  * Docs: https://hexdocs.pm/phoenix
-  * Forum: https://elixirforum.com/c/phoenix-forum
-  * Source: https://github.com/phoenixframework/phoenix
+# MyApp.Umbrella
diff --git a/projects/phoenix/1.5.7/umbrella-live/apps/my_app/.formatter.exs apps/my_app/.formatter.exs
new file mode 100644
index 0000000..db86148
--- /dev/null
+++ apps/my_app/.formatter.exs
@@ -0,0 +1,5 @@
+[
+  import_deps: [:ecto],
+  inputs: ["*.{ex,exs}", "priv/*/seeds.exs", "{config,lib,test}/**/*.{ex,exs}"],
+  subdirectories: ["priv/*/migrations"]
+]
diff --git a/projects/phoenix/1.5.7/umbrella-live/apps/my_app/.gitignore apps/my_app/.gitignore
new file mode 100644
index 0000000..992da6d
--- /dev/null
+++ apps/my_app/.gitignore
@@ -0,0 +1,23 @@
+# The directory Mix will write compiled artifacts to.
+/_build/
+
+# If you run "mix test --cover", coverage assets end up here.
+/cover/
+
+# The directory Mix downloads your dependencies sources to.
+/deps/
+
+# Where 3rd-party dependencies like ExDoc output generated docs.
+/doc/
+
+# Ignore .fetch files in case you like to edit your project deps locally.
+/.fetch
+
+# If the VM crashes, it generates a dump, let's ignore it too.
+erl_crash.dump
+
+# Also ignore archive artifacts (built via "mix archive.build").
+*.ez
+
+# Ignore package tarball (built via "mix hex.build").
+my_app-*.tar
diff --git a/projects/phoenix/1.5.7/umbrella-live/apps/my_app/README.md apps/my_app/README.md
new file mode 100644
index 0000000..4a0521a
--- /dev/null
+++ apps/my_app/README.md
@@ -0,0 +1,3 @@
+# MyApp
+
+**TODO: Add description**
diff --git a/projects/phoenix/1.5.7/umbrella-live/apps/my_app/lib/my_app/application.ex apps/my_app/lib/my_app/application.ex
new file mode 100644
index 0000000..d2aa950
--- /dev/null
+++ apps/my_app/lib/my_app/application.ex
@@ -0,0 +1,20 @@
+defmodule MyApp.Application do
+  # See https://hexdocs.pm/elixir/Application.html
+  # for more information on OTP Applications
+  @moduledoc false
+
+  use Application
+
+  def start(_type, _args) do
+    children = [
+      # Start the Ecto repository
+      MyApp.Repo,
+      # Start the PubSub system
+      {Phoenix.PubSub, name: MyApp.PubSub}
+      # Start a worker by calling: MyApp.Worker.start_link(arg)
+      # {MyApp.Worker, arg}
+    ]
+
+    Supervisor.start_link(children, strategy: :one_for_one, name: MyApp.Supervisor)
+  end
+end
diff --git lib/my_app/repo.ex apps/my_app/lib/my_app/repo.ex
similarity index 100%
rename from projects/phoenix/1.5.7/nodash/lib/my_app/repo.ex
rename to projects/phoenix/1.5.7/umbrella-live/apps/my_app/lib/my_app/repo.ex
diff --git lib/my_app.ex apps/my_app/lib/my_app.ex
similarity index 100%
rename from projects/phoenix/1.5.7/nodash/lib/my_app.ex
rename to projects/phoenix/1.5.7/umbrella-live/apps/my_app/lib/my_app.ex
diff --git a/projects/phoenix/1.5.7/umbrella-live/apps/my_app/mix.exs apps/my_app/mix.exs
new file mode 100644
index 0000000..8cbc8b8
--- /dev/null
+++ apps/my_app/mix.exs
@@ -0,0 +1,57 @@
+defmodule MyApp.MixProject do
+  use Mix.Project
+
+  def project do
+    [
+      app: :my_app,
+      version: "0.1.0",
+      build_path: "../../_build",
+      config_path: "../../config/config.exs",
+      deps_path: "../../deps",
+      lockfile: "../../mix.lock",
+      elixir: "~> 1.7",
+      elixirc_paths: elixirc_paths(Mix.env()),
+      start_permanent: Mix.env() == :prod,
+      aliases: aliases(),
+      deps: deps()
+    ]
+  end
+
+  # Configuration for the OTP application.
+  #
+  # Type `mix help compile.app` for more information.
+  def application do
+    [
+      mod: {MyApp.Application, []},
+      extra_applications: [:logger, :runtime_tools]
+    ]
+  end
+
+  # Specifies which paths to compile per environment.
+  defp elixirc_paths(:test), do: ["lib", "test/support"]
+  defp elixirc_paths(_), do: ["lib"]
+
+  # Specifies your project dependencies.
+  #
+  # Type `mix help deps` for examples and options.
+  defp deps do
+    [
+      {:phoenix_pubsub, "~> 2.0"},
+      {:ecto_sql, "~> 3.4"},
+      {:postgrex, ">= 0.0.0"},
+      {:jason, "~> 1.0"}
+    ]
+  end
+
+  # Aliases are shortcuts or tasks specific to the current project.
+  #
+  # See the documentation for `Mix` for more info on aliases.
+  defp aliases do
+    [
+      setup: ["deps.get", "ecto.setup"],
+      "ecto.setup": ["ecto.create", "ecto.migrate", "run priv/repo/seeds.exs"],
+      "ecto.reset": ["ecto.drop", "ecto.setup"],
+      test: ["ecto.create --quiet", "ecto.migrate --quiet", "test"]
+    ]
+  end
+end
diff --git priv/repo/migrations/.formatter.exs apps/my_app/priv/repo/migrations/.formatter.exs
similarity index 100%
rename from projects/phoenix/1.5.7/nodash/priv/repo/migrations/.formatter.exs
rename to projects/phoenix/1.5.7/umbrella-live/apps/my_app/priv/repo/migrations/.formatter.exs
diff --git priv/repo/seeds.exs apps/my_app/priv/repo/seeds.exs
similarity index 100%
rename from projects/phoenix/1.5.7/nodash/priv/repo/seeds.exs
rename to projects/phoenix/1.5.7/umbrella-live/apps/my_app/priv/repo/seeds.exs
diff --git test/support/data_case.ex apps/my_app/test/support/data_case.ex
similarity index 100%
rename from projects/phoenix/1.5.7/nodash/test/support/data_case.ex
rename to projects/phoenix/1.5.7/umbrella-live/apps/my_app/test/support/data_case.ex
diff --git test/test_helper.exs apps/my_app/test/test_helper.exs
similarity index 100%
rename from projects/phoenix/1.5.7/nodash/test/test_helper.exs
rename to projects/phoenix/1.5.7/umbrella-live/apps/my_app/test/test_helper.exs
diff --git a/projects/phoenix/1.5.7/umbrella-live/apps/my_app_web/.formatter.exs apps/my_app_web/.formatter.exs
new file mode 100644
index 0000000..4761678
--- /dev/null
+++ apps/my_app_web/.formatter.exs
@@ -0,0 +1,4 @@
+[
+  import_deps: [:phoenix],
+  inputs: ["*.{ex,exs}", "{config,lib,test}/**/*.{ex,exs}"]
+]
diff --git a/projects/phoenix/1.5.7/umbrella-live/apps/my_app_web/.gitignore apps/my_app_web/.gitignore
new file mode 100644
index 0000000..5f1d967
--- /dev/null
+++ apps/my_app_web/.gitignore
@@ -0,0 +1,34 @@
+# The directory Mix will write compiled artifacts to.
+/_build/
+
+# If you run "mix test --cover", coverage assets end up here.
+/cover/
+
+# The directory Mix downloads your dependencies sources to.
+/deps/
+
+# Where 3rd-party dependencies like ExDoc output generated docs.
+/doc/
+
+# Ignore .fetch files in case you like to edit your project deps locally.
+/.fetch
+
+# If the VM crashes, it generates a dump, let's ignore it too.
+erl_crash.dump
+
+# Also ignore archive artifacts (built via "mix archive.build").
+*.ez
+
+# Ignore package tarball (built via "mix hex.build").
+my_app_web-*.tar
+
+# If NPM crashes, it generates a log, let's ignore it too.
+npm-debug.log
+
+# The directory NPM downloads your dependencies sources to.
+/assets/node_modules/
+
+# Since we are building assets from assets/,
+# we ignore priv/static. You may want to comment
+# this depending on your deployment strategy.
+/priv/static/
diff --git a/projects/phoenix/1.5.7/umbrella-live/apps/my_app_web/README.md apps/my_app_web/README.md
new file mode 100644
index 0000000..c780169
--- /dev/null
+++ apps/my_app_web/README.md
@@ -0,0 +1,20 @@
+# MyAppWeb
+
+To start your Phoenix server:
+
+  * Install dependencies with `mix deps.get`
+  * Create and migrate your database with `mix ecto.setup`
+  * Install Node.js dependencies with `npm install` inside the `assets` directory
+  * Start Phoenix endpoint with `mix phx.server`
+
+Now you can visit [`localhost:4000`](http://localhost:4000) from your browser.
+
+Ready to run in production? Please [check our deployment guides](https://hexdocs.pm/phoenix/deployment.html).
+
+## Learn more
+
+  * Official website: https://www.phoenixframework.org/
+  * Guides: https://hexdocs.pm/phoenix/overview.html
+  * Docs: https://hexdocs.pm/phoenix
+  * Forum: https://elixirforum.com/c/phoenix-forum
+  * Source: https://github.com/phoenixframework/phoenix
diff --git assets/.babelrc apps/my_app_web/assets/.babelrc
similarity index 100%
rename from projects/phoenix/1.5.7/nodash/assets/.babelrc
rename to projects/phoenix/1.5.7/umbrella-live/apps/my_app_web/assets/.babelrc
diff --git a/projects/phoenix/1.5.7/umbrella-live/apps/my_app_web/assets/css/app.scss apps/my_app_web/assets/css/app.scss
new file mode 100644
index 0000000..f7775db
--- /dev/null
+++ apps/my_app_web/assets/css/app.scss
@@ -0,0 +1,91 @@
+/* This file is for your main application css. */
+@import "./phoenix.css";
+@import "../node_modules/nprogress/nprogress.css";
+
+/* LiveView specific classes for your customizations */
+.phx-no-feedback.invalid-feedback,
+.phx-no-feedback .invalid-feedback {
+  display: none;
+}
+
+.phx-click-loading {
+  opacity: 0.5;
+  transition: opacity 1s ease-out;
+}
+
+.phx-disconnected{
+  cursor: wait;
+}
+.phx-disconnected *{
+  pointer-events: none;
+}
+
+.phx-modal {
+  opacity: 1!important;
+  position: fixed;
+  z-index: 1;
+  left: 0;
+  top: 0;
+  width: 100%;
+  height: 100%;
+  overflow: auto;
+  background-color: rgb(0,0,0);
+  background-color: rgba(0,0,0,0.4);
+}
+
+.phx-modal-content {
+  background-color: #fefefe;
+  margin: 15% auto;
+  padding: 20px;
+  border: 1px solid #888;
+  width: 80%;
+}
+
+.phx-modal-close {
+  color: #aaa;
+  float: right;
+  font-size: 28px;
+  font-weight: bold;
+}
+
+.phx-modal-close:hover,
+.phx-modal-close:focus {
+  color: black;
+  text-decoration: none;
+  cursor: pointer;
+}
+
+
+/* Alerts and form errors */
+.alert {
+  padding: 15px;
+  margin-bottom: 20px;
+  border: 1px solid transparent;
+  border-radius: 4px;
+}
+.alert-info {
+  color: #31708f;
+  background-color: #d9edf7;
+  border-color: #bce8f1;
+}
+.alert-warning {
+  color: #8a6d3b;
+  background-color: #fcf8e3;
+  border-color: #faebcc;
+}
+.alert-danger {
+  color: #a94442;
+  background-color: #f2dede;
+  border-color: #ebccd1;
+}
+.alert p {
+  margin-bottom: 0;
+}
+.alert:empty {
+  display: none;
+}
+.invalid-feedback {
+  color: #a94442;
+  display: block;
+  margin: -1rem 0 2rem;
+}
diff --git assets/css/phoenix.css apps/my_app_web/assets/css/phoenix.css
similarity index 100%
rename from projects/phoenix/1.5.7/nodash/assets/css/phoenix.css
rename to projects/phoenix/1.5.7/umbrella-live/apps/my_app_web/assets/css/phoenix.css
diff --git a/projects/phoenix/1.5.7/umbrella-live/apps/my_app_web/assets/js/app.js apps/my_app_web/assets/js/app.js
new file mode 100644
index 0000000..dfc0f97
--- /dev/null
+++ apps/my_app_web/assets/js/app.js
@@ -0,0 +1,35 @@
+// We need to import the CSS so that webpack will load it.
+// The MiniCssExtractPlugin is used to separate it out into
+// its own CSS file.
+import "../css/app.scss"
+
+// webpack automatically bundles all modules in your
+// entry points. Those entry points can be configured
+// in "webpack.config.js".
+//
+// Import deps with the dep name or local files with a relative path, for example:
+//
+//     import {Socket} from "phoenix"
+//     import socket from "./socket"
+//
+import "phoenix_html"
+import {Socket} from "phoenix"
+import NProgress from "nprogress"
+import {LiveSocket} from "phoenix_live_view"
+
+let csrfToken = document.querySelector("meta[name='csrf-token']").getAttribute("content")
+let liveSocket = new LiveSocket("/live", Socket, {params: {_csrf_token: csrfToken}})
+
+// Show progress bar on live navigation and form submits
+window.addEventListener("phx:page-loading-start", info => NProgress.start())
+window.addEventListener("phx:page-loading-stop", info => NProgress.done())
+
+// connect if there are any LiveViews on the page
+liveSocket.connect()
+
+// expose liveSocket on window for web console debug logs and latency simulation:
+// >> liveSocket.enableDebug()
+// >> liveSocket.enableLatencySim(1000)  // enabled for duration of browser session
+// >> liveSocket.disableLatencySim()
+window.liveSocket = liveSocket
+
diff --git assets/package.json apps/my_app_web/assets/package.json
similarity index 77%
rename from projects/phoenix/1.5.7/nodash/assets/package.json
rename to projects/phoenix/1.5.7/umbrella-live/apps/my_app_web/assets/package.json
index 170b4d5..e68e844 100644
--- assets/package.json
+++ apps/my_app_web/assets/package.json
@@ -7,8 +7,10 @@
     "watch": "webpack --mode development --watch"
   },
   "dependencies": {
-    "phoenix": "file:../deps/phoenix",
-    "phoenix_html": "file:../deps/phoenix_html"
+    "phoenix": "file:../../../deps/phoenix",
+    "phoenix_html": "file:../../../deps/phoenix_html",
+    "phoenix_live_view": "file:../../../deps/phoenix_live_view",
+    "nprogress": "^0.2.0"
   },
   "devDependencies": {
     "@babel/core": "^7.0.0",
diff --git assets/static/favicon.ico apps/my_app_web/assets/static/favicon.ico
similarity index 100%
rename from projects/phoenix/1.5.7/nodash/assets/static/favicon.ico
rename to projects/phoenix/1.5.7/umbrella-live/apps/my_app_web/assets/static/favicon.ico
diff --git assets/static/images/phoenix.png apps/my_app_web/assets/static/images/phoenix.png
similarity index 100%
rename from projects/phoenix/1.5.7/nodash/assets/static/images/phoenix.png
rename to projects/phoenix/1.5.7/umbrella-live/apps/my_app_web/assets/static/images/phoenix.png
diff --git assets/static/robots.txt apps/my_app_web/assets/static/robots.txt
similarity index 100%
rename from projects/phoenix/1.5.7/nodash/assets/static/robots.txt
rename to projects/phoenix/1.5.7/umbrella-live/apps/my_app_web/assets/static/robots.txt
diff --git assets/webpack.config.js apps/my_app_web/assets/webpack.config.js
similarity index 100%
rename from projects/phoenix/1.5.7/nodash/assets/webpack.config.js
rename to projects/phoenix/1.5.7/umbrella-live/apps/my_app_web/assets/webpack.config.js
diff --git lib/my_app/application.ex apps/my_app_web/lib/my_app_web/application.ex
similarity index 68%
rename from projects/phoenix/1.5.7/nodash/lib/my_app/application.ex
rename to projects/phoenix/1.5.7/umbrella-live/apps/my_app_web/lib/my_app_web/application.ex
index fd03945..fbdce53 100644
--- lib/my_app/application.ex
+++ apps/my_app_web/lib/my_app_web/application.ex
@@ -1,4 +1,4 @@
-defmodule MyApp.Application do
+defmodule MyAppWeb.Application do
   # See https://hexdocs.pm/elixir/Application.html
   # for more information on OTP Applications
   @moduledoc false
@@ -7,21 +7,17 @@ defmodule MyApp.Application do
 
   def start(_type, _args) do
     children = [
-      # Start the Ecto repository
-      MyApp.Repo,
       # Start the Telemetry supervisor
       MyAppWeb.Telemetry,
-      # Start the PubSub system
-      {Phoenix.PubSub, name: MyApp.PubSub},
       # Start the Endpoint (http/https)
       MyAppWeb.Endpoint
-      # Start a worker by calling: MyApp.Worker.start_link(arg)
-      # {MyApp.Worker, arg}
+      # Start a worker by calling: MyAppWeb.Worker.start_link(arg)
+      # {MyAppWeb.Worker, arg}
     ]
 
     # See https://hexdocs.pm/elixir/Supervisor.html
     # for other strategies and supported options
-    opts = [strategy: :one_for_one, name: MyApp.Supervisor]
+    opts = [strategy: :one_for_one, name: MyAppWeb.Supervisor]
     Supervisor.start_link(children, opts)
   end
 
diff --git lib/my_app_web/channels/user_socket.ex apps/my_app_web/lib/my_app_web/channels/user_socket.ex
similarity index 100%
rename from projects/phoenix/1.5.7/nodash/lib/my_app_web/channels/user_socket.ex
rename to projects/phoenix/1.5.7/umbrella-live/apps/my_app_web/lib/my_app_web/channels/user_socket.ex
diff --git lib/my_app_web/endpoint.ex apps/my_app_web/lib/my_app_web/endpoint.ex
similarity index 75%
rename from projects/phoenix/1.5.7/nodash/lib/my_app_web/endpoint.ex
rename to projects/phoenix/1.5.7/umbrella-live/apps/my_app_web/lib/my_app_web/endpoint.ex
index b8baf9a..6a10c05 100644
--- lib/my_app_web/endpoint.ex
+++ apps/my_app_web/lib/my_app_web/endpoint.ex
@@ -1,26 +1,28 @@
 defmodule MyAppWeb.Endpoint do
-  use Phoenix.Endpoint, otp_app: :my_app
+  use Phoenix.Endpoint, otp_app: :my_app_web
 
   # The session will be stored in the cookie and signed,
   # this means its contents can be read but not tampered with.
   # Set :encryption_salt if you would also like to encrypt it.
   @session_options [
     store: :cookie,
-    key: "_my_app_key",
-    signing_salt: "[redacted]"
+    key: "_my_app_web_key",
+    signing_salt: "2WiEl3V3"
   ]
 
   socket "/socket", MyAppWeb.UserSocket,
     websocket: true,
     longpoll: false
 
+  socket "/live", Phoenix.LiveView.Socket, websocket: [connect_info: [session: @session_options]]
+
   # Serve at "/" the static files from "priv/static" directory.
   #
   # You should set gzip to true if you are running phx.digest
   # when deploying your static files in production.
   plug Plug.Static,
     at: "/",
-    from: :my_app,
+    from: :my_app_web,
     gzip: false,
     only: ~w(css fonts images js favicon.ico robots.txt)
 
@@ -30,9 +32,13 @@ defmodule MyAppWeb.Endpoint do
     socket "/phoenix/live_reload/socket", Phoenix.LiveReloader.Socket
     plug Phoenix.LiveReloader
     plug Phoenix.CodeReloader
-    plug Phoenix.Ecto.CheckRepoStatus, otp_app: :my_app
+    plug Phoenix.Ecto.CheckRepoStatus, otp_app: :my_app_web
   end
 
+  plug Phoenix.LiveDashboard.RequestLogger,
+    param_key: "request_logger",
+    cookie_key: "request_logger"
+
   plug Plug.RequestId
   plug Plug.Telemetry, event_prefix: [:phoenix, :endpoint]
 
diff --git lib/my_app_web/gettext.ex apps/my_app_web/lib/my_app_web/gettext.ex
similarity index 94%
rename from projects/phoenix/1.5.7/nodash/lib/my_app_web/gettext.ex
rename to projects/phoenix/1.5.7/umbrella-live/apps/my_app_web/lib/my_app_web/gettext.ex
index 7919b97..9c6644d 100644
--- lib/my_app_web/gettext.ex
+++ apps/my_app_web/lib/my_app_web/gettext.ex
@@ -20,5 +20,5 @@ defmodule MyAppWeb.Gettext do
 
   See the [Gettext Docs](https://hexdocs.pm/gettext) for detailed usage.
   """
-  use Gettext, otp_app: :my_app
+  use Gettext, otp_app: :my_app_web
 end
diff --git a/projects/phoenix/1.5.7/umbrella-live/apps/my_app_web/lib/my_app_web/live/page_live.ex apps/my_app_web/lib/my_app_web/live/page_live.ex
new file mode 100644
index 0000000..1d75b57
--- /dev/null
+++ apps/my_app_web/lib/my_app_web/live/page_live.ex
@@ -0,0 +1,39 @@
+defmodule MyAppWeb.PageLive do
+  use MyAppWeb, :live_view
+
+  @impl true
+  def mount(_params, _session, socket) do
+    {:ok, assign(socket, query: "", results: %{})}
+  end
+
+  @impl true
+  def handle_event("suggest", %{"q" => query}, socket) do
+    {:noreply, assign(socket, results: search(query), query: query)}
+  end
+
+  @impl true
+  def handle_event("search", %{"q" => query}, socket) do
+    case search(query) do
+      %{^query => vsn} ->
+        {:noreply, redirect(socket, external: "https://hexdocs.pm/#{query}/#{vsn}")}
+
+      _ ->
+        {:noreply,
+         socket
+         |> put_flash(:error, "No dependencies found matching \"#{query}\"")
+         |> assign(results: %{}, query: query)}
+    end
+  end
+
+  defp search(query) do
+    if not MyAppWeb.Endpoint.config(:code_reloader) do
+      raise "action disabled when not in development"
+    end
+
+    for {app, desc, vsn} <- Application.started_applications(),
+        app = to_string(app),
+        String.starts_with?(app, query) and not List.starts_with?(desc, ~c"ERTS"),
+        into: %{},
+        do: {app, vsn}
+  end
+end
diff --git lib/my_app_web/templates/page/index.html.eex apps/my_app_web/lib/my_app_web/live/page_live.html.leex
similarity index 71%
rename from projects/phoenix/1.5.7/nodash/lib/my_app_web/templates/page/index.html.eex
rename to projects/phoenix/1.5.7/umbrella-live/apps/my_app_web/lib/my_app_web/live/page_live.html.leex
index dd0a7f8..52509c2 100644
--- lib/my_app_web/templates/page/index.html.eex
+++ apps/my_app_web/lib/my_app_web/live/page_live.html.leex
@@ -1,6 +1,16 @@
 <section class="phx-hero">
   <h1><%= gettext "Welcome to %{name}!", name: "Phoenix" %></h1>
   <p>Peace of mind from prototype to production</p>
+
+  <form phx-change="suggest" phx-submit="search">
+    <input type="text" name="q" value="<%= @query %>" placeholder="Live dependency search" list="results" autocomplete="off"/>
+    <datalist id="results">
+      <%= for {app, _vsn} <- @results do %>
+        <option value="<%= app %>"><%= app %></option>
+      <% end %>
+    </datalist>
+    <button type="submit" phx-disable-with="Searching...">Go to Hexdocs</button>
+  </form>
 </section>
 
 <section class="row">
diff --git a/projects/phoenix/1.5.7/umbrella-live/apps/my_app_web/lib/my_app_web/router.ex apps/my_app_web/lib/my_app_web/router.ex
new file mode 100644
index 0000000..ad9430e
--- /dev/null
+++ apps/my_app_web/lib/my_app_web/router.ex
@@ -0,0 +1,43 @@
+defmodule MyAppWeb.Router do
+  use MyAppWeb, :router
+
+  pipeline :browser do
+    plug :accepts, ["html"]
+    plug :fetch_session
+    plug :fetch_live_flash
+    plug :put_root_layout, {MyAppWeb.LayoutView, :root}
+    plug :protect_from_forgery
+    plug :put_secure_browser_headers
+  end
+
+  pipeline :api do
+    plug :accepts, ["json"]
+  end
+
+  scope "/", MyAppWeb do
+    pipe_through :browser
+
+    live "/", PageLive, :index
+  end
+
+  # Other scopes may use custom stacks.
+  # scope "/api", MyAppWeb do
+  #   pipe_through :api
+  # end
+
+  # Enables LiveDashboard only for development
+  #
+  # If you want to use the LiveDashboard in production, you should put
+  # it behind authentication and allow only admins to access it.
+  # If your application does not have an admins-only section yet,
+  # you can use Plug.BasicAuth to set up some basic authentication
+  # as long as you are also using SSL (which you should anyway).
+  if Mix.env() in [:dev, :test] do
+    import Phoenix.LiveDashboard.Router
+
+    scope "/" do
+      pipe_through :browser
+      live_dashboard "/dashboard", metrics: MyAppWeb.Telemetry
+    end
+  end
+end
diff --git lib/my_app_web/telemetry.ex apps/my_app_web/lib/my_app_web/telemetry.ex
similarity index 100%
rename from projects/phoenix/1.5.7/nodash/lib/my_app_web/telemetry.ex
rename to projects/phoenix/1.5.7/umbrella-live/apps/my_app_web/lib/my_app_web/telemetry.ex
diff --git a/projects/phoenix/1.5.7/umbrella-live/apps/my_app_web/lib/my_app_web/templates/layout/app.html.eex apps/my_app_web/lib/my_app_web/templates/layout/app.html.eex
new file mode 100644
index 0000000..09ffdad
--- /dev/null
+++ apps/my_app_web/lib/my_app_web/templates/layout/app.html.eex
@@ -0,0 +1,5 @@
+<main role="main" class="container">
+  <p class="alert alert-info" role="alert"><%= get_flash(@conn, :info) %></p>
+  <p class="alert alert-danger" role="alert"><%= get_flash(@conn, :error) %></p>
+  <%= @inner_content %>
+</main>
diff --git a/projects/phoenix/1.5.7/umbrella-live/apps/my_app_web/lib/my_app_web/templates/layout/live.html.leex apps/my_app_web/lib/my_app_web/templates/layout/live.html.leex
new file mode 100644
index 0000000..8dcded5
--- /dev/null
+++ apps/my_app_web/lib/my_app_web/templates/layout/live.html.leex
@@ -0,0 +1,11 @@
+<main role="main" class="container">
+  <p class="alert alert-info" role="alert"
+    phx-click="lv:clear-flash"
+    phx-value-key="info"><%= live_flash(@flash, :info) %></p>
+
+  <p class="alert alert-danger" role="alert"
+    phx-click="lv:clear-flash"
+    phx-value-key="error"><%= live_flash(@flash, :error) %></p>
+
+  <%= @inner_content %>
+</main>
diff --git lib/my_app_web/templates/layout/app.html.eex apps/my_app_web/lib/my_app_web/templates/layout/root.html.leex
similarity index 54%
rename from projects/phoenix/1.5.7/nodash/lib/my_app_web/templates/layout/app.html.eex
rename to projects/phoenix/1.5.7/umbrella-live/apps/my_app_web/lib/my_app_web/templates/layout/root.html.leex
index 981504d..630a552 100644
--- lib/my_app_web/templates/layout/app.html.eex
+++ apps/my_app_web/lib/my_app_web/templates/layout/root.html.leex
@@ -4,9 +4,10 @@
     <meta charset="utf-8"/>
     <meta http-equiv="X-UA-Compatible" content="IE=edge"/>
     <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
-    <title>MyApp · Phoenix Framework</title>
-    <link rel="stylesheet" href="<%= Routes.static_path(@conn, "/css/app.css") %>"/>
-    <script defer type="text/javascript" src="<%= Routes.static_path(@conn, "/js/app.js") %>"></script>
+    <%= csrf_meta_tag() %>
+    <%= live_title_tag assigns[:page_title] || "MyApp", suffix: " · Phoenix Framework" %>
+    <link phx-track-static rel="stylesheet" href="<%= Routes.static_path(@conn, "/css/app.css") %>"/>
+    <script defer phx-track-static type="text/javascript" src="<%= Routes.static_path(@conn, "/js/app.js") %>"></script>
   </head>
   <body>
     <header>
@@ -14,7 +15,9 @@
         <nav role="navigation">
           <ul>
             <li><a href="https://hexdocs.pm/phoenix/overview.html">Get Started</a></li>
-            
+            <%= if function_exported?(Routes, :live_dashboard_path, 2) do %>
+              <li><%= link "LiveDashboard", to: Routes.live_dashboard_path(@conn, :home) %></li>
+            <% end %>
           </ul>
         </nav>
         <a href="https://phoenixframework.org/" class="phx-logo">
@@ -22,10 +25,6 @@
         </a>
       </section>
     </header>
-    <main role="main" class="container">
-      <p class="alert alert-info" role="alert"><%= get_flash(@conn, :info) %></p>
-      <p class="alert alert-danger" role="alert"><%= get_flash(@conn, :error) %></p>
-      <%= @inner_content %>
-    </main>
+    <%= @inner_content %>
   </body>
 </html>
diff --git lib/my_app_web/views/error_helpers.ex apps/my_app_web/lib/my_app_web/views/error_helpers.ex
similarity index 100%
rename from projects/phoenix/1.5.7/nodash/lib/my_app_web/views/error_helpers.ex
rename to projects/phoenix/1.5.7/umbrella-live/apps/my_app_web/lib/my_app_web/views/error_helpers.ex
diff --git lib/my_app_web/views/error_view.ex apps/my_app_web/lib/my_app_web/views/error_view.ex
similarity index 100%
rename from projects/phoenix/1.5.7/nodash/lib/my_app_web/views/error_view.ex
rename to projects/phoenix/1.5.7/umbrella-live/apps/my_app_web/lib/my_app_web/views/error_view.ex
diff --git lib/my_app_web/views/layout_view.ex apps/my_app_web/lib/my_app_web/views/layout_view.ex
similarity index 100%
rename from projects/phoenix/1.5.7/nodash/lib/my_app_web/views/layout_view.ex
rename to projects/phoenix/1.5.7/umbrella-live/apps/my_app_web/lib/my_app_web/views/layout_view.ex
diff --git lib/my_app_web.ex apps/my_app_web/lib/my_app_web.ex
similarity index 81%
rename from projects/phoenix/1.5.7/nodash/lib/my_app_web.ex
rename to projects/phoenix/1.5.7/umbrella-live/apps/my_app_web/lib/my_app_web.ex
index e01f880..222c4f0 100644
--- lib/my_app_web.ex
+++ apps/my_app_web/lib/my_app_web.ex
@@ -42,12 +42,30 @@ defmodule MyAppWeb do
     end
   end
 
+  def live_view do
+    quote do
+      use Phoenix.LiveView,
+        layout: {MyAppWeb.LayoutView, "live.html"}
+
+      unquote(view_helpers())
+    end
+  end
+
+  def live_component do
+    quote do
+      use Phoenix.LiveComponent
+
+      unquote(view_helpers())
+    end
+  end
+
   def router do
     quote do
       use Phoenix.Router
 
       import Plug.Conn
       import Phoenix.Controller
+      import Phoenix.LiveView.Router
     end
   end
 
@@ -63,6 +81,9 @@ defmodule MyAppWeb do
       # Use all HTML functionality (forms, tags, etc)
       use Phoenix.HTML
 
+      # Import LiveView helpers (live_render, live_component, live_patch, etc)
+      import Phoenix.LiveView.Helpers
+
       # Import basic rendering functionality (render, render_layout, etc)
       import Phoenix.View
 
diff --git a/projects/phoenix/1.5.7/umbrella-live/apps/my_app_web/mix.exs apps/my_app_web/mix.exs
new file mode 100644
index 0000000..40d0489
--- /dev/null
+++ apps/my_app_web/mix.exs
@@ -0,0 +1,65 @@
+defmodule MyAppWeb.MixProject do
+  use Mix.Project
+
+  def project do
+    [
+      app: :my_app_web,
+      version: "0.1.0",
+      build_path: "../../_build",
+      config_path: "../../config/config.exs",
+      deps_path: "../../deps",
+      lockfile: "../../mix.lock",
+      elixir: "~> 1.7",
+      elixirc_paths: elixirc_paths(Mix.env()),
+      compilers: [:phoenix, :gettext] ++ Mix.compilers(),
+      start_permanent: Mix.env() == :prod,
+      aliases: aliases(),
+      deps: deps()
+    ]
+  end
+
+  # Configuration for the OTP application.
+  #
+  # Type `mix help compile.app` for more information.
+  def application do
+    [
+      mod: {MyAppWeb.Application, []},
+      extra_applications: [:logger, :runtime_tools]
+    ]
+  end
+
+  # Specifies which paths to compile per environment.
+  defp elixirc_paths(:test), do: ["lib", "test/support"]
+  defp elixirc_paths(_), do: ["lib"]
+
+  # Specifies your project dependencies.
+  #
+  # Type `mix help deps` for examples and options.
+  defp deps do
+    [
+      {:phoenix, "~> 1.5.7"},
+      {:phoenix_ecto, "~> 4.0"},
+      {:phoenix_live_view, "~> 0.15.0"},
+      {:floki, ">= 0.27.0", only: :test},
+      {:phoenix_html, "~> 2.11"},
+      {:phoenix_live_reload, "~> 1.2", only: :dev},
+      {:phoenix_live_dashboard, "~> 0.4"},
+      {:telemetry_metrics, "~> 0.4"},
+      {:telemetry_poller, "~> 0.4"},
+      {:gettext, "~> 0.11"},
+      {:my_app, in_umbrella: true},
+      {:jason, "~> 1.0"},
+      {:plug_cowboy, "~> 2.0"}
+    ]
+  end
+
+  # Aliases are shortcuts or tasks specific to the current project.
+  #
+  # See the documentation for `Mix` for more info on aliases.
+  defp aliases do
+    [
+      setup: ["deps.get", "cmd npm install --prefix assets"],
+      test: ["ecto.create --quiet", "ecto.migrate --quiet", "test"]
+    ]
+  end
+end
diff --git priv/gettext/en/LC_MESSAGES/errors.po apps/my_app_web/priv/gettext/en/LC_MESSAGES/errors.po
similarity index 100%
rename from projects/phoenix/1.5.7/nodash/priv/gettext/en/LC_MESSAGES/errors.po
rename to projects/phoenix/1.5.7/umbrella-live/apps/my_app_web/priv/gettext/en/LC_MESSAGES/errors.po
diff --git priv/gettext/errors.pot apps/my_app_web/priv/gettext/errors.pot
similarity index 100%
rename from projects/phoenix/1.5.7/nodash/priv/gettext/errors.pot
rename to projects/phoenix/1.5.7/umbrella-live/apps/my_app_web/priv/gettext/errors.pot
diff --git a/projects/phoenix/1.5.7/umbrella-live/apps/my_app_web/test/my_app_web/live/page_live_test.exs apps/my_app_web/test/my_app_web/live/page_live_test.exs
new file mode 100644
index 0000000..7d971b0
--- /dev/null
+++ apps/my_app_web/test/my_app_web/live/page_live_test.exs
@@ -0,0 +1,11 @@
+defmodule MyAppWeb.PageLiveTest do
+  use MyAppWeb.ConnCase
+
+  import Phoenix.LiveViewTest
+
+  test "disconnected and connected render", %{conn: conn} do
+    {:ok, page_live, disconnected_html} = live(conn, "/")
+    assert disconnected_html =~ "Welcome to Phoenix!"
+    assert render(page_live) =~ "Welcome to Phoenix!"
+  end
+end
diff --git test/my_app_web/views/error_view_test.exs apps/my_app_web/test/my_app_web/views/error_view_test.exs
similarity index 100%
rename from projects/phoenix/1.5.7/nodash/test/my_app_web/views/error_view_test.exs
rename to projects/phoenix/1.5.7/umbrella-live/apps/my_app_web/test/my_app_web/views/error_view_test.exs
diff --git test/my_app_web/views/layout_view_test.exs apps/my_app_web/test/my_app_web/views/layout_view_test.exs
similarity index 100%
rename from projects/phoenix/1.5.7/nodash/test/my_app_web/views/layout_view_test.exs
rename to projects/phoenix/1.5.7/umbrella-live/apps/my_app_web/test/my_app_web/views/layout_view_test.exs
diff --git test/support/channel_case.ex apps/my_app_web/test/support/channel_case.ex
similarity index 100%
rename from projects/phoenix/1.5.7/nodash/test/support/channel_case.ex
rename to projects/phoenix/1.5.7/umbrella-live/apps/my_app_web/test/support/channel_case.ex
diff --git test/support/conn_case.ex apps/my_app_web/test/support/conn_case.ex
similarity index 100%
rename from projects/phoenix/1.5.7/nodash/test/support/conn_case.ex
rename to projects/phoenix/1.5.7/umbrella-live/apps/my_app_web/test/support/conn_case.ex
diff --git a/projects/phoenix/1.5.7/umbrella-live/apps/my_app_web/test/test_helper.exs apps/my_app_web/test/test_helper.exs
new file mode 100644
index 0000000..0491a89
--- /dev/null
+++ apps/my_app_web/test/test_helper.exs
@@ -0,0 +1,2 @@
+ExUnit.start()
+Ecto.Adapters.SQL.Sandbox.mode(MyApp.Repo, :manual)
diff --git assets/css/app.scss b/projects/phoenix/1.5.7/nodash/assets/css/app.scss
deleted file mode 100644
index 5c2c9b5..0000000
--- assets/css/app.scss
+++ /dev/null
@@ -1,36 +0,0 @@
-/* This file is for your main application css. */
-@import "./phoenix.css";
-
-/* Alerts and form errors */
-.alert {
-  padding: 15px;
-  margin-bottom: 20px;
-  border: 1px solid transparent;
-  border-radius: 4px;
-}
-.alert-info {
-  color: #31708f;
-  background-color: #d9edf7;
-  border-color: #bce8f1;
-}
-.alert-warning {
-  color: #8a6d3b;
-  background-color: #fcf8e3;
-  border-color: #faebcc;
-}
-.alert-danger {
-  color: #a94442;
-  background-color: #f2dede;
-  border-color: #ebccd1;
-}
-.alert p {
-  margin-bottom: 0;
-}
-.alert:empty {
-  display: none;
-}
-.invalid-feedback {
-  color: #a94442;
-  display: block;
-  margin: -1rem 0 2rem;
-}
diff --git assets/js/app.js b/projects/phoenix/1.5.7/nodash/assets/js/app.js
deleted file mode 100644
index af00596..0000000
--- assets/js/app.js
+++ /dev/null
@@ -1,15 +0,0 @@
-// We need to import the CSS so that webpack will load it.
-// The MiniCssExtractPlugin is used to separate it out into
-// its own CSS file.
-import "../css/app.scss"
-
-// webpack automatically bundles all modules in your
-// entry points. Those entry points can be configured
-// in "webpack.config.js".
-//
-// Import deps with the dep name or local files with a relative path, for example:
-//
-//     import {Socket} from "phoenix"
-//     import socket from "./socket"
-//
-import "phoenix_html"
diff --git assets/js/socket.js b/projects/phoenix/1.5.7/nodash/assets/js/socket.js
deleted file mode 100644
index 09929ab..0000000
--- assets/js/socket.js
+++ /dev/null
@@ -1,63 +0,0 @@
-// NOTE: The contents of this file will only be executed if
-// you uncomment its entry in "assets/js/app.js".
-
-// To use Phoenix channels, the first step is to import Socket,
-// and connect at the socket path in "lib/web/endpoint.ex".
-//
-// Pass the token on params as below. Or remove it
-// from the params if you are not using authentication.
-import {Socket} from "phoenix"
-
-let socket = new Socket("/socket", {params: {token: window.userToken}})
-
-// When you connect, you'll often need to authenticate the client.
-// For example, imagine you have an authentication plug, `MyAuth`,
-// which authenticates the session and assigns a `:current_user`.
-// If the current user exists you can assign the user's token in
-// the connection for use in the layout.
-//
-// In your "lib/web/router.ex":
-//
-//     pipeline :browser do
-//       ...
-//       plug MyAuth
-//       plug :put_user_token
-//     end
-//
-//     defp put_user_token(conn, _) do
-//       if current_user = conn.assigns[:current_user] do
-//         token = Phoenix.Token.sign(conn, "user socket", current_user.id)
-//         assign(conn, :user_token, token)
-//       else
-//         conn
-//       end
-//     end
-//
-// Now you need to pass this token to JavaScript. You can do so
-// inside a script tag in "lib/web/templates/layout/app.html.eex":
-//
-//     <script>window.userToken = "<%= assigns[:user_token] %>";</script>
-//
-// You will need to verify the user token in the "connect/3" function
-// in "lib/web/channels/user_socket.ex":
-//
-//     def connect(%{"token" => token}, socket, _connect_info) do
-//       # max_age: 1209600 is equivalent to two weeks in seconds
-//       case Phoenix.Token.verify(socket, "user socket", token, max_age: 1209600) do
-//         {:ok, user_id} ->
-//           {:ok, assign(socket, :user, user_id)}
-//         {:error, reason} ->
-//           :error
-//       end
-//     end
-//
-// Finally, connect to the socket:
-socket.connect()
-
-// Now that you are connected, you can join channels with a topic:
-let channel = socket.channel("topic:subtopic", {})
-channel.join()
-  .receive("ok", resp => { console.log("Joined successfully", resp) })
-  .receive("error", resp => { console.log("Unable to join", resp) })
-
-export default socket
diff --git config/config.exs config/config.exs
index 1e1fcef..0d15f7a 100644
--- config/config.exs
+++ config/config.exs
@@ -1,17 +1,24 @@
-# This file is responsible for configuring your application
-# and its dependencies with the aid of the Mix.Config module.
+# This file is responsible for configuring your umbrella
+# and **all applications** and their dependencies with the
+# help of Mix.Config.
 #
-# This configuration file is loaded before any dependency and
-# is restricted to this project.
-
-# General application configuration
+# Note that all applications in your umbrella share the
+# same configuration and dependencies, which is why they
+# all use the same configuration file. If you want different
+# configurations or dependencies per app, it is best to
+# move said applications out of the umbrella.
 use Mix.Config
 
+# Configure Mix tasks and generators
 config :my_app,
   ecto_repos: [MyApp.Repo]
 
+config :my_app_web,
+  ecto_repos: [MyApp.Repo],
+  generators: [context_app: :my_app]
+
 # Configures the endpoint
-config :my_app, MyAppWeb.Endpoint,
+config :my_app_web, MyAppWeb.Endpoint,
   url: [host: "localhost"],
   secret_key_base: "[redacted]",
   render_errors: [view: MyAppWeb.ErrorView, accepts: ~w(html json), layout: false],
diff --git config/dev.exs config/dev.exs
index 071eb94..9a31fdb 100644
--- config/dev.exs
+++ config/dev.exs
@@ -15,7 +15,7 @@ config :my_app, MyApp.Repo,
 # The watchers configuration can be used to run external
 # watchers to your application. For example, we use it
 # with webpack to recompile .js and .css sources.
-config :my_app, MyAppWeb.Endpoint,
+config :my_app_web, MyAppWeb.Endpoint,
   http: [port: 4000],
   debug_errors: true,
   code_reloader: true,
@@ -26,7 +26,7 @@ config :my_app, MyAppWeb.Endpoint,
       "--mode",
       "development",
       "--watch-stdin",
-      cd: Path.expand("../assets", __DIR__)
+      cd: Path.expand("../apps/my_app_web/assets", __DIR__)
     ]
   ]
 
@@ -55,7 +55,7 @@ config :my_app, MyAppWeb.Endpoint,
 # different ports.
 
 # Watch static and templates for browser reloading.
-config :my_app, MyAppWeb.Endpoint,
+config :my_app_web, MyAppWeb.Endpoint,
   live_reload: [
     patterns: [
       ~r"priv/static/.*(js|css|png|jpeg|jpg|gif|svg)$",
@@ -68,9 +68,9 @@ config :my_app, MyAppWeb.Endpoint,
 # Do not include metadata nor timestamps in development logs
 config :logger, :console, format: "[$level] $message\n"
 
+# Initialize plugs at runtime for faster development compilation
+config :phoenix, :plug_init_mode, :runtime
+
 # Set a higher stacktrace during development. Avoid configuring such
 # in production as building large stacktraces may be expensive.
 config :phoenix, :stacktrace_depth, 20
-
-# Initialize plugs at runtime for faster development compilation
-config :phoenix, :plug_init_mode, :runtime
diff --git config/prod.exs config/prod.exs
index 7443cb4..8310ab5 100644
--- config/prod.exs
+++ config/prod.exs
@@ -9,19 +9,16 @@ use Mix.Config
 # manifest is generated by the `mix phx.digest` task,
 # which you should run after static files are built and
 # before starting your production server.
-config :my_app, MyAppWeb.Endpoint,
+config :my_app_web, MyAppWeb.Endpoint,
   url: [host: "example.com", port: 80],
   cache_static_manifest: "priv/static/cache_manifest.json"
 
-# Do not print debug messages in production
-config :logger, level: :info
-
 # ## SSL Support
 #
 # To get SSL working, you will need to add the `https` key
 # to the previous section and set your `:url` port to 443:
 #
-#     config :my_app, MyAppWeb.Endpoint,
+#     config :my_app_web, MyAppWeb.Endpoint,
 #       ...
 #       url: [host: "example.com", port: 443],
 #       https: [
@@ -45,11 +42,14 @@ config :logger, level: :info
 # We also recommend setting `force_ssl` in your endpoint, ensuring
 # no data is ever sent via http, always redirecting to https:
 #
-#     config :my_app, MyAppWeb.Endpoint,
+#     config :my_app_web, MyAppWeb.Endpoint,
 #       force_ssl: [hsts: true]
 #
 # Check `Plug.SSL` for all available options in `force_ssl`.
 
+# Do not print debug messages in production
+config :logger, level: :info
+
 # Finally import the config/prod.secret.exs which loads secrets
 # and configuration from environment variables.
 import_config "prod.secret.exs"
diff --git config/prod.secret.exs config/prod.secret.exs
index 968473e..b201076 100644
--- config/prod.secret.exs
+++ config/prod.secret.exs
@@ -23,7 +23,7 @@ secret_key_base =
     You can generate one by calling: mix phx.gen.secret
     """
 
-config :my_app, MyAppWeb.Endpoint,
+config :my_app_web, MyAppWeb.Endpoint,
   http: [
     port: String.to_integer(System.get_env("PORT") || "4000"),
     transport_options: [socket_opts: [:inet6]]
@@ -35,7 +35,7 @@ config :my_app, MyAppWeb.Endpoint,
 # If you are doing OTP releases, you need to instruct Phoenix
 # to start each relevant endpoint:
 #
-#     config :my_app, MyAppWeb.Endpoint, server: true
+#     config :my_app_web, MyAppWeb.Endpoint, server: true
 #
 # Then you can assemble a release by calling `mix release`.
 # See `mix help release` for more information.
diff --git config/test.exs config/test.exs
index 5589099..a885229 100644
--- config/test.exs
+++ config/test.exs
@@ -14,7 +14,7 @@ config :my_app, MyApp.Repo,
 
 # We don't run a server during test. If one is required,
 # you can enable the server option below.
-config :my_app, MyAppWeb.Endpoint,
+config :my_app_web, MyAppWeb.Endpoint,
   http: [port: 4002],
   server: false
 
diff --git lib/my_app_web/controllers/page_controller.ex b/projects/phoenix/1.5.7/nodash/lib/my_app_web/controllers/page_controller.ex
deleted file mode 100644
index 9628848..0000000
--- lib/my_app_web/controllers/page_controller.ex
+++ /dev/null
@@ -1,7 +0,0 @@
-defmodule MyAppWeb.PageController do
-  use MyAppWeb, :controller
-
-  def index(conn, _params) do
-    render(conn, "index.html")
-  end
-end
diff --git lib/my_app_web/router.ex b/projects/phoenix/1.5.7/nodash/lib/my_app_web/router.ex
deleted file mode 100644
index 8309276..0000000
--- lib/my_app_web/router.ex
+++ /dev/null
@@ -1,26 +0,0 @@
-defmodule MyAppWeb.Router do
-  use MyAppWeb, :router
-
-  pipeline :browser do
-    plug :accepts, ["html"]
-    plug :fetch_session
-    plug :fetch_flash
-    plug :protect_from_forgery
-    plug :put_secure_browser_headers
-  end
-
-  pipeline :api do
-    plug :accepts, ["json"]
-  end
-
-  scope "/", MyAppWeb do
-    pipe_through :browser
-
-    get "/", PageController, :index
-  end
-
-  # Other scopes may use custom stacks.
-  # scope "/api", MyAppWeb do
-  #   pipe_through :api
-  # end
-end
diff --git lib/my_app_web/views/page_view.ex b/projects/phoenix/1.5.7/nodash/lib/my_app_web/views/page_view.ex
deleted file mode 100644
index 3385fda..0000000
--- lib/my_app_web/views/page_view.ex
+++ /dev/null
@@ -1,3 +0,0 @@
-defmodule MyAppWeb.PageView do
-  use MyAppWeb, :view
-end
diff --git mix.exs mix.exs
index 3a4ff92..099c509 100644
--- mix.exs
+++ mix.exs
@@ -1,50 +1,30 @@
-defmodule MyApp.MixProject do
+defmodule MyApp.Umbrella.MixProject do
   use Mix.Project
 
   def project do
     [
-      app: :my_app,
+      apps_path: "apps",
       version: "0.1.0",
-      elixir: "~> 1.7",
-      elixirc_paths: elixirc_paths(Mix.env()),
-      compilers: [:phoenix, :gettext] ++ Mix.compilers(),
       start_permanent: Mix.env() == :prod,
-      aliases: aliases(),
-      deps: deps()
+      deps: deps(),
+      aliases: aliases()
     ]
   end
 
-  # Configuration for the OTP application.
+  # Dependencies can be Hex packages:
   #
-  # Type `mix help compile.app` for more information.
-  def application do
-    [
-      mod: {MyApp.Application, []},
-      extra_applications: [:logger, :runtime_tools]
-    ]
-  end
-
-  # Specifies which paths to compile per environment.
-  defp elixirc_paths(:test), do: ["lib", "test/support"]
-  defp elixirc_paths(_), do: ["lib"]
-
-  # Specifies your project dependencies.
+  #   {:mydep, "~> 0.3.0"}
+  #
+  # Or git/path repositories:
   #
-  # Type `mix help deps` for examples and options.
+  #   {:mydep, git: "https://github.com/elixir-lang/mydep.git", tag: "0.1.0"}
+  #
+  # Type "mix help deps" for more examples and options.
+  #
+  # Dependencies listed here are available only for this project
+  # and cannot be accessed from applications inside the apps/ folder.
   defp deps do
-    [
-      {:phoenix, "~> 1.5.7"},
-      {:phoenix_ecto, "~> 4.1"},
-      {:ecto_sql, "~> 3.4"},
-      {:postgrex, ">= 0.0.0"},
-      {:phoenix_html, "~> 2.11"},
-      {:phoenix_live_reload, "~> 1.2", only: :dev},
-      {:telemetry_metrics, "~> 0.4"},
-      {:telemetry_poller, "~> 0.4"},
-      {:gettext, "~> 0.11"},
-      {:jason, "~> 1.0"},
-      {:plug_cowboy, "~> 2.0"}
-    ]
+    []
   end
 
   # Aliases are shortcuts or tasks specific to the current project.
@@ -53,12 +33,13 @@ defmodule MyApp.MixProject do
   #     $ mix setup
   #
   # See the documentation for `Mix` for more info on aliases.
+  #
+  # Aliases listed here are available only for this project
+  # and cannot be accessed from applications inside the apps/ folder.
   defp aliases do
     [
-      setup: ["deps.get", "ecto.setup", "cmd npm install --prefix assets"],
-      "ecto.setup": ["ecto.create", "ecto.migrate", "run priv/repo/seeds.exs"],
-      "ecto.reset": ["ecto.drop", "ecto.setup"],
-      test: ["ecto.create --quiet", "ecto.migrate --quiet", "test"]
+      # run `mix setup` in all child apps
+      setup: ["cmd mix setup"]
     ]
   end
 end
diff --git test/my_app_web/controllers/page_controller_test.exs b/projects/phoenix/1.5.7/nodash/test/my_app_web/controllers/page_controller_test.exs
deleted file mode 100644
index 5c16b7f..0000000
--- test/my_app_web/controllers/page_controller_test.exs
+++ /dev/null
@@ -1,8 +0,0 @@
-defmodule MyAppWeb.PageControllerTest do
-  use MyAppWeb.ConnCase
-
-  test "GET /", %{conn: conn} do
-    conn = get(conn, "/")
-    assert html_response(conn, 200) =~ "Welcome to Phoenix!"
-  end
-end
diff --git test/my_app_web/views/page_view_test.exs b/projects/phoenix/1.5.7/nodash/test/my_app_web/views/page_view_test.exs
deleted file mode 100644
index 82612dc..0000000
--- test/my_app_web/views/page_view_test.exs
+++ /dev/null
@@ -1,3 +0,0 @@
-defmodule MyAppWeb.PageViewTest do
-  use MyAppWeb.ConnCase, async: true
-end
