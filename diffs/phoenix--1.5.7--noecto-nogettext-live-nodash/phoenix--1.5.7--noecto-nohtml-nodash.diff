diff --git assets/css/app.scss assets/css/app.scss
index f7775db..5c2c9b5 100644
--- assets/css/app.scss
+++ assets/css/app.scss
@@ -1,60 +1,5 @@
 /* This file is for your main application css. */
 @import "./phoenix.css";
-@import "../node_modules/nprogress/nprogress.css";
-
-/* LiveView specific classes for your customizations */
-.phx-no-feedback.invalid-feedback,
-.phx-no-feedback .invalid-feedback {
-  display: none;
-}
-
-.phx-click-loading {
-  opacity: 0.5;
-  transition: opacity 1s ease-out;
-}
-
-.phx-disconnected{
-  cursor: wait;
-}
-.phx-disconnected *{
-  pointer-events: none;
-}
-
-.phx-modal {
-  opacity: 1!important;
-  position: fixed;
-  z-index: 1;
-  left: 0;
-  top: 0;
-  width: 100%;
-  height: 100%;
-  overflow: auto;
-  background-color: rgb(0,0,0);
-  background-color: rgba(0,0,0,0.4);
-}
-
-.phx-modal-content {
-  background-color: #fefefe;
-  margin: 15% auto;
-  padding: 20px;
-  border: 1px solid #888;
-  width: 80%;
-}
-
-.phx-modal-close {
-  color: #aaa;
-  float: right;
-  font-size: 28px;
-  font-weight: bold;
-}
-
-.phx-modal-close:hover,
-.phx-modal-close:focus {
-  color: black;
-  text-decoration: none;
-  cursor: pointer;
-}
-
 
 /* Alerts and form errors */
 .alert {
diff --git assets/js/app.js assets/js/app.js
index dfc0f97..5f6ee98 100644
--- assets/js/app.js
+++ assets/js/app.js
@@ -12,24 +12,4 @@ import "../css/app.scss"
 //     import {Socket} from "phoenix"
 //     import socket from "./socket"
 //
-import "phoenix_html"
-import {Socket} from "phoenix"
-import NProgress from "nprogress"
-import {LiveSocket} from "phoenix_live_view"
-
-let csrfToken = document.querySelector("meta[name='csrf-token']").getAttribute("content")
-let liveSocket = new LiveSocket("/live", Socket, {params: {_csrf_token: csrfToken}})
-
-// Show progress bar on live navigation and form submits
-window.addEventListener("phx:page-loading-start", info => NProgress.start())
-window.addEventListener("phx:page-loading-stop", info => NProgress.done())
-
-// connect if there are any LiveViews on the page
-liveSocket.connect()
-
-// expose liveSocket on window for web console debug logs and latency simulation:
-// >> liveSocket.enableDebug()
-// >> liveSocket.enableLatencySim(1000)  // enabled for duration of browser session
-// >> liveSocket.disableLatencySim()
-window.liveSocket = liveSocket
 
diff --git a/projects/phoenix/1.5.7/noecto-nohtml-nodash/assets/js/socket.js assets/js/socket.js
new file mode 100644
index 0000000..09929ab
--- /dev/null
+++ assets/js/socket.js
@@ -0,0 +1,63 @@
+// NOTE: The contents of this file will only be executed if
+// you uncomment its entry in "assets/js/app.js".
+
+// To use Phoenix channels, the first step is to import Socket,
+// and connect at the socket path in "lib/web/endpoint.ex".
+//
+// Pass the token on params as below. Or remove it
+// from the params if you are not using authentication.
+import {Socket} from "phoenix"
+
+let socket = new Socket("/socket", {params: {token: window.userToken}})
+
+// When you connect, you'll often need to authenticate the client.
+// For example, imagine you have an authentication plug, `MyAuth`,
+// which authenticates the session and assigns a `:current_user`.
+// If the current user exists you can assign the user's token in
+// the connection for use in the layout.
+//
+// In your "lib/web/router.ex":
+//
+//     pipeline :browser do
+//       ...
+//       plug MyAuth
+//       plug :put_user_token
+//     end
+//
+//     defp put_user_token(conn, _) do
+//       if current_user = conn.assigns[:current_user] do
+//         token = Phoenix.Token.sign(conn, "user socket", current_user.id)
+//         assign(conn, :user_token, token)
+//       else
+//         conn
+//       end
+//     end
+//
+// Now you need to pass this token to JavaScript. You can do so
+// inside a script tag in "lib/web/templates/layout/app.html.eex":
+//
+//     <script>window.userToken = "<%= assigns[:user_token] %>";</script>
+//
+// You will need to verify the user token in the "connect/3" function
+// in "lib/web/channels/user_socket.ex":
+//
+//     def connect(%{"token" => token}, socket, _connect_info) do
+//       # max_age: 1209600 is equivalent to two weeks in seconds
+//       case Phoenix.Token.verify(socket, "user socket", token, max_age: 1209600) do
+//         {:ok, user_id} ->
+//           {:ok, assign(socket, :user, user_id)}
+//         {:error, reason} ->
+//           :error
+//       end
+//     end
+//
+// Finally, connect to the socket:
+socket.connect()
+
+// Now that you are connected, you can join channels with a topic:
+let channel = socket.channel("topic:subtopic", {})
+channel.join()
+  .receive("ok", resp => { console.log("Joined successfully", resp) })
+  .receive("error", resp => { console.log("Unable to join", resp) })
+
+export default socket
diff --git assets/package.json assets/package.json
index aa41dee..53ac3a8 100644
--- assets/package.json
+++ assets/package.json
@@ -7,10 +7,7 @@
     "watch": "webpack --mode development --watch"
   },
   "dependencies": {
-    "phoenix": "file:../deps/phoenix",
-    "phoenix_html": "file:../deps/phoenix_html",
-    "phoenix_live_view": "file:../deps/phoenix_live_view",
-    "nprogress": "^0.2.0"
+    "phoenix": "file:../deps/phoenix"
   },
   "devDependencies": {
     "@babel/core": "^7.0.0",
diff --git config/config.exs config/config.exs
index 49df54b..3a38fed 100644
--- config/config.exs
+++ config/config.exs
@@ -11,7 +11,7 @@ use Mix.Config
 config :my_app, MyAppWeb.Endpoint,
   url: [host: "localhost"],
   secret_key_base: "[redacted]",
-  render_errors: [view: MyAppWeb.ErrorView, accepts: ~w(html json), layout: false],
+  render_errors: [view: MyAppWeb.ErrorView, accepts: ~w(json), layout: false],
   pubsub_server: MyApp.PubSub,
   live_view: [signing_salt: "[redacted]"]
 
diff --git config/dev.exs config/dev.exs
index 0f604b6..de05c41 100644
--- config/dev.exs
+++ config/dev.exs
@@ -45,16 +45,6 @@ config :my_app, MyAppWeb.Endpoint,
 # configured to run both http and https servers on
 # different ports.
 
-# Watch static and templates for browser reloading.
-config :my_app, MyAppWeb.Endpoint,
-  live_reload: [
-    patterns: [
-      ~r"priv/static/.*(js|css|png|jpeg|jpg|gif|svg)$",
-      ~r"lib/my_app_web/(live|views)/.*(ex)$",
-      ~r"lib/my_app_web/templates/.*(eex)$"
-    ]
-  ]
-
 # Do not include metadata nor timestamps in development logs
 config :logger, :console, format: "[$level] $message\n"
 
diff --git lib/my_app_web/endpoint.ex lib/my_app_web/endpoint.ex
index 76ddaf2..85a4675 100644
--- lib/my_app_web/endpoint.ex
+++ lib/my_app_web/endpoint.ex
@@ -14,8 +14,6 @@ defmodule MyAppWeb.Endpoint do
     websocket: true,
     longpoll: false
 
-  socket "/live", Phoenix.LiveView.Socket, websocket: [connect_info: [session: @session_options]]
-
   # Serve at "/" the static files from "priv/static" directory.
   #
   # You should set gzip to true if you are running phx.digest
@@ -29,8 +27,6 @@ defmodule MyAppWeb.Endpoint do
   # Code reloading can be explicitly enabled under the
   # :code_reloader configuration of your endpoint.
   if code_reloading? do
-    socket "/phoenix/live_reload/socket", Phoenix.LiveReloader.Socket
-    plug Phoenix.LiveReloader
     plug Phoenix.CodeReloader
   end
 
diff --git a/projects/phoenix/1.5.7/noecto-nohtml-nodash/lib/my_app_web/gettext.ex lib/my_app_web/gettext.ex
new file mode 100644
index 0000000..7919b97
--- /dev/null
+++ lib/my_app_web/gettext.ex
@@ -0,0 +1,24 @@
+defmodule MyAppWeb.Gettext do
+  @moduledoc """
+  A module providing Internationalization with a gettext-based API.
+
+  By using [Gettext](https://hexdocs.pm/gettext),
+  your module gains a set of macros for translations, for example:
+
+      import MyAppWeb.Gettext
+
+      # Simple translation
+      gettext("Here is the string to translate")
+
+      # Plural translation
+      ngettext("Here is the string to translate",
+               "Here are the strings to translate",
+               3)
+
+      # Domain-based translation
+      dgettext("errors", "Here is the error message to translate")
+
+  See the [Gettext Docs](https://hexdocs.pm/gettext) for detailed usage.
+  """
+  use Gettext, otp_app: :my_app
+end
diff --git lib/my_app_web/live/page_live.ex b/projects/phoenix/1.5.7/noecto-nogettext-live-nodash/lib/my_app_web/live/page_live.ex
deleted file mode 100644
index 1d75b57..0000000
--- lib/my_app_web/live/page_live.ex
+++ /dev/null
@@ -1,39 +0,0 @@
-defmodule MyAppWeb.PageLive do
-  use MyAppWeb, :live_view
-
-  @impl true
-  def mount(_params, _session, socket) do
-    {:ok, assign(socket, query: "", results: %{})}
-  end
-
-  @impl true
-  def handle_event("suggest", %{"q" => query}, socket) do
-    {:noreply, assign(socket, results: search(query), query: query)}
-  end
-
-  @impl true
-  def handle_event("search", %{"q" => query}, socket) do
-    case search(query) do
-      %{^query => vsn} ->
-        {:noreply, redirect(socket, external: "https://hexdocs.pm/#{query}/#{vsn}")}
-
-      _ ->
-        {:noreply,
-         socket
-         |> put_flash(:error, "No dependencies found matching \"#{query}\"")
-         |> assign(results: %{}, query: query)}
-    end
-  end
-
-  defp search(query) do
-    if not MyAppWeb.Endpoint.config(:code_reloader) do
-      raise "action disabled when not in development"
-    end
-
-    for {app, desc, vsn} <- Application.started_applications(),
-        app = to_string(app),
-        String.starts_with?(app, query) and not List.starts_with?(desc, ~c"ERTS"),
-        into: %{},
-        do: {app, vsn}
-  end
-end
diff --git lib/my_app_web/live/page_live.html.leex b/projects/phoenix/1.5.7/noecto-nogettext-live-nodash/lib/my_app_web/live/page_live.html.leex
deleted file mode 100644
index f116c9c..0000000
--- lib/my_app_web/live/page_live.html.leex
+++ /dev/null
@@ -1,48 +0,0 @@
-<section class="phx-hero">
-  <h1>Welcome to Phoenix!</h1>
-  <p>Peace of mind from prototype to production</p>
-
-  <form phx-change="suggest" phx-submit="search">
-    <input type="text" name="q" value="<%= @query %>" placeholder="Live dependency search" list="results" autocomplete="off"/>
-    <datalist id="results">
-      <%= for {app, _vsn} <- @results do %>
-        <option value="<%= app %>"><%= app %></option>
-      <% end %>
-    </datalist>
-    <button type="submit" phx-disable-with="Searching...">Go to Hexdocs</button>
-  </form>
-</section>
-
-<section class="row">
-  <article class="column">
-    <h2>Resources</h2>
-    <ul>
-      <li>
-        <a href="https://hexdocs.pm/phoenix/overview.html">Guides &amp; Docs</a>
-      </li>
-      <li>
-        <a href="https://github.com/phoenixframework/phoenix">Source</a>
-      </li>
-      <li>
-        <a href="https://github.com/phoenixframework/phoenix/blob/v1.5/CHANGELOG.md">v1.5 Changelog</a>
-      </li>
-    </ul>
-  </article>
-  <article class="column">
-    <h2>Help</h2>
-    <ul>
-      <li>
-        <a href="https://elixirforum.com/c/phoenix-forum">Forum</a>
-      </li>
-      <li>
-        <a href="https://webchat.freenode.net/?channels=elixir-lang">#elixir-lang on Freenode IRC</a>
-      </li>
-      <li>
-        <a href="https://twitter.com/elixirphoenix">Twitter @elixirphoenix</a>
-      </li>
-      <li>
-        <a href="https://elixir-slackin.herokuapp.com/">Elixir on Slack</a>
-      </li>
-    </ul>
-  </article>
-</section>
diff --git lib/my_app_web/router.ex lib/my_app_web/router.ex
index d7a49da..5f5f6fc 100644
--- lib/my_app_web/router.ex
+++ lib/my_app_web/router.ex
@@ -1,27 +1,11 @@
 defmodule MyAppWeb.Router do
   use MyAppWeb, :router
 
-  pipeline :browser do
-    plug :accepts, ["html"]
-    plug :fetch_session
-    plug :fetch_live_flash
-    plug :put_root_layout, {MyAppWeb.LayoutView, :root}
-    plug :protect_from_forgery
-    plug :put_secure_browser_headers
-  end
-
   pipeline :api do
     plug :accepts, ["json"]
   end
 
-  scope "/", MyAppWeb do
-    pipe_through :browser
-
-    live "/", PageLive, :index
+  scope "/api", MyAppWeb do
+    pipe_through :api
   end
-
-  # Other scopes may use custom stacks.
-  # scope "/api", MyAppWeb do
-  #   pipe_through :api
-  # end
 end
diff --git lib/my_app_web/templates/layout/app.html.eex b/projects/phoenix/1.5.7/noecto-nogettext-live-nodash/lib/my_app_web/templates/layout/app.html.eex
deleted file mode 100644
index 09ffdad..0000000
--- lib/my_app_web/templates/layout/app.html.eex
+++ /dev/null
@@ -1,5 +0,0 @@
-<main role="main" class="container">
-  <p class="alert alert-info" role="alert"><%= get_flash(@conn, :info) %></p>
-  <p class="alert alert-danger" role="alert"><%= get_flash(@conn, :error) %></p>
-  <%= @inner_content %>
-</main>
diff --git lib/my_app_web/templates/layout/live.html.leex b/projects/phoenix/1.5.7/noecto-nogettext-live-nodash/lib/my_app_web/templates/layout/live.html.leex
deleted file mode 100644
index 8dcded5..0000000
--- lib/my_app_web/templates/layout/live.html.leex
+++ /dev/null
@@ -1,11 +0,0 @@
-<main role="main" class="container">
-  <p class="alert alert-info" role="alert"
-    phx-click="lv:clear-flash"
-    phx-value-key="info"><%= live_flash(@flash, :info) %></p>
-
-  <p class="alert alert-danger" role="alert"
-    phx-click="lv:clear-flash"
-    phx-value-key="error"><%= live_flash(@flash, :error) %></p>
-
-  <%= @inner_content %>
-</main>
diff --git lib/my_app_web/templates/layout/root.html.leex b/projects/phoenix/1.5.7/noecto-nogettext-live-nodash/lib/my_app_web/templates/layout/root.html.leex
deleted file mode 100644
index d3b97a7..0000000
--- lib/my_app_web/templates/layout/root.html.leex
+++ /dev/null
@@ -1,28 +0,0 @@
-<!DOCTYPE html>
-<html lang="en">
-  <head>
-    <meta charset="utf-8"/>
-    <meta http-equiv="X-UA-Compatible" content="IE=edge"/>
-    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
-    <%= csrf_meta_tag() %>
-    <%= live_title_tag assigns[:page_title] || "MyApp", suffix: " · Phoenix Framework" %>
-    <link phx-track-static rel="stylesheet" href="<%= Routes.static_path(@conn, "/css/app.css") %>"/>
-    <script defer phx-track-static type="text/javascript" src="<%= Routes.static_path(@conn, "/js/app.js") %>"></script>
-  </head>
-  <body>
-    <header>
-      <section class="container">
-        <nav role="navigation">
-          <ul>
-            <li><a href="https://hexdocs.pm/phoenix/overview.html">Get Started</a></li>
-            
-          </ul>
-        </nav>
-        <a href="https://phoenixframework.org/" class="phx-logo">
-          <img src="<%= Routes.static_path(@conn, "/images/phoenix.png") %>" alt="Phoenix Framework Logo"/>
-        </a>
-      </section>
-    </header>
-    <%= @inner_content %>
-  </body>
-</html>
diff --git lib/my_app_web/views/error_helpers.ex lib/my_app_web/views/error_helpers.ex
index a250bf2..1882f7f 100644
--- lib/my_app_web/views/error_helpers.ex
+++ lib/my_app_web/views/error_helpers.ex
@@ -3,28 +3,31 @@ defmodule MyAppWeb.ErrorHelpers do
   Conveniences for translating and building error messages.
   """
 
-  use Phoenix.HTML
-
-  @doc """
-  Generates tag for inlined form input errors.
-  """
-  def error_tag(form, field) do
-    Enum.map(Keyword.get_values(form.errors, field), fn error ->
-      content_tag(:span, translate_error(error),
-        class: "invalid-feedback",
-        phx_feedback_for: input_id(form, field)
-      )
-    end)
-  end
-
   @doc """
-  Translates an error message.
+  Translates an error message using gettext.
   """
   def translate_error({msg, opts}) do
+    # When using gettext, we typically pass the strings we want
+    # to translate as a static argument:
+    #
+    #     # Translate "is invalid" in the "errors" domain
+    #     dgettext("errors", "is invalid")
+    #
+    #     # Translate the number of files with plural rules
+    #     dngettext("errors", "1 file", "%{count} files", count)
+    #
     # Because the error messages we show in our forms and APIs
     # are defined inside Ecto, we need to translate them dynamically.
-    Enum.reduce(opts, msg, fn {key, value}, acc ->
-      String.replace(acc, "%{#{key}}", to_string(value))
-    end)
+    # This requires us to call the Gettext module passing our gettext
+    # backend as first argument.
+    #
+    # Note we use the "errors" domain, which means translations
+    # should be written to the errors.po file. The :count option is
+    # set by Ecto and indicates we should also apply plural rules.
+    if count = opts[:count] do
+      Gettext.dngettext(MyAppWeb.Gettext, "errors", msg, msg, count, opts)
+    else
+      Gettext.dgettext(MyAppWeb.Gettext, "errors", msg, opts)
+    end
   end
 end
diff --git lib/my_app_web/views/error_view.ex lib/my_app_web/views/error_view.ex
index ce4cf28..6bc5b14 100644
--- lib/my_app_web/views/error_view.ex
+++ lib/my_app_web/views/error_view.ex
@@ -3,14 +3,14 @@ defmodule MyAppWeb.ErrorView do
 
   # If you want to customize a particular status code
   # for a certain format, you may uncomment below.
-  # def render("500.html", _assigns) do
-  #   "Internal Server Error"
+  # def render("500.json", _assigns) do
+  #   %{errors: %{detail: "Internal Server Error"}}
   # end
 
   # By default, Phoenix returns the status message from
-  # the template name. For example, "404.html" becomes
+  # the template name. For example, "404.json" becomes
   # "Not Found".
   def template_not_found(template, _assigns) do
-    Phoenix.Controller.status_message_from_template(template)
+    %{errors: %{detail: Phoenix.Controller.status_message_from_template(template)}}
   end
 end
diff --git lib/my_app_web/views/layout_view.ex b/projects/phoenix/1.5.7/noecto-nogettext-live-nodash/lib/my_app_web/views/layout_view.ex
deleted file mode 100644
index 80fc067..0000000
--- lib/my_app_web/views/layout_view.ex
+++ /dev/null
@@ -1,3 +0,0 @@
-defmodule MyAppWeb.LayoutView do
-  use MyAppWeb, :view
-end
diff --git lib/my_app_web.ex lib/my_app_web.ex
index f3f5856..7af6bb3 100644
--- lib/my_app_web.ex
+++ lib/my_app_web.ex
@@ -22,6 +22,7 @@ defmodule MyAppWeb do
       use Phoenix.Controller, namespace: MyAppWeb
 
       import Plug.Conn
+      import MyAppWeb.Gettext
       alias MyAppWeb.Router.Helpers, as: Routes
     end
   end
@@ -41,51 +42,29 @@ defmodule MyAppWeb do
     end
   end
 
-  def live_view do
-    quote do
-      use Phoenix.LiveView,
-        layout: {MyAppWeb.LayoutView, "live.html"}
-
-      unquote(view_helpers())
-    end
-  end
-
-  def live_component do
-    quote do
-      use Phoenix.LiveComponent
-
-      unquote(view_helpers())
-    end
-  end
-
   def router do
     quote do
       use Phoenix.Router
 
       import Plug.Conn
       import Phoenix.Controller
-      import Phoenix.LiveView.Router
     end
   end
 
   def channel do
     quote do
       use Phoenix.Channel
+      import MyAppWeb.Gettext
     end
   end
 
   defp view_helpers do
     quote do
-      # Use all HTML functionality (forms, tags, etc)
-      use Phoenix.HTML
-
-      # Import LiveView helpers (live_render, live_component, live_patch, etc)
-      import Phoenix.LiveView.Helpers
-
       # Import basic rendering functionality (render, render_layout, etc)
       import Phoenix.View
 
       import MyAppWeb.ErrorHelpers
+      import MyAppWeb.Gettext
       alias MyAppWeb.Router.Helpers, as: Routes
     end
   end
diff --git mix.exs mix.exs
index 46e3da6..61e2064 100644
--- mix.exs
+++ mix.exs
@@ -7,7 +7,7 @@ defmodule MyApp.MixProject do
       version: "0.1.0",
       elixir: "~> 1.7",
       elixirc_paths: elixirc_paths(Mix.env()),
-      compilers: [:phoenix] ++ Mix.compilers(),
+      compilers: [:phoenix, :gettext] ++ Mix.compilers(),
       start_permanent: Mix.env() == :prod,
       aliases: aliases(),
       deps: deps()
@@ -34,12 +34,9 @@ defmodule MyApp.MixProject do
   defp deps do
     [
       {:phoenix, "~> 1.5.7"},
-      {:phoenix_live_view, "~> 0.15.0"},
-      {:floki, ">= 0.27.0", only: :test},
-      {:phoenix_html, "~> 2.11"},
-      {:phoenix_live_reload, "~> 1.2", only: :dev},
       {:telemetry_metrics, "~> 0.4"},
       {:telemetry_poller, "~> 0.4"},
+      {:gettext, "~> 0.11"},
       {:jason, "~> 1.0"},
       {:plug_cowboy, "~> 2.0"}
     ]
diff --git a/projects/phoenix/1.5.7/noecto-nohtml-nodash/priv/gettext/en/LC_MESSAGES/errors.po priv/gettext/en/LC_MESSAGES/errors.po
new file mode 100644
index 0000000..cdec3a1
--- /dev/null
+++ priv/gettext/en/LC_MESSAGES/errors.po
@@ -0,0 +1,11 @@
+## `msgid`s in this file come from POT (.pot) files.
+##
+## Do not add, change, or remove `msgid`s manually here as
+## they're tied to the ones in the corresponding POT file
+## (with the same domain).
+##
+## Use `mix gettext.extract --merge` or `mix gettext.merge`
+## to merge POT files into PO files.
+msgid ""
+msgstr ""
+"Language: en\n"
diff --git a/projects/phoenix/1.5.7/noecto-nohtml-nodash/priv/gettext/errors.pot priv/gettext/errors.pot
new file mode 100644
index 0000000..d6f47fa
--- /dev/null
+++ priv/gettext/errors.pot
@@ -0,0 +1,10 @@
+## This is a PO Template file.
+##
+## `msgid`s here are often extracted from source code.
+## Add new translations manually only if they're dynamic
+## translations that can't be statically extracted.
+##
+## Run `mix gettext.extract` to bring this file up to
+## date. Leave `msgstr`s empty as changing them here has no
+## effect: edit them in PO (`.po`) files instead.
+
diff --git test/my_app_web/live/page_live_test.exs b/projects/phoenix/1.5.7/noecto-nogettext-live-nodash/test/my_app_web/live/page_live_test.exs
deleted file mode 100644
index 7d971b0..0000000
--- test/my_app_web/live/page_live_test.exs
+++ /dev/null
@@ -1,11 +0,0 @@
-defmodule MyAppWeb.PageLiveTest do
-  use MyAppWeb.ConnCase
-
-  import Phoenix.LiveViewTest
-
-  test "disconnected and connected render", %{conn: conn} do
-    {:ok, page_live, disconnected_html} = live(conn, "/")
-    assert disconnected_html =~ "Welcome to Phoenix!"
-    assert render(page_live) =~ "Welcome to Phoenix!"
-  end
-end
diff --git test/my_app_web/views/error_view_test.exs test/my_app_web/views/error_view_test.exs
index 770b34b..05a065b 100644
--- test/my_app_web/views/error_view_test.exs
+++ test/my_app_web/views/error_view_test.exs
@@ -4,11 +4,12 @@ defmodule MyAppWeb.ErrorViewTest do
   # Bring render/3 and render_to_string/3 for testing custom views
   import Phoenix.View
 
-  test "renders 404.html" do
-    assert render_to_string(MyAppWeb.ErrorView, "404.html", []) == "Not Found"
+  test "renders 404.json" do
+    assert render(MyAppWeb.ErrorView, "404.json", []) == %{errors: %{detail: "Not Found"}}
   end
 
-  test "renders 500.html" do
-    assert render_to_string(MyAppWeb.ErrorView, "500.html", []) == "Internal Server Error"
+  test "renders 500.json" do
+    assert render(MyAppWeb.ErrorView, "500.json", []) ==
+             %{errors: %{detail: "Internal Server Error"}}
   end
 end
diff --git test/my_app_web/views/layout_view_test.exs b/projects/phoenix/1.5.7/noecto-nogettext-live-nodash/test/my_app_web/views/layout_view_test.exs
deleted file mode 100644
index e1e43f4..0000000
--- test/my_app_web/views/layout_view_test.exs
+++ /dev/null
@@ -1,8 +0,0 @@
-defmodule MyAppWeb.LayoutViewTest do
-  use MyAppWeb.ConnCase, async: true
-
-  # When testing helpers, you may want to import Phoenix.HTML and
-  # use functions such as safe_to_string() to convert the helper
-  # result into an HTML string.
-  # import Phoenix.HTML
-end
